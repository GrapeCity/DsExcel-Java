{
  "accessworksheet.name": "Access a worksheet",
  "activateworksheet.name": "Activate a worksheet",
  "addcustomtablestyle.name": "Add a custom table style",
  "addcustomthemes.name": "Add custom themes",
  "addworksheet.name": "Add a worksheet",
  "applytablestyle.name": "Apply built-in styles to tables",
  "changeworkbooktheme.name": "Change workbook themes",
  "clearsparklinegroup.name": "Clear the sparkline group",
  "clearsparklines.name": "Clear sparklines",
  "configsparklinesettings.name": "Configure sparkline settings",
  "configworksheet.name": "Configure worksheet properties",
  "createnewworkbook.name": "Create new workbook",
  "createsparklines.name": "Create sparklines",
  "createtable.name": "Create a table",
  "customsort.name": "Sort list by custom parameter",
  "deleteworksheet.name": "Delete a worksheet",
  "filtering.name": "Filtering",
  "groupexistsparklines.name": "Group exist sparklines",
  "importexcelfiletoworkbook.name": "Import Excel file",
  "importexcelfilewithpassword.name": "Import Excel file with password",
  "insertdeletetablerowcolumns.name": "Insert or delete table rows and columns",
  "performcalculationsintable.name": "Perform calculations in the table",
  "protectworksheet.name": "Protect worksheet",
  "removetable.name": "Remove table",
  "saveworkbooktoexcelfile.name": "Save to Excel file",
  "saveworkbookwithpassword.name": "Save to Excel file with password",
  "sorting.name": "Sorting",
  "sortrangebyfontcolor.name": "Sort by font color",
  "sortrangebyicon.name": "Sort by icon",
  "sortrangebyinterior.name": "Sort range by content",
  "sortrangebyvalue.name": "Sort range by value",
  "sparklines.name": "Sparklines",
  "tablefilter.name": "Filter table range",
  "tables.name": "Tables",
  "tablesort.name": "Sort table range",
  "textfilter.name": "Apply text filter",
  "theme.name": "Theme",
  "unprotectworksheet.name": "Unprotect worksheet",
  "usedateaxis.name": "Use date axis",
  "valuefilter.name": "Value Filter",
  "workbook.name": "Workbook",
  "worksheets.name": "Worksheets",
  "addslicersfortable.name": "Add slicers to tables",
  "slicer.name": "Slicer",
  "addslicersforpivottable.name": "Add slicers to Pivot Tables",
  "dotablefilter.name": "Auto-filter table with slicer",
  "applyslicerstyle.name": "Apply built-in style to slicer",
  "useslicerdofilter.name": "Use slicer to filter table",
  "configslicerlayout.name": "Configure slicer layout",
  "createconnectorshape.name": "Create connector shape",
  "shape.name": "Shape",
  "connectshapesbyconnector.name": "Connect shapes with connector shape",
  "configshapewithpicturefill.name": "Set shape's picture fill",
  "configshapewithgradientfill.name": "Set shape's gradient fill",
  "configshapewithpatternfill.name": "Set shape's pattern fill",
  "configshapewithtexturefill.name": "Set shape's texture fill",
  "configshapewithsolidfill.name": "Set shape's solid fill",
  "configshapeline.name": "Set shape's line format",
  "configshape3dformat.name": "Set shape's 3D format",
  "setshapetext.name": "Set shape's text",
  "createpicture.name": "Create picture",
  "deletepicture.name": "Delete picture",
  "mergecells.name": "Merge cells",
  "rangeoperations.name": "Range Operations",
  "accesseachareaofrange.name": "Access areas in a range",
  "getrangerowcountcolumncount.name": "Get row and column count",
  "accesscellsrowscolumns.name": "Access cells, rows and columns in a range",
  "getworksheetusedrange.name": "Get used range",
  "setrowheightcolumnwidth.name": "Set row height and column width",
  "accessrange.name": "Access a range",
  "insertcellsdeletecells.name": "Insert or delete cells",
  "insertdeleterowscolumns.name": "Insert or delete rows and columns",
  "cutcopyrange.name": "Cut or copy ranges",
  "getfeaturerelatedusedrange.name": "Get used range features",
  "pivottable.name": "Pivot Table",
  "createpivottable.name": "Create Pivot Tables",
  "changedatafieldsummarizefunction.name": "Set field's summarize function",
  "modifysubtotalsforpivotfield.name": "Modify pivot field subtotal type",
  "filteritemsinpivottable.name": "Filter items in Pivot Tables",
  "refreshpivottable.name": "Refresh Pivot Table",
  "deletehyperlinks.name": "Delete hyperlinks",
  "createrangegroup.name": "Create range group",
  "ungrouprange.name": "Ungroup range",
  "clearoutline.name": "Clear outline",
  "showspecificlevel.name": "Show specific level group",
  "addcustomname.name": "Add custom names",
  "grouping.name": "Grouping",
  "hyperlinks.name": "Hyperlinks",
  "picture.name": "Picture",
  "configworkbookreferencestyle.name": "Set workbook's reference style",
  "formulas.name": "Formulas",
  "usearrayformula.name": "Use array formulas",
  "usetableformula.name": "Use table formulas",
  "dirtyandcalculation.name": "Dirty and Calculate methods",
  "setrangevalue.name": "Set values to a range",
  "tojsonfromjson.name": "ToJson and FromJson",
  "customnumberformat.name": "Set custom number format",
  "dateandtimeformat.name": "Set date and time format",
  "formatting.name": "Formatting",
  "numberformats.name": "Set number format",
  "halignvalign.name": "Set horizontal and vertical alignment",
  "shrinktofit.name": "Shrink to fit",
  "rotatecellcontents.name": "Rotate cell contents",
  "wraptext.name": "Wrap text",
  "addborderstocell.name": "Add borders to cell",
  "addingborderstorange.name": "Add borders to range",
  "fontcolor.name": "Set font color",
  "fonteffect.name": "Set font effect",
  "fontname.name": "Set font name",
  "fontsize.name": "Set font size",
  "fontstyle.name": "Set font style",
  "fontunderline.name": "Set font underline",
  "lineargradientfill.name": "Set linear gradient fill",
  "patternfill.name": "Set pattern fill",
  "rectangulargradientfill.name": "Set rectangular gradient fill",
  "solidfill.name": "Set solid fill",
  "textorientation.name": "Set text orientation",
  "alignment.name": "Alignment",
  "applystyle.name": "Apply style to range",
  "borders.name": "Borders",
  "createcustomstyle.name": "Create custom style",
  "fill.name": "Fill",
  "fonts.name": "Fonts",
  "getdisplayformat.name": "Get display format",
  "protection.name": "Protection",
  "setrangeformulahidden.name": "Hide formula",
  "setrangelocked.name": "Lock range",
  "addcomment.name": "Add comment to cell",
  "clearcomment.name": "Clear comments",
  "comments.name": "Comments",
  "configcommentlayout.name": "Configure comment's layout",
  "setrichtextforcomment.name": "Set rich text for comment",
  "conditionalformatting.name": "Conditional Formatting",
  "createaveragerule.name": "Create average rule",
  "createcellvaluerule.name": "Create cell value rule",
  "createdatabbarrule.name": "Create data bar rule",
  "createexpressionrule.name": "Create expression rule",
  "createiconsetrule.name": "Create icon set rule",
  "createmultiruleforrange.name": "Create multiple rules for a range",
  "createthreecolorscalerule.name": "Create three color scale rule",
  "createtopbottomrule.name": "Create top bottom rule",
  "createtwocolorscalerule.name": "Create two color scale rule",
  "createuniquerule.name": "Create unique rule",
  "deleteconditionalformatrules.name": "Delete conditional format rules",
  "rootexample.name": "All",
  "createcustomvalidation.name": "Create custom validation",
  "createdatevalidation.name": "Create date validation",
  "createdecimalvalidation.name": "Create decimal validation",
  "createlistvalidation.name": "Create list validation",
  "createtextlength.name": "Create text length validation",
  "createtimevalidation.name": "Create time validation",
  "createwholenumbervalidation.name": "Create whole number validation",
  "datavalidation.name": "Data Validation",
  "deletevalidation.name": "Delete validation",
  "modifyvalidation.name": "Modify validation",
  "addseries.name": "Add series for chart",
  "charts.name": "Charts",
  "configbubblechartlayout.name": "Configure bubble chart's layout",
  "configdatalabeltext.name": "Configure data label's text",
  "configdatapointformat.name": "Configure data point's format",
  "createchart.name": "Create chart",
  "createdropline.name": "Create drop line",
  "createhiloline.name": "Create high-low line",
  "createtrendline.name": "Create trend line",
  "deletechart.name": "Delete chart",
  "series.name": "Series",
  "setvarycolorforcolumnchart.name": "Set column chart colors to vary",
  "createconnectorline.name": "Create connector line for pie of pie chart",
  "createseriesline.name": "Create series line for column chart",
  "extendseries.name": "Add new points for existing series",
  "createupdownbars.name": "Create up down bars for line chart",
  "accesstableranges.name": "Access each table range",
  "axes.name": "Axis",
  "configcategoryaxesformat.name": "Configure category axis style",
  "configaxistitle.name": "Configure axis title style",
  "configcategoryaxisunits.name": "Set data axis units",
  "configdisplayunitlabel.name": "Configure display unit label style",
  "configgridlines.name": "Configure gridline style",
  "configtickmarklabel.name": "Set tick mark label style",
  "configvalueaxisunits.name": "Set value axis units",
  "setaxisscaletype.name": "Set value axis scale type",
  "setaxistickmark.name": "Configure axis tick mark layout",
  "chartjustplotvisiblecell.name": "Plot only visible cells",
  "configchartareaformat.name": "Configure chart area format",
  "configchartfloorstyle.name": "Configure chart floor style",
  "configcharttitlestyle.name": "Configure chart title style",
  "configchartwallstyle.name": "Configure chart walls style",
  "configlegendentryfontstyle.name": "Configure legend entry font style",
  "configlegendpositionandlayout.name": "Configure legend position and layout",
  "configplotareaformat.name": "Configure plot area format",
  "bloodpressuretracker.name": "Blood pressure tracker",
  "usecases.name": "Use Cases",
  "todolistwithprogresstracker.name": "To do list with progress tracker",
  "costanalysiswithparetochart.name": "Cost analysis with Pareto chart",
  "datedynamicfilter.name": "Filter date dynamically",
  "bidtracker.name": "Bid tracker",
  "personaladdressbook.name": "Personal address book",
  "customerprofitabilityanalysis.name": "Customer profitability analysis",
  "datefiltering.name": "Date Filter",
  "filteringbycolor.name": "Filter by color",
  "filteringbyicon.name": "Filter by icon",
  "numberfiltering.name": "Number Filter",
  "textfiltering.name": "Text Filter",
  "changeworksheetfilterrange.name": "Change worksheet filter range",
  "clearfilter.name": "Clear worksheet filter",
  "datefilter.name": "Apply date filter",
  "filterbynofill.name": "Filter by no fill",
  "filterbyautomaticfontcolor.name": "Filter by automatic font color",
  "filterbycellcolor.name": "Filter by cell color",
  "filterbyfontcolor.name": "Filter by font color",
  "filterbyicon.name": "Filter by icon",
  "filterbynoicon.name": "Filter by no icon",
  "multiselectfilter.name": "Apply multiple value filter",
  "reapplyfilter.name": "Reapply filter",
  "features.name": "Features",
  "samples.name": "Samples",
  "movielist.name": "Movie list",
  "simpleinvoice.name": "Simple invoice",
  "createhyperlinks.name": "Create hyperlinks",
  "basicsalesreport.name": "Basic sales report",
  "personalnetworthcalculator.name": "Personal net worth calculator",
  "spreadsheetsviewer.name": "Spread.Sheets Viewer",
  "usecases.descrip": "Two more GrapeCity Documents for Excel usage scenarios are as follows:\n- **Code** Use GrapeCity Documents for Excel API code, then export to an Excel file.\n- **Templates** Import an Excel template to the GrapeCity Documents for Excel data model, then use GrapeCity Documents for Excel API code to add content, then export it to an Excel file.",
  "excelreporting.name": "Excel Reporting",
  "exceltemplates.name": "Excel Templates",
  "hiddenrowcolumn.name": "Hide rows and columns",
  "homeinventory.name": "Home inventory",
  "collapsegroup.name": "Collapse group",
  "simplepersonalbudget.name": "Simple personal budget",
  "studentcalendar.name": "Student calendar",
  "travelexpensereport.name": "Travel expense report",
  "monthlybusinessbudget.name": "Monthly business budget",
  "simplebudget.name": "Simple Budget",
  "addcustomslicerstyle.name": "Add a custom slicer style",
  "bloodsugartracker.name": "Blood sugar tracker",
  "tutorial.name": "Tutorial",
  "useslicertoclearfilter.name": "Use a slicer to clear a filter",
  "projectcosttracker.name": "Project cost tracker",
  "eventbudget.name": "Event budget",
  "numberfilter.name": "Apply number filter",
  "numberformat.name": "Number Format",
  "configvalueaxesformat.name": "Configure value axis style",
  "changeseriestype.name": "Change series type",
  "configdatalabelformat.name": "Configure data label's format",
  "configmarkerstyle.name": "Configure markers style",
  "confignegativepoint.name": "Configure negative point style",
  "configseriesformat.name": "Configure series format",
  "createsecondaryaxis.name": "Create secondary axis",
  "deleteseries.name": "Delete series",
  "configcharttitlerichtext.name": "Configure chart title with rich text",
  "chartarea.name": "Chart area",
  "chartlines.name": "Chart lines",
  "charttitle.name": "Chart title",
  "chartwalls.name": "Chart walls",
  "configchartareafont.name": "Configure chart area's font",
  "configchartbackwall.name": "Configure chart back wall",
  "configchartsidewall.name": "Configure chart side wall",
  "datalabel.name": "Data label",
  "datapoint.name": "Data point",
  "legend.name": "Legend",
  "chart3dformat.name": "Chart 3D format",
  "configlegendformat.name": "Configure legend format",
  "configsecondarysection.name": "Configure secondary section for pie of pie chart",
  "plotarea.name": "Plot area",
  "chartgallery.name": "Chart gallery",
  "areachart.name": "Area chart",
  "areastacked100.name": "100% Stacked chart",
  "areastackedchart.name": "Stacked Area chart",
  "barclusteredchart.name": "Clustered Bar chart",
  "barstacked100chart.name": "100% Stacked Bar chart",
  "barstackedchart.name": "Stacked Bar chart",
  "columnclusteredchart.name": "Clustered Column chart",
  "columnstacked100chart.name": "100% Stacked Column chart",
  "columnstackedchart.name": "Stacked Column chart",
  "linechart.name": "Line chart",
  "linemarkerschart.name": "Line Markers chart",
  "linestacked100chart.name": "100% Stacked Line chart",
  "linestackedchart.name": "Stacked Line chart",
  "piechart.name": "Pie chart",
  "stock_highlowclosestockchart.name": "High-Low-Close stock chart",
  "stock_openhighlowclosestock.name": "Open-High-Low-Close stock chart",
  "stock_volumehighlowclosestock.name": "Volume-High-Low-Close stock chart",
  "xyscatterchart.name": "Scatter chart",
  "xyscatterlineschart.name": "Scatter with straight lines and markers",
  "xyscattersmooth.name": "Scatter with smooth Lines",
  "bubblechart.name": "Bubble chart",
  "configheaderfooter.name": "Configure page header footer",
  "configevenpageheaderfooter.name": "Configure even page header footer",
  "configfirstpagenumber.name": "Configure first page number",
  "configpagemargins.name": "Configure page margins",
  "configpageorder.name": "Configure page order",
  "configpageorientation.name": "Configure page orientation",
  "configpaperscaling.name": "Configure paper scaling",
  "configpapersize.name": "Configure paper size",
  "configprintarea.name": "Configure print area",
  "configsheetprintsettings.name": "Configure sheet print settings",
  "pagesetup.name": "Page Setup",
  "combinationchart1.name": "Combination chart",
  "combinationchart2.name": "Combination chart",
  "linemarkerstackedchart.name": "Stack line with markers chart",
  "pie_doughnutchart.name": "Doughnut chart",
  "stock_volumeopenhighlowclose.name": "Volume-Open-High-Low-Close chart",
  "xyscattersmoothwithmarkers.name": "Scatter with smooth lines and markers",
  "linemarkerstacked100chart.name": "100% Stacked line with markers chart",
  "configmarkersformat.name": "Configure markers format",
  "markers.name": "Markers",
  "configchart3dformat.name": "Configure chart 3D format",
  "configfirstpageheaderfooter.name": "Configure first page header footer",
  "eventplanningtracker.name": "Event planning tracker",
  "familybudget.name": "Family budget",
  "configprinttitlecolumns.name": "Configure columns to repeat at left",
  "configprinttailcolumns.name": "Configure columns to repeat at right",
  "configprinttitlerows.name": "Configure rows to repeat at top",
  "configprinttailrows.name": "Configure rows to repeat at bottom",
  "configpagecenter.name": "Configure page center",
  "importexcelfiledataonly.name": "Only import data from Excel",
  "importexcelfilewithoutcalculation.name": "Do not recalculate after opening Excel",
  "pdfexporting.name": "PDF Exporting",
  "saveworkbooktopdf.name": "Save workbook to PDF",
  "saveworksheettopdf.name": "Save worksheet to PDF",
  "configurepagesetup.name": "Page settings",
  "setfontsfolderpath.name": "Set font's folder",
  "shapecopy.name": "Copy shape",
  "shapecut.name": "Cut shape",
  "shapeduplicate.name": "Duplicate shape",
  "chartcopy.name": "Copy chart",
  "chartcut.name": "Cut chart",
  "chartduplicate.name": "Duplicate chart",
  "picturecopy.name": "Copy picture",
  "picturecut.name": "Cut picture",
  "pictureduplicate.name": "Duplicate picture",
  "slicercopy.name": "Copy slicer",
  "slicercut.name": "Cut slicer",
  "slicerduplicate.name": "Duplicate slicer",
  "importcsvfiletoworkbook.name": "Import csv file to workbook",
  "importcsvfiletoworkbookwithoptions.name": "Import csv file to workbook with options",
  "saveworksheettocsvfile.name": "Save worksheet to csv file",
  "saveworkbooktocsvfile.name": "Save workbook to csv file",
  "saveworkbooktocsvfilewithoptions.name": "Save workbook to csv file with options",
  "saveworksheettocsvfilewithoptions.name": "Save worksheet to csv file with options",
  "configureworkbookview.name": "Configure workbook view",
  "configureworksheetview.name": "Configure worksheet view",
  "text.name": "Export text",
  "savesparklinestopdf.name": "Export sparklines",
  "textstyle.name": "Export font effects",
  "saverangefilltopdf.name": "Export fills",
  "savepicturetopdf.name": "Export picture",
  "numberformating.name": "Export number formats",
  "overflow.name": "Export overflow text",
  "configureblackandwhite.name": "Black & white",
  "configuredraft.name": "Draft",
  "configureheaderfooter.name": "Header footer",
  "configureoritation.name": "Orientation",
  "configurepagebreaks.name": "Page breaks",
  "configurepageorder.name": "Page order",
  "configurepagination.name": "Pagination",
  "configureprintarea.name": "Print area",
  "configureprintpagerange.name": "Print page range",
  "configureprinttitles.name": "Print titles",
  "configurescaling.name": "Scaling",
  "pdfpagesetup.name": "Page setup",
  "convertexceltopdf.name": "Convert Excel file to PDF",
  "saveborder.name": "Export borders",
  "saveconditionalformatting.name": "Export conditional formatting",
  "savetable.name": "Export table",
  "financialkpis.name": "Financial KPIs",
  "incomestatement.name": "Income statement",
  "annualfinancialreport.name": "Annual financial report",
  "agingreport.name": "Aging Report",
  "cellinfo.name": "Use CellInfo helper class",
  "customfunctions.name": "Custom Function",
  "myaddfunction.name": "MyAddFunction",
  "myconcatenatefunction.name": "MyConcatenateFunction",
  "myconditionalsumfunction.name": "MyConditionalSumFunction",
  "myiserrorfunction.name": "MyIsErrorFunction",
  "myismergedrangefunction.name": "MyIsMergedRangeFunction",
  "mysumfunction.name": "MySumFunction",
  "charactercelltext.name": "Use Character method",
  "addtextrun.name": "Use IRichText interface",
  "cellrichtext.name": "Cell Rich Text",
  "configrunfont.name": "Configure text run's font",
  "exportcellrichtext.name": "Cell rich text",
  "verticaltext.name": "Export vertical text",
  "importxlsmtoworkbook.name": "Open and save xlsm file",
  "createstylebaseon.name": "Create and modify style based on a style",
  "setbackgroundimage.name": "Set background image for worksheet",
  "loadandsavejsonwithshapes.name": "Load and save json containing shapes",
  "websiteflowchart.name": "Website flow chart",
  "setjava8datevalue.name": "Set java 8 date time value",
  "copypasteoptions.name": "Paste options of copy",
  "cutcopyrangebetweenworkbooks.name": "Cut or copy range between workbooks",
  "copyworksheet.name": "Copy worksheet",
  "copyworksheetbetweenworkbooks.name": "Copy worksheet between workbooks",
  "moveworksheet.name": "Move worksheet",
  "moveworksheetbetweenworkbooks.name": "Move worksheet between workbooks",
  "exportshape.name": "Export Shape",
  "basicshape.name": "Basic shapes",
  "customshape.name": "Custom shapes",
  "exportflowchart.name": "FlowChart",
  "setshapenottoprint.name": "Do not print shapes",
  "shapewithline.name": "Shape with line format",
  "shapewithpictureortexturefill.name": "Shape with picture or texture fill",
  "shapewithrotation.name": "Shape with rotation",
  "shapewithtext.name": "Shape with text",
  "savepivottable.name": "Export Pivot Table",
  "setbuiltinstyle.name": "Set built-in pivot style",
  "setcustompivotstyle.name": "Set custom pivot style",
  "setnumberformatforfield.name": "Set number format for Fields",
  "setshowtablestyles.name": "Set if some style would be shown",
  "autofit.name": "Autofit column width and row height",
  "importoleobjectstoworkbookandexport.name": "Import and export OLE objects",
  "findandreplace.name": "Find and Replace",
  "findbasicusage.name": "Find (Basic usage)",
  "finddisplayformat.name": "Find (With cell format)",
  "findlookatsearchorderdirectionmatchcase.name": "Find (Options combination)",
  "findmatchbyte.name": "Find (Match byte)",
  "findwithafter.name": "Find (Enumerate all occurrences)",
  "findwithlookin.name": "Find (Look in different places)",
  "replacebasicusage.name": "Replace (Basic usage)",
  "replacecustomwrapsearch.name": "Replace (With wrap search)",
  "replacewithoptions.name": "Replace (With options)",
  "controladjustingpagebreaks.name": "Control adjustment of page breaks",
  "configureprinttails.name": "Print Tails",
  "shrinktofitforwrappedtext.name": "Shrink to fit for wrapped text",
  "custompageinfos.name": "Custom pageInfos",
  "printmanager.name": "PrintManager",
  "keeptogether.name": "Keep together certain data",
  "manageheadersondifferentpages.name": "Repeat different headers in different pages",
  "printmultiplepagestoonepage.name": "Print multiple pages to one page",
  "printspecificpages.name": "Print specific pages",
  "savemultipleworkbookstopdf.name": "Save multiple workbooks to one pdf",
  "renderexcelrangesinsideapdf.name": "Render sheet ranges inside a pdf(Advanced usage)",
  "drawrangeinsideapdf.name": "Render sheet ranges inside a pdf(Basic usage)",
  "convertrangetoimage.name": "Convert range to image",
  "convertshapetoimage.name": "Convert shape to image",
  "exportsheettoimage.name": "Convert sheet to image from existing file",
  "exportshapetoimage.name": "Convert shape to image from existing file",
  "exportrangetoimage.name": "Convert range to image from existing file",
  "addsubtotal.name": "Add subtotal",
  "addsubtotaladvanced.name": "Add subtotal (with advanced options)",
  "hidegrandtotalsinpivottable.name": "Grand total visibility",
  "removesubtotal.name": "Remove subtotals",
  "rowaxislayoutinpivottable.name": "Change row axis layout",
  "setpivotfieldnameinpivottable.name": "Rename a pivot field",
  "shapegroup.name": "Group shapes",
  "shapeungroup.name": "Ungroup shape",
  "addsubtotal.descrip": "Add subtotal to a range with IRange.Subtotal",
  "addsubtotaladvanced.descrip": "Add subtotal to a range with IRange.Subtotal (Advanced)",
  "hidegrandtotalsinpivottable.descrip": "Set visibility of row and column grand totals with RowGrand and ColumnGrand",
  "removesubtotal.descrip": "Remove subtotals with IRange.RemoveSubtotal",
  "rowaxislayoutinpivottable.descrip": "Set row axis layout to tabular with IPivotTable.SetRowAxisLayout",
  "setpivotfieldnameinpivottable.descrip": "Rename a pivot field with IPivotField.Name property",
  "shapeungroup.descrip": "Ungroup a shape with IShape.Ungroup",
  "shapegroup.descrip": "Group a ShapeRange with IShapeRange.Group",
  "saveslicer.descrip": "Slicers can be exported to pdf",
  "saveslicer.name": "Export slicers",
  "configurebestfitrowcolumn.name": "BestFit row & column",
  "configadjustmentpoints.name": "Adjustment points",
  "tag.name": "Tag of sheet/row/column/cell",
  "protectworkbook.name": "Protect workbook",
  "protectworkbook.descrip": "Using IWorkbook.Protect method to protect a workbook.",
  "unprotectworkbook.name": "Unprotect workbook",
  "unprotectworkbook.descrip": "Using IWorkbook.Unprotect method to unprotect a workbook.",
  "newcharts.name": "Excel 2016 New Charts",
  "newcharts.descrip": "## Excel 2016 New Charts\nGrapeCity Documents for Excel adds Excel 2016 new charts by calling **IShapes.AddChart** method and setting different **ChartType** . GrapeCity Documents for Excel supports the following types of new charts:\n- Sunburst\n- Treemap\n- Funnel\n- Waterfall\n- Box&Whisker\n- Histogram\n- Pareto",
  "addboxwhiskerchart.name": "Add a box&whisker chart",
  "addboxwhiskerchart.descrip": "This sample demonstrates how to create a box&whisker chart.",
  "addfunnelchart.name": "Add a funnel chart",
  "addfunnelchart.descrip": "This sample demonstrates how to create a funnel chart.",
  "addhistogramchart.name": "Add a histogram chart",
  "addhistogramchart.descrip": "This sample demonstrates how to create a histogram chart.",
  "addparetochart.name": "Add a pareto chart",
  "addparetochart.descrip": "This sample demonstrates how to create a pareto chart.",
  "addsunburstchart.name": "Add a sunburst chart",
  "addsunburstchart.descrip": "This sample demonstrates how to create a sunburst chart.",
  "addtreemapchart.name": "Add a treemap chart",
  "addtreemapchart.descrip": "This sample demonstrates how to create a treemap chart.",
  "addwaterfallchart.name": "Add a waterfall chart",
  "addwaterfallchart.descrip": "This sample demonstrates how to create a waterfall chart.",
  "addusershapes.name": "Add user shapes",
  "addusershapes.descrip": "Insert pictures, shapes into a chart. These inserted pictures or shapes are called the user shapes of this chart.",
  "createshapewithhyperlink.name": "Create hyperlinks on shape",
  "createshapewithhyperlink.descrip": "This sample demonstrates how to add a hyperlink to a shape.",
  "addchartsheet.name": "Add a chart sheet",
  "addchartsheet.descrip": "This sample demonstrates how to create a chart sheet.",
  "savesheetbackgroundtopdf.name": "Export sheet background image",
  "savesheetbackgroundtopdf.descrip": "GrapeCity Documents for Excel supports exporting the sheet background image to PDF.",
  "setdocumentpropertiestopdf.name": "Set document properties for PDF document",
  "setdocumentpropertiestopdf.descrip": "GrapeCity Documents for Excel supports setting the document properties when saving PDF.",
  "setsecurityoptionstopdf.name": "Set security options for PDF document",
  "setsecurityoptionstopdf.descrip": "GrapeCity Documents for Excel supports setting the security options when saving PDF.",
  "configurebestfitrowcolumn.descrip": "Set best fit row/column to auto fit row height/column width when exporting PDF.",
  "tag.descrip": "Tag provides the ability to store private data in cell/row/column/sheet.",
  "configadjustmentpoints.descrip": "Use IShape.Adjustments to get/set adjustment points for shapes.",
  "areachartpdf.descrip": "Export area chart to PDF file",
  "barchartpdf.descrip": "Export bar chart to PDF file",
  "chartgallerypdf.descrip": "In this example, GcExcel first opens an Excel file that contains some charts, then export it to a PDF file.",
  "columnchartpdf.descrip": "Export column chart to PDF file",
  "combochartpdf.descrip": "Export combo chart to PDF file",
  "linechartpdf.descrip": "Export line chart to PDF file",
  "piechartpdf.descrip": "Export pie chart to PDF file",
  "radarchartpdf.descrip": "Export radar chart to PDF file",
  "stockchartpdf.descrip": "Export stock chart to PDF file",
  "xyscatterchartpdf.descrip": "Export XYScatter chart to PDF file",
  "celltype.descrip": "## CellType\nThe examples in this folder demonstrate how to create cell types. Following cell types are supported:\n- Button cell type\n- Checkbox cell type\n- Combobox cell type\n- Hyperlink cell type",
  "celltype.name": "Cell type",
  "addbuttoncelltype.descrip": "This sample demonstrates how to create the button cell type for a cell.",
  "addbuttoncelltype.name": "Button cell type",
  "addcheckboxcelltype.descrip": "This sample demonstrates how to create the checkbox cell type for a cell.",
  "addcheckboxcelltype.name": "Checkbox cell type",
  "addcomboboxcelltype.descrip": "This sample demonstrates how to create the combobox cell type for a cell.",
  "addcomboboxcelltype.name": "Combobox cell type",
  "addhyperlinkcelltype.descrip": "This sample demonstrates how to create the hyperlink cell type for a cell.",
  "addhyperlinkcelltype.name": "Hyperlink cell type",
  "addrowcolumncelltype.descrip": "This sample demonstrates how to create the cell type for row/column.",
  "addrowcolumncelltype.name": "Set cell type for row/column",
  "addsheetcelltype.descrip": "This sample demonstrates how to create the cell type for the whole worksheet.",
  "addsheetcelltype.name": "Set cell type for the sheet",
  "dependents.descrip": "This sample demonstrates how to get the dependents of a cell.",
  "dependents.name": "Get the direct dependents",
  "precedents.descrip": "This sample demonstrates how to get the precedents of a cell.",
  "precedents.name": "Get the direct precedents",
  "precedentsanddependents.descrip": "",
  "precedentsanddependents.name": "Get precedents & dependents",
  "getallprecedents.descrip": "Get all the precedents with a loop.",
  "getallprecedents.name": "Get all the precedents",
  "valuefilter.descrip": "Create value filter",
  "rootexample.descrip": "GrapeCity Documents for Excel Features",
  "axes.descrip": "## Axis\nCharts contain three axis types: \n- category axis\n- value axis\n- series axis\n\nThey are all generated automatically, and you **can not add or delete them in code**.\n\nExamples in the Axis folder demonstrate how to specify axis-related settings such as:\n- axis titles\n- axis units\n- display unit labels\n- gridlines\n- tick marks\n- tick mark labels",
  "charts.descrip": "## Charts\n**GrapeCity Documents for Excel** provides a comprehensive charting API:\n\n- Add charts to a worksheet using the **IWorksheet.AddChart** method\n-- Returns an instance of **IShape** \n-- Use the **Chart** property to access the newly added chart\n- Add data series with the **IChart.SeriesCollection.Add** method\n- Cutomize chart titles with the **IChart.ChartTitle** property\n- Cutomize chart legends with the **IChart.Legend** property\n- Access and customize each data series through the **ISeries** interface\n- Customize each data point in a data series using the **IPoint** interface\n- Add, remove, or customize each data label in a series using the **IDataLabel** interface\n- Access and customize a group of series through the **IChartGroup** interface\n- Access and customize value axes, category axes, and series axes using the **IAxis** interface\n\nOver and above the basic usage of each chart feature, you can change the **ISeries.ChartType** to create combination charts. You can even specify whether to plot a series on the primary or secondary axis with the **ISeries.AxisGroup** property.\n\nEach series in a chart is associated with a chart group. Typically there is one chart group for each chart type. Multiple chart groups are created automatically when you use combination charts. \n\nThe **IChartGroup** interface provides options that let you customize the appearance of every series in a group. For example, you can set these properties on certain chart types:\n\n- **StartAngle** for pie charts\n- **GapWidth** for bar or column charts\n- **HasHiLoLines** and **HasUpDownBars** shows or hides stock chart options on a line chart\n\nThe **IAxis** interface provides options that let you customize the appearance of chart axes. For example, you can these properties on certain axis types:\n\n- **MinimumScale** and **MaximumScale** for a value axis\n- **TickLabelSpacing** for a category axis\n- **HasMajorGridlines** and **HasMinorGridlines** for a value axis\n\nMany chart objects (chart area, plot area, chart title, legend, series) provide a **Format** property so you can access and modify:\n\n- **fills** solid or gradient \n- **lines** dashed or transparency",
  "series.descrip": "## Series\n**Series** is the most frequently used feature in charts. Each chart contains one or more data series, and each series consists of a group of data points. \n\nThese examples demonstrate how to add a series to a chart, and how to specify settings for each series, such as:\n\n- **BubbleScale** and **SizeRepresents** for bubble charts\n- Configure **Series** format\n- Change **Series Type**\n- Add **Secondary Axis**\n- **VaryByCategories** colors for single-series column charts",
  "comments.descrip": "## Comments\nGrapeCity Documents for Excel enables users to annotate worksheets. They can write comments for cells to add information about the data it contains.\n\nAdd comments for a range using the **AddComment** method. It returns an instance of the **IComment** interface. \n\nAlways show comments with the **Visible** property. \n\nModify comment layouts with the **Shape** property.\n\nCreate rich text using the **TextFrame** property of the **IShape** interface. You can use different font styles for each run.",
  "conditionalformatting.descrip": "## Conditional Formatting\nIn order to enable you to highlight important information in rows or columns of a worksheet, GrapeCity Documents for Excel allows users to create conditional formatting rules for individual cells or a range of cells based on cell values. If the format condition matches with the cell value, it is assumed as true and the cell is formatted as per the specified rule..\n\nGrapeCity Documents for Excel supports all types of conditional formatting rules:\n\n- Cell Value\n- Average\n- Color Scale\n- Data Bar\n- Icon Sets\n- Top Bottom \n- Unique\n- Expression\n\nApply conditional formatting rules to a range using the **Add** method of **IRange.FormatConditions**. You can also use other specific Add methods:\n\n- AddAboveAverage\n- AddColorScale\n- AddDatabar\n- AddIconSetCondition\n- AddTop10\n- AddUniqueValues\n\nAll of the Add functions return an instance of the **IFormatCondition** interface, or an interface specific to another Add method, such as **IAboveAverage**.",
  "datavalidation.descrip": "## Data Validation\nGrapeCity Documents for Excel lets you validate data by restricting the information format and the values that can be entered in cells of a worksheet. You can create distinct validation scenarios for individual cells or for a range of cells.\n\nGrapeCity Documents for Excel supports all types of validations, including:\n- Whole Number\n- Decimal\n- List\n- Date\n- Time\n- Text length\n- Custom\n\nAdd validation for a range using the **Add** method of  **IRange.Validation** property. The method returns an instance of the **IValidation** interface. \n- To set input and error messages for the validation, use these properties:\n  - InputMessage \n  - ErrorMessage \n- To specify whether to show the messages, use these properties:\n  - ShowInputMessage \n  - ShowError\n- To specify whether to show a drop down list in a list validation, use InCellDropdown property",
  "filtering.descrip": "## Filtering\nGrapeCity Documents for Excel supports all types of filters, including: \n- Number Filter\n- Text Filter\n- Date Filter\n- Color Filter\n- Icon Filter\n\nFilter a range using the range's **AutoFilter** method. If you want to apply the filter to multiple columns, you can invoke the AutoFilter method several times.\n\nTo re-apply filter conditions when the range's value changes, use the **ApplyFilter** method of the worksheet's **AutoFilter** instance.",
  "filteringbycolor.descrip": "## Filter by color\nThe examples in this folder demonstrate how to use the AutoFilter method to create a color filter. You can filter by:\n- font color\n- interior color\n- automatic font color\n- no fill",
  "filteringbyicon.descrip": "## Filter by icon\nThe examples in this folder demonstrate how to use the AutoFilter method to filter by icon.  You can set the **AutoFilterOperator** parameter to: \n\n- **Icon** and filter by the specified icon\n- **NoIcon** and filter by rows with no icon\n\nBefore you can apply an icon filter, you must first create an **IIconSetCondition** instance and an **IFormatCondition** instance for the Range.",
  "textfiltering.descrip": "## Text Filter\nThe example in this folder demonstrates how to use the AutoFilter method to create a text filter. For example, you can filter by rows that contain the letter \"e\".",
  "alignment.descrip": "## Alignment\nThe examples in this folder demonstrate how to use these alignment settings:\n- HorizontalAlignment (Left, Center, or Right)\n- VerticalAlignment (Top, Center, or Bottom)\n- ReadingOrder (sets text direction to RightToLeft or LeftToRight)\n- ShrinkToFit \n- Orientation (sets the text rotation angle in degrees)\n- Wrap Text ",
  "borders.descrip": "## Borders\nThe examples in this folder demonstrate how to specify border settings for a range. You can set these border options:\n- BorderLineStyle (Dashed, DashDot, Dotted, Double, Medium, Hair, etc.)\n- Color (Green, Red, Blue, Tomato, LimeGreen, etc.)",
  "datefiltering.descrip": "## Date Filter\nThe examples in this folder demonstrate how to use the AutoFilter method to filter by date. They show how you can filter:\n- between two dates\n- all dates in February",
  "fill.descrip": "## Fill\nThe examples in this folder demonstrate how to apply several kinds of fill to a range.\n- Solid fill\n- Pattern fill\n- Linear gradient fill\n- Rectangular gradient fill",
  "fonts.descrip": "## Fonts\nThe examples in this folder demonstrate how to apply font settings to a range:\n- Font color\n- Font size\n- Font name\n- Bold, Italic\n- Underline\n- Strikethrough, Superscript, Subscript",
  "formatting.descrip": "## Formatting\nGrapeCity Documents for Excel provides a lot of properties to customize the appearance of a range:\n\n- **IRange.NumberFormat** sets the number format\n- **IRange.HorizontalAlignment**,  **IRange.VerticalAlignment**, **IRange.IndentLevel**, etc. set the alignment\n- **IRange.Font** sets the font\n- **IRange.Borders** sets the border\n- **IRange.Interior** sets solid fill, pattern fill, and gradient fill\n- **IRange.Locked** and **IRange.FormulaHidden** sets up protection\n\nYou can also create custom styles or use the built-in named styles, and apply named styles to one or more ranges.",
  "formulas.descrip": "## Formulas\nGrapeCity Documents for Excel lets you create and use formulas. These are expressions that let you calculate the value of a cell quickly and accurately. You can also use built-in functions and operators to generate formulas and calculate values in cells.\n\nThe calc engine handles many calculations, for example:\n- Hundreds of built-in Excel functions\n- Array formulas\n- Dirty and Calculate methods\n- Table formula",
  "grouping.descrip": "## Grouping\nSpreadsheets with tons of data can be a headache to read. You can spend a lot of time and effort trying to visualize, manage, and analyze the information that is relevant to you.\n\nGrapeCity Documents for Excel lets you summarize large amounts of information in groups so that complex spreadsheets are easier to navigate. After rows of data in a spreadsheet are grouped, users can expand and collapse details with the click of a button in the group header row. You can use the following methods and properties to customize your groupings:\n\n- The **Group** method of the range increases the outline level of specific rows\n- The **Ungroup** method of the range decreases the outline level of specific rows\n- The **ShowDetail** Boolean property expands or collapses a group\n- The **ShowLevels** method of the worksheet's Outline instance expands specific level groups",
  "numberformat.descrip": "## Number Format\nThe Number Format examples demonstrate how to apply a number format to a range. GrapeCity Documents for Excel uses Excel-style number formats.",
  "protection.descrip": "## Protection \nThe Protection examples demonstrate how to apply security settings to a range, for example:\n- The **FormulaHidden** property keeps formulas in a range from appearing in exported .xlsx files.\n- The **Locked** property protects cells in a range from being modified",
  "hyperlinks.descrip": "## Hyperlinks\nApply hyperlinks to a range using the **Add** method of a worksheet or range's **Hyperlinks** instance. GrapeCity Documents for Excel supports the following types of hyperlink:\n- Link to a web page\n- Link to a specific range in the current document\n- Link to an external file\n- Link to an email address",
  "picture.descrip": "## Picture\nGrapeCity Documents for Excel allows you to add a picture to a worksheet.\n\nTo add a picture to a worksheet, use the **AddPicture** method of the worksheet's **Shapes** collection.",
  "pivottable.descrip": "## Pivot Table\nA Pivot Table is a data summarization tool. It can automatically count, total, or average the data stored in a spreadsheet, and display the resulting summarized data in a second table.\n\nCreate a pivot cache using the **Create** method of the workbook's **PivotCaches** collection. It returns an instance of the **IPivotCache** interface. \n\nCreate a Pivot Table using the **CreatePivotTable** method of the pivot cache instance. Or you can opt to use the **Add** method of the worksheet's **PivotTables** collection.\n\nUse the **PivotFieldOrientation** property of each pivot field to specify whether it is a RowField, ColumnField, ValueField, or PageField.",
  "rangeoperations.descrip": "## Range Operations\nA range is a cell or a cluster of cells in a spreadsheet that can be used to execute important operations on cells, rows or columns with the help of **Range** property of the **IWorksheet** interface.",
  "shape.descrip": "## Shape\nGrapeCity Documents for Excel lets you embed drawing objects like shapes and pictures in the cells of a worksheet. You can insert arrows, lines, charts, slicers, pictures, and general shapes.\n\nTo create a shape for a worksheet, use the **AddShape** method of the worksheet's Shapes collection. Then you can configure the Shape instance using properties like these:\n\n- Configure a shape's fill style using the **Fill** property \n- Configure a shape's line style using the **Line** property\n- Configure a shape's 3D format using the **ThreeD** property \n- Configure a shape's rich text using the **TextFrame** property",
  "slicer.descrip": "## Slicer\nSlicers are visual filters that you can use to filter a table or Pivot Table.\n\nUse the **Add** method of a workbook's **SlicerCaches** collection to create a slicer cache. It returns an instance of a slicer cache. \n\nUse the **Add** method of the slicer cashe's **Slicers** collection to create a slicer.\n\nIt supports both built-in and custom slicer styles.",
  "sorting.descrip": "## Sorting\nGrapeCity Documents for Excel supports all types of sorting, including:\n- Sort by value\n- Sort by font color\n- Sort by interior\n- Sort by icon\n- Sort by custom list",
  "sparklines.descrip": "## Sparklines\nGrapeCity Documents for Excel allows you to highlight specific information and see how it varies over time using Sparklines. Sparklines are small, lightweight charts that are drawn inside cells to quickly visualize data for improved analysis.\n\nUse the **Add** method of a range's **SparklineGroups** collection to create a group of new sparklines. Sparklines only exist inside of a sparkline group. There is no way to create a sparkline outside of a sparkline group.\n\nWe support the following types of sparklines:\n- Line\n- Column\n- Win/Loss",
  "spreadsheetsviewer.descrip": "## Spread.Sheets Viewer\nExamples in this folder demonstrate how to use **GrapeCity Documents for Excel** and **Spread.Sheets**, another Spread product that is included in SpreadJS. GrapeCity Documents for Excel works on the server side to import and export Excel template files. Spread.Sheets works in the browser (client side) as a viewer or editor.\n\nTo learn more about **Spread.Sheets**, visit the [Spread.Sheets Home Page](https://www.grapecity.com/en/spreadsheets).\n\nAll examples in this folder work as below steps:\n- Open an Excel file with **GrapeCity Documents for Excel** existing on server.\n- Export the whole workbook to a JSON string by calling **Workbook.ToJson**, then transfer the JSON string to client side.\n- At client side, **Spread.Sheets** control will **FromJson** to let you view the result of the excel file on server.\n\nClick the **\"Template\"** button to download and view the excel file.\n\nIn the demo page, you can edit the content in the Spread.Sheets control, then click the **\"Export\"** button to get the changed Excel file. The \"Export\" button works by following steps:\n- Spread.Sheets uses **ToJson** to get a JSON string which contains the latest changes, and post the string to server.\n- GrapeCity Documents for Excel at server uses **FromJson** with the JSON string, and then calls **Workbook.Save** to save everything to an excel file.\n- Finally, you can download the changed Excel file.",
  "tables.descrip": "## Tables\nTo more easily manage and analyze data in spreadsheet, you can create table for a range. A table consists of rows and columns that you can format and manage independently in a worksheet. You will learn how to:\n\n- Add or remove a table in a worksheet\n- Apply filtering to a table column\n- Apply sorting to a table column\n- Apply either built-in or custom table styles\n- Access each range of a table\n- Add or remove a table column\n- Perform calculations for a specific table range",
  "theme.descrip": "## Theme\nGrapeCity Documents for Excel provides you with a set of built-in themes so you can quickly change the overall appearance of a workbook. It also lets you create custom themes and apply them to workbooks.\n\n- Use the **Theme** property of a workbook instance to change the workbook's theme. \n- Use the **Add** method of a themes class instance to add a custom theme. \n- Use the built-in properties of the **Themes** class to get a built-in theme instance.\n- Use the **Themes** indexer to get a custom theme instance.",
  "workbook.descrip": "## Workbook\nA workbook is a spreadsheet document that contains one or more worksheets that are stored within the Worksheets collection.\n\nThe examples in this folder demonstrate the following cases:\n- Create  a new workbook\n- Import an Excel file into a workbook\n- Import an Excel file with a password to a workbook\n- Export a workbook to an Excel file\n- Export a workbook to an Excel file with a password\n- Import or export a workbook using ToJson and FromJson",
  "worksheets.descrip": "## Worksheets\nThe examples in this folder demonstrate the following cases:\n- Add a worksheet\n- Delete a worksheet\n- Protect a worksheet\n- Unprotect a worksheet\n- Activate a worksheet\n- Apply settings to a worksheet",
  "excelreporting.descrip": "## Excel Reporting\nIn this folder, you can explore complete code demonstrating how to generate an Excel file or report at server side. \n\nClick the **\"Run\"** button to perform the following actions on the server:\n- Create an empty workbook\n- Execute all of code in the code window\n- Save to an Excel file\n\nThen you can view the results by downloading the Excel file.",
  "exceltemplates.descrip": "## Excel Templates\nIn some scenarios, you may have your own Excel templates and just want to open and update some of the contents at server side. You can use the extensive GrapeCity Documents for Excel API to open an existing Excel file and then change some of its values, customize its formatting, and whatever else you need to do.\n- Click the **Template** button to download and view the original Excel template\n- Click the **Run** button to run the code and get the changed Excel file",
  "features.descrip": "## Features\nGrapeCity Documents for Excel provides some remarkable features that empower developers to create spreadsheets with:\n- High-performance attributes\n- Custom themes\n- Configurable components\n- Summarized data\n- Custom styles\n- Embedded drawing objects\n- Integrated calculation engine\n- And much more...\n\nYou can explore a lot of example code in the Features section that shows you how to use each feature in GrapeCity Documents for Excel.\n\nClick the **\"Run\"** button to perform the following actions on the server:\n- Create an empty workbook\n- Execute all of the code in the code window\n- Save to an Excel file\n\nThen you can view the results by downloading the Excel file.\n\n**NOTE**: In this demo, Spread.Sheets is in read-only mode. Don't be alarmed if some features are not interactive. Download the fully functional  Excel file to interact with the features.",
  "numberfiltering.descrip": "## Number Filter\nThe examples in this folder demonstrates how to use number filtering for range.",
  "chartarea.descrip": "## Chart area\nChart area is the complete chart area, include plot area, chart title and legend.\n\nThese examples demonstrate how to configure chart area style and whole chart area font style.",
  "chartlines.descrip": "## Chart lines\nChart lines include: **Trendline**, **Dropline** , **High-Low Line** and **Series Line**.\n\n- **Trendline** is for specific series.\n- **Dropline** set for line chart or area chart.\n- **High-Low line** set for line chart.\n- **Series line** set for stacked column or bar charts. Pie-of-pie charts and bar-of-pie charts also have connector lines between their sections\n\nThese examples demonstrate how to add these lines and how to configure lines style.",
  "charttitle.descrip": "## Chart title\n**Chart title** is the name of the chart.\n\nThese examples demonstrate how to display chart name  and how to specify settings for chart title.",
  "chartwalls.descrip": "**Chart walls** include **back wall** and **side wall**.\n\nThese examaple demonstrete how to specity settings for chart walls, include:\n- Configure walls style together\n- Configure back wall and side wall separately",
  "datalabel.descrip": "## Data label\n**Data labels** can display specified series information. Use ShowLegendKey, ShowPercentage, ShowValue, ShowSeriesName, .etc to configure data label layout. These examples demonstrate how to display data labels and specify settings for data labels.",
  "datapoint.descrip": "## Data point\n**Data points** are a collection of all points in a specific series. These examples demonstrate how to specify settings for data points.",
  "legend.descrip": "## Legend\nThese examples demonstrate how to configure the style and position of chart **legends**.",
  "plotarea.descrip": "## Plot area\nThese examples demonstrate how to specify settings for **plot area**.",
  "chartgallery.descrip": "## Chart gallery\nThis chart gallery includes all of the **chart types** available and demonstrates how to configure each chart.",
  "chart3dformat.descrip": "## Chart 3D format\nThese examples in this folder demonstrate how to set charts 3D format",
  "markers.descrip": "## Markers\nThese examples demonstrate how to set style and format for **markers**.",
  "pagesetup.descrip": "## Page Setup\nGrapeCity Documents for Excel supports page setup. The **PageSetup** object contains all page setup attributes (left margin, bottom margin, paper size, and so on) as properties.",
  "pdfexporting.descrip": "## PDF Exporting\nIn this folder, you can explore complete code demonstrating how to export an pdf file at server side. \n\nClick the **\"Save as PDF\"** button to perform the following actions on the server:\n- Create an empty workbook\n- Execute all of code in the code window\n- Save to an pdf file\n\nThen you can view the pdf in your browser.",
  "pdfpagesetup.descrip": "## Page setup\nGrapeCity Documents for Excel allows users to paginate each worksheet using the properties of the IPageSetup interface.\n\nYou can customize the page size, print area, print title rows, print title columns; specify horizontal page breaks, vertical page breaks, the maximum number of pages for horizontal and vertical pagination etc. along with zoom and scale factors as per your preferences while exporting a spreadsheet to a PDF file.",
  "text.descrip": "## Export text\nVarious of text effect can be exported to pdf file, such as:\n- Text with Excel number formatter\n- Overflow text\n- Font effects: text alignment, wordwrap, text indent, shrink to fit, underline, strikethrough .etc",
  "customfunctions.descrip": "## Custom Function\nGcExcel provides you with the ability to create your own custom functions, allowing you to easily create any custom arithmetic logic you may need.",
  "cellrichtext.descrip": "## Cell Rich Text\nGcExcel provides support for applying rich text formatting in the cells of the worksheet. \nExamples in this folder demonstrate how to:\n- Use IRange.IRichText interface to add and format text runs in a cell.\n- Use IRange.Characters() method to format a range of characters in a cell.\n- Configure font for each text run of rich text cell.",
  "printmanager.descrip": "## PrintManager\nGcExcel introduces PrintManager class to control pagination and spreadsheet content while exporting the spreadsheets to PDF. The feature can help control printing of specific parts of Excel to PDF documents, providing the users specific API that gets the pagination result in the PageInfo object - a list of pages generated from the excel file through PrintManager.Paginate method, and then perform operations like :\n\n- Add/delete/modify pages.\n- Change page number, page count, page content and page settings.",
  "exportshape.descrip": "## Export shape\nGrapeCity Documents for Excel supports exporting shapes to PDF file.\n\n- Export basic/custom shapes.\n- Export shapes with text.\n- Export shapes with different fill.\n- Export grouped shapes.",
  "findandreplace.descrip": "## Find and Replace\nThe examples in this folder demonstrate the following cases:\n- Find in a Range\n- Replace in a Range",
  "accesscellsrowscolumns.descrip": "This sample demonstrates how to access the Cells/Rows/Columns/EntireRow/EntireColumn object in a sheet range.",
  "accesseachareaofrange.descrip": "This sample demonstrates how to acess each area in a range when the range contains multiple areas.",
  "accessrange.descrip": "Range refers to an array of cells defined in a spreadsheet. GcExcel allows users to define a range and then access the rows and columns within the range to perform certain tasks like formatting of cells, merging of cells, insertion or deletion of cells along with other useful operations.",
  "cellinfo.descrip": "CellInfo class can help users to convert a cell address to its row/column coordinates, column name to index, and row name to index.",
  "copypasteoptions.descrip": "Users can choose from several paste options while copying the data from the cell range. Users can also combine the two different paste options. For instance - if users want to paste values and number formats concurrently in the worksheet, then they can use combinations like :  PasteType.Values | PasteType.NumberFormats , PasteType.Formulas | PasteType.NumberFormats. Similarly other paste options can also be combined with each other.",
  "cutcopyrange.descrip": "GcExcel provides users with the ability to cut or copy a cell or a range of cells from a specific area and paste it into another area within the same worksheet or in other worksheets. Also, users can choose from multiple paste options and also combine different paste options while copying the data from the cell range.",
  "cutcopyrangebetweenworkbooks.descrip": "Besides cut or copy range within a workbook, GcExcel also has the ability to cut or copy a range between different workbooks.",
  "getfeaturerelatedusedrange.descrip": "Customer can get a used range specific with related features, such as Data, DataValidation, Hyperlink, Sparklin and so on. more details can be referened by UsedRangeType enum.",
  "getworksheetusedrange.descrip": "A used range includes any cell that has ever been used. For example, cell A1 contains a value, cell A2 has a sparkline or hyperlink, then the cell will be treated as used range.",
  "halignvalign.descrip": "You can set different values of horiztonal and vertical alignments for the content in a cell of range.",
  "hiddenrowcolumn.descrip": "You can choose whether to hide or show rows and columns in a worksheet by using the Hidden property of the IRange interface.",
  "insertcellsdeletecells.descrip": "GcExcel enables you to insert and delete a cell or a range of cells in order to help customization of worksheets as per your requirements.",
  "insertdeleterowscolumns.descrip": "GcExcel provides you with the ability to insert or delete rows and columns in a worksheet.",
  "mergecells.descrip": "GcExcel allow you to merge several cells into a single cell using Merge method of IRange. When a cell range is merged, the data of top left cell stays in the final merged cell, and the data of other cells in the given range is lost.\n\nAlso if all the cells within the given range are empty, the formatting of range's top left cell is applied to the merged cell.",
  "rotatecellcontents.descrip": "You can rotate the content of a cell by setting IRange.Orientation property.",
  "setrangevalue.descrip": "GcExcel allows users to specify custom values for the cell range by using the properties and methods of the IRange interface.",
  "setrowheightcolumnwidth.descrip": "You can use the ColumnWidth property to set custom width in characters for the individual columns of a range. In order to set custom width in pixels, you can use the ColumnWidthInPixel property of the IRange interface.\n\nYou can also set custom height of the individual rows of a range in points and in pixels by using the RowHeight property and RowHeightInPixel property of the IRange interface.\n\nIn order to specify custom total height and total width, you can use the Height (in points), HeightInPixel (in pixels), Width (in characters) and WidthInPixel (in pixels) properties of the IRange interface.",
  "shrinktofit.descrip": "You can make the text of a cell shrink to fit in the availabel column with by setting IRange.ShrinkToFit to true.",
  "textorientation.descrip": "You can set the reading order of text in a cell.",
  "accesstableranges.descrip": "You can get the range of different table parts conveniently by using ITable.HeaderRange, ITable.DataRange and ITable.TotalsRange in GcExcel.",
  "addborderstocell.descrip": "You can set different kinds of border style and color to a cell.",
  "addcustomtablestyle.descrip": "In GcExcel, you can create custom table style elements and apply them to a table.",
  "addingborderstorange.descrip": "You can set different kinds of border style and color to a range.",
  "applystyle.descrip": "You can get a built-in named style from IWorksheet.Styles collection then apply the style to a cell or range.",
  "applytablestyle.descrip": "You can format a table using any of the predefined table styles provided by GcExcel.",
  "changeworksheetfilterrange.descrip": "Refer to the following example code to see how to change the filtering range in a worksheet.",
  "clearfilter.descrip": "Refer to the following example code to see how to clear filtering in a worksheet.",
  "createaveragerule.descrip": "This sample demonstrates how to create an average rule on a range.",
  "createcellvaluerule.descrip": "The cell value rule compares values entered in the cells with the condition specified in the conditional formatting rule. this sample demonstrates how to add a cell value rule.",
  "createcustomstyle.descrip": "You can create a named style, configure it as per your preferences and then apply it to a cell or range.",
  "createdatabbarrule.descrip": "This sample demonstrates how to create a data bar rule on a range.",
  "createdatevalidation.descrip": "You can validate data entered in date format in cells or a range of cells by applying the date validation in a worksheet.",
  "createdecimalvalidation.descrip": "You can validate your data and ensure users add only decimal numbers in cells or a range of cells by applying the decimal validation in a worksheet.",
  "createexpressionrule.descrip": "The expression rule in conditional formatting is used to set the expression rule's formula. This rule can be added using the properties and methods of the IFormatCondition interface.",
  "createiconsetrule.descrip": "The icon sets rule in conditional formatting displays the icons on the basis of values entered in the cells. Each value represents a distinct icon that appears in a cell if it matches the icon sets rule applied on it. This rule can be added using the properties and methods of the IIconSetCondition interface.",
  "createlistvalidation.descrip": "You can also validate lists inserted in cells or a range of cells by applying the list validation in your worksheet .",
  "createmultiruleforrange.descrip": "You can apply multilple conditional formatting to one range, each conditional formatting will take effect by the order of their priorties, you can use StopIfTrue to stop applying subsequent condional formatting.",
  "createstylebasedon.descrip": "With GcExcel, you don't always need to create a custom named style right from the scratch. Instead, you can modify an existing style (via getting the existing style from the Styles collection) as per your specific preferences and save the new style as another workbook style that can be used as and when required.",
  "createtable.descrip": "In GcExcel, you can create tables in spreadsheets using the Add method of the ITables interface, or simply transform a cell range into a table by specifying the existing data lying in a worksheet.",
  "createtextlength.descrip": "You can validate the length of the text entered in cells or a range of cells by applying the text length validation in a worksheet.",
  "createthreecolorscalerule.descrip": "The color scale rule uses a sliding color scale to format cells or a range of cells. For instance, if numeric cell value 1 is represented with color yellow and 50 with green, then 25 would be light green. This rule can be added using the properties and methods of the IColorScale interface.",
  "createtimevalidation.descrip": "You can validate the time entered in cells or a range of cells by applying the time validation in a worksheet.",
  "createtopbottomrule.descrip": "The top bottom rule checks whether the values in the top or bottom of a cell range match with the required values in the cell. In case the values don't match, the data is considered as invalid. This rule can be added using the properties and methods of the ITop10 interface.",
  "createtwocolorscalerule.descrip": "The color scale rule uses a sliding color scale to format cells or a range of cells. For instance, if numeric cell value 1 is represented with color yellow and 50 with green, then 25 would be light green. This rule can be added using the properties and methods of the IColorScale interface.",
  "createuniquerule.descrip": "The unique rule in conditional formatting is applied to check whether the value entered in a cell is a unique value in that particular range. This is possible only when the duplication option is set to false. To check for the duplicate values, the duplicate rule is applied separately.",
  "createwholenumbervalidation.descrip": "You can validate your data and ensure users add only whole numbers in cells or a range of cells by applying the whole number validation in a worksheet.",
  "customnumberformat.descrip": "This sample demonstrates how to set a custom number format to a cell.",
  "dateandtimeformat.descrip": "This sample demonstrates how to set a kind of date/time format to a cell.",
  "datedynamicfilter.descrip": "Refer to the following example code to see how dynamic date filters can be applied to display results that match the specified date criteria taking into account the current system date that automatically gets updated everyday.",
  "datefilter.descrip": "Refer to the following example code to see how date filters can be applied to a range to display only those results that are falling within the specified dates.",
  "deleteconditionalformatrules.descrip": "If you want to delete the formatting rule applied to the cell range in a worksheet, you can do it by using the Delete method of IFormatCondition interface",
  "deletevalidation.descrip": "You can delete the applied validation rule using the Delete method of the IValidation interface.",
  "filterbyautomaticfontcolor.descrip": "Refer to the following example code to see how you can apply filters by cell automatic font color on a column to display results containing cells with automatic font color.",
  "filterbycellcolor.descrip": "Refer to the following example code to see how you can apply filters by cell colors on a column to display results containing cells with distinct fill shades.",
  "filterbyfontcolor.descrip": "Refer to the following example code to see how you can apply filters by font color on a column to display results containing cells with specific font color.",
  "filterbyicon.descrip": "Refer to the following example code to see how you can apply filters by icon to display results that contain a specific icon in the cells.",
  "filterbynofill.descrip": "Refer to the following example code to see how you can apply filters by no fill on a column to display results containing cells with no fill color.",
  "filterbynoicon.descrip": "Refer to the following example code to see how you can apply filters by no icon to display results where cells do not possess an icon.",
  "fontcolor.descrip": "This sample demonstrates how to set font color of a cell.",
  "fonteffect.descrip": "This sample demonstrates how to set various kinds of font effect of a cell.",
  "fontname.descrip": "This sample deonstrates how to set font name and theme font name of a cell.",
  "fontsize.descrip": "This sample demonstrates how to set font size of a cell.",
  "fontstyle.descrip": "This sample demonstrates how to set font bold and italic of a cell.",
  "fontunderline.descrip": "This sample demonstrates how to set different kinds of underline of a cell.",
  "getdisplayformat.descrip": "You can get the displaying style of a cell by using IRange.DisplayFormat property, the displaying style of a cell may come from its tyle, table style if the cell is in a table, conditional format if the cell match criterion and so on.",
  "insertdeletetablerowcolumns.descrip": "This sample demonstrates how to add and delete columns and rows in a table.",
  "lineargradientfill.descrip": "This sample demonstrates how to set a linear gradient fill to a cell.",
  "modifyvalidation.descrip": "You can change the validation rule for a range by setting properties of the IValidation interface (Type property, Formula1 property, Formula2 property, and many more).",
  "multiselectfilter.descrip": "Refer to the following example code to see how multi select filters can be applied to quickly filter data based on cell values with multiple selections.",
  "numberfilter.descrip": "Refer to the following example code to see how you can apply number filters to display data that meets the specified criteria applied on a column containing numeric cell values.",
  "numberformats.descrip": "GcExcel supports all kinds of Excel like number formats.",
  "patternfill.descrip": "This sample demonstrates how to set a pattern fill to a cell.",
  "performcalculationsintable.descrip": "You can show the total row of a table and set type of TotalsCalculation for a specific table column.",
  "reapplyfilter.descrip": "Refer to the following example code to see how to re-apply the filter after cell changed.",
  "rectangulargradientfill.descrip": "This sample demonstrates how to set a rectangular gradient fill to a cell.",
  "removetable.descrip": "In GcExcel, you can delete tables in spreadsheets using the Delete Method of the ITable Interface.",
  "setrangeformulahidden.descrip": "When the IRange.FormulaHidden is true, the formula will not display in the exported Excel file.",
  "setrangelocked.descrip": "IRange.Locked determines whether the cell can be modified in exported Excel when the sheet is protected.",
  "solidfill.descrip": "This sample demonstrates how to set a solid fill to a cell.",
  "tablefilter.descrip": "When you have a lot of data to handle, you can create as many tables on a spreadsheet as you want and apply separate filters on columns of each of the table to manage information in an effective manner.",
  "tablesort.descrip": "GcExcel provides an option to apply sorting on a specific table in the worksheet. To accomplish this, you can use the Sort property of the ITable interface. The Apply method is used to apply the selected sort state and display the results.",
  "textfilter.descrip": "Refer to the following example code to see how text filters are applied to display rows with cell values that either match to the specified text or regular expression value in the column on which the filter is applied.",
  "wraptext.descrip": "You can wrap the text of cell by using IRange.WrapText property.",
  "myaddfunction.descrip": "This sample demonstrates how to implement a custom function add numbers.",
  "myconcatenatefunction.descrip": "This sample demonstrates how to implement a custom function to concatenate text of each cell.",
  "myconditionalsumfunction.descrip": "This sample demonstrates how to implement a custom function to only sum value of cells which are red fill.",
  "myiserrorfunction.descrip": "This sample demonstrates how to implement a custom function to determin if the cell is a calc error.",
  "myismergedrangefunction.descrip": "This sample demonstrates how to implement a custom function to determin if the cell is merged.",
  "mysumfunction.descrip": "This sample demonstrates how to implement your own sum function.",
  "areachart.descrip": "Refer to the following example code to see how to add an area chart in GcExcel.",
  "areastacked100.descrip": "Refer to the following example code to see how to add an 100% stacked area chart in GcExcel.",
  "areastackedchart.descrip": "Refer to the following example code to see how to add an stacked area chart in GcExcel.",
  "configaxistitle.descrip": "Refer to the following example code to see how to show and customize the axis title, you can change  the title text, font size, font color, etc.",
  "configcategoryaxesformat.descrip": "Refer to the following example code to see how to configure the format of category axis, such as to customize the line style, line color, fill color, etc.",
  "configcategoryaxisunits.descrip": "Refer to the following example code to see how to configure date axis, such as axis' maximum/minimum scale, major/minor unit, etc.",
  "configchart3dformat.descrip": "Refer to the following example code to see how to configure three-D properties of a chart.",
  "configchartareafont.descrip": "Refer to the following example code to see how to configure font of chart area.",
  "configchartareaformat.descrip": "Refer to the following example code to see how to configure formats of chart eara.",
  "configchartbackwall.descrip": "Refer to the following example code to see how to configure the back wall of a three-D chart.",
  "configchartfloorstyle.descrip": "Refer to the following example code to see how to configure the floor of a three-D chart.",
  "configchartsidewall.descrip": "Refer to the following example code to see how to configure the side wall of a three-D chart.",
  "configchartwallstyle.descrip": "Refer to the following example code to see how to configure all walls of a three-D chart.",
  "configdisplayunitlabel.descrip": "Refer to the following example code to see how to show and configure display unit label of a axis, such as the fill and border of label, as well as common font settings.",
  "configgridlines.descrip": "Refer to the following example code to see how to configure gridlines, you can show or hide the major and minor gridlines of each axis, you can also configure different properties of gridlines, such as line style, color and weight, etc.",
  "configtickmarklabel.descrip": "Refer to the following example code to see how to configure the tick labels of axis, you can  customize the fill and border of taick labels, can also set different font properties, such as font size, font name, font style, etc. ",
  "configvalueaxesformat.descrip": "Refer to the following example code to see how to configure the format of value axis, such as to customize the line style, line color, fill color, etc.",
  "configvalueaxisunits.descrip": "Refer to the following example code to see how to configure value axis, such as axis' maximum/minimum scale, major/minor unit, etc.",
  "createcustomvalidation.descrip": "You can add a custom validation rule to validate data in a worksheet by applying custom validation.",
  "findbasicusage.descrip": "Refer to the following example code to see how to find the first occurence of some text in a range.",
  "finddisplayformat.descrip": "Refer to the following example code to see how to find a cell by specific format.",
  "findlookatsearchorderdirectionmatchcase.descrip": "Refer to the following example code to see how to find cell with options.",
  "findmatchbyte.descrip": "Refer to the following example code to see how to find double-byte characters in a range.",
  "findwithafter.descrip": "Refer to the following example code to see how to find all occurrences of matched cells in a range.",
  "findwithlookin.descrip": "Refer to the following example code to see how to find cells in different places.",
  "replacebasicusage.descrip": "Refer to the following example code to see how to replace cell's content in a range.",
  "replacecustomwrapsearch.descrip": "Refer to the following example code to see how to looply search cells in a range.",
  "replacewithoptions.descrip": "Refer to the following example code to see how to replace cell's content with options.",
  "setaxisscaletype.descrip": "Refer to the following example code to see how to use logarithmic scale for a value axis. ",
  "setaxistickmark.descrip": "Refer to the following example code to see how to configure tick mark of axis.",
  "addcomment.descrip": "Refer to the following example code to see how to add a comment for a cell.",
  "addseries.descrip": "Refer to the following example code to see how to add a series in a chart.",
  "addtextrun.descrip": "Refer to the following example code to see how to create cell rich text by adding and configuring runs.",
  "barclusteredchart.descrip": "Refer to the following example code to see how to add a clustered bar chart in GcExcel.",
  "barstacked100chart.descrip": "Refer to the following example code to see how to add a 100% stacked bar chart in GcExcel.",
  "barstackedchart.descrip": "Refer to the following example code to see how to add a stacked bar chart in GcExcel.",
  "bubblechart.descrip": "Refer to the following example code to see how to add a bubble chart in GcExcel.",
  "changeseriestype.descrip": "Refer to the following example code to see how to change chart type of a data series.",
  "charactercelltext.descrip": "Refer to the following example code to see how to create cell rich text by Characters() method.",
  "chartcopy.descrip": "Refer to the following example code to see how to copy a chart.",
  "chartcut.descrip": "Refer to the following example code to see how to cut a chart.",
  "chartduplicate.descrip": "Refer to the following example code to see how to duplicate a chart.",
  "chartjustplotvisiblecell.descrip": "Refer to the following example code to see how to plot visible cells in plot area of a chart.",
  "clearcomment.descrip": "Refer to the following example code to see how to delete and clear comments.",
  "columnclusteredchart.descrip": "Refer to the following example code to see how to add a clustered column chart in GcExcel.",
  "columnstacked100chart.descrip": "Refer to the following example code to see how to add a 100% stacked column chart in GcExcel.",
  "columnstackedchart.descrip": "Refer to the following example code to see how to add a stacked column chart in GcExcel.",
  "combinationchart1.descrip": "Refer to the following example code to see how to add a combination chart(column and line markers) in GcExcel.",
  "combinationchart2.descrip": "Refer to the following example code to see how to add a combination chart(column stacked and area) in GcExcel.",
  "configbubblechartlayout.descrip": "Refer to the following example code to see how to customize bubble chart(BubbleScale, SizeRepresents, ShowNegativeBubbles).",
  "configcharttitlerichtext.descrip": "Refer to the following example code to see how to configure chart title with rich text format.",
  "configcharttitlestyle.descrip": "Refer to the following example code to see how to configure different formats(fill, border, font, etc) of a chart title.",
  "configcommentlayout.descrip": "Refer to the following example code to see how to format and customize a comment.",
  "configdatalabelformat.descrip": "Refer to the following example code to see how to show and customize data labels of a chart.",
  "configdatalabeltext.descrip": "Refer to the following example code to see how to configure the displaying content of data labels in chart.",
  "configdatapointformat.descrip": "Refer to the following example code to see how to format a data point of a series in chart.",
  "configlegendentryfontstyle.descrip": "Refer to the following example code to see how to configure font properties of a legend entry.",
  "configlegendformat.descrip": "Refer to the following example code to see how to format legend of a chart.",
  "configlegendpositionandlayout.descrip": "Refer to the following example code to see how to change the position of legend in a chart.",
  "configmarkersformat.descrip": "Refer to the following example code to see how to format the markers(fill and border) of a series.",
  "configmarkerstyle.descrip": "Refer to the following example code to see how to customize the style and size of markers.",
  "confignegativepoint.descrip": "Refer to the following example code to see how to set the color for negative data points.",
  "configplotareaformat.descrip": "Refer to the following example code to see how to format plot area(fill and border).",
  "configrunfont.descrip": "Refer to the following example code to see how to display superscript effect in a cell.",
  "configsecondarysection.descrip": "Refer to the following example code to see how to configure secondary plot for pie of pie chart.",
  "configseriesformat.descrip": "Refer to the following example code to see how to format a data series.",
  "createchart.descrip": "Refer to the following example code to see how to add a chart in GcExcel.",
  "createconnectorline.descrip": "Refer to the following example code to see how to show and customize connection lines for pie of pie chart.",
  "createdropline.descrip": "Refer to the following example code to see how to show and customize drop lines for line chart.",
  "createhiloline.descrip": "Refer to the following example code to see how to show and customize high-low lines for line chart.",
  "createsecondaryaxis.descrip": "Refer to the following example code to see how to make a data series use secondary axis.",
  "createseriesline.descrip": "Refer to the following example code to see how to show and customize series lines.",
  "createtrendline.descrip": "Refer to the following example code to see how to show and customize trend lines.",
  "createupdownbars.descrip": "Refer to the following example code to see how to show and customize up/down bars for line chart.",
  "deletechart.descrip": "Refer to the following example code to see how to delete a chart in GcExcel.",
  "deleteseries.descrip": "Refer to the following example code to see how to delete a data series from chart.",
  "extendseries.descrip": "Refer to the following example code to see how to extend the reference of each series in chart.",
  "linechart.descrip": "Refer to the following example code to see how to add a line chart in GcExcel.",
  "linemarkerschart.descrip": "Refer to the following example code to see how to add a line chart with markers in GcExcel.",
  "linemarkerstacked100chart.descrip": "Refer to the following example code to see how to add a 100% stacked line with markers chart in GcExcel.",
  "linemarkerstackedchart.descrip": "Refer to the following example code to see how to add a stacked line with markers chart in GcExcel.",
  "linestacked100chart.descrip": "Refer to the following example code to see how to add a 100% stacked line chart in GcExcel.",
  "linestackedchart.descrip": "Refer to the following example code to see how to add a stacked line chart in GcExcel.",
  "piechart.descrip": "Refer to the following example code to see how to add a pie chart in GcExcel.",
  "pie_doughnutchart.descrip": "Refer to the following example code to see how to add a doughnut chart in GcExcel.",
  "setrichtextforcomment.descrip": "Refer to the following example code to see how to create a rich text comment for a cell.",
  "setvarycolorforcolumnchart.descrip": "Refer to the following example code to see how to make each data series render vary colors.",
  "stock_highlowclosestockchart.descrip": "Refer to the following example code to see how to add a high-low-close stock chart in GcExcel.",
  "stock_openhighlowclosestock.descrip": "Refer to the following example code to see how to add a open-high-low-close stock chart in GcExcel.",
  "stock_volumehighlowclosestock.descrip": "Refer to the following example code to see how to add a volume-high-low-close stock chart in GcExcel.",
  "stock_volumeopenhighlowclose.descrip": "Refer to the following example code to see how to add a volume-open-high-low-close stock chart in GcExcel.",
  "xyscatterchart.descrip": "Refer to the following example code to see how to add a scatter chart in GcExcel.",
  "xyscatterlineschart.descrip": "Refer to the following example code to see how to add a scatter chart with straight lines in GcExcel.",
  "xyscattersmooth.descrip": "Refer to the following example code to see how to add a scatter chart with smooth lines in GcExcel.",
  "xyscattersmoothwithmarkers.descrip": "Refer to the following example code to see how to add a scatter chart with smooth lines and markers in GcExcel.",
  "addcustomname.descrip": "Refer to the following example code to add custom names and set formula to a range in a worksheet.",
  "basicshapes.descrip": "GcExcel can export spreadsheets that contain preset shapes, basic shapes, connector arrows , shape with text etc. into a PDF file.",
  "clearoutline.descrip": "You can clear the outline level of the specified rows or columns using the ClearOutline method of the IRange interface",
  "collapsegroup.descrip": "You can collapse a group by setting the ShowDetail property of the IRange interface to boolean false. Refer to the following example code to collapse a group in a worksheet.",
  "configevenpageheaderfooter.descrip": "If you want a different header and footer for all the even pages, you first need to set the OddAndEvenPagesHeaderFooter property to true. When this is done, you can use the properties of the IPageSetup interface in order to configure the even page header and footer.",
  "configfirstpageheaderfooter.descrip": "If you want a different header and footer in your first page, you first need to set the DifferentFirstPageHeaderFooter property of the IPageSetup interface to true. When this is done, you can use the properties of the IPageSetup interface in order to configure the first page header and footer",
  "configfirstpagenumber.descrip": "You can use the FirstPageNumber property of the IPageSetup interface in order to configure the number for your first page as per your choice.",
  "configheaderfooter.descrip": "In GcExcel, you can use the LeftHeader property, LeftFooter property, CenterFooter property, RightHeader property, CenterHeader property, and the RightFooter property of the IPageSetup interface in order to configure header and footer for a page.",
  "configpagecenter.descrip": "You can use the CenterHorizontally property and the CenterVertically property of the IPageSetup interface in order to configure the center of your page according to your preferences.",
  "configpagemargins.descrip": "You can use the TopMargin property, RightMargin property and BottomMargin property of the IPageSetup interface in order to configure margins for a page.",
  "configpageorder.descrip": "You can use the Order property of the IPageSetup interface in order to configure the order of the page as per your choice.",
  "configpageorientation.descrip": "You can use the Orientation property of the IPageSetup interface in order to set the orientation for a page to Portrait or Landscape as per your preferences.",
  "configpaperscaling.descrip": "You can use the IsPercentScale property in order to control how to the spreadsheet is scaled; the FitToPagesTall property and the FitToPagesWide property in order to set its size; and the Zoom property in order to adjust the size of the paper that will be used for printing.You can use the IsPercentScale property in order to control how to the spreadsheet is scaled; the FitToPagesTall property and the FitToPagesWide property in order to set its size; and the Zoom property in order to adjust the size of the paper that will be used for printing.",
  "configpapersize.descrip": "You can use the PaperSize property in order to set the paper size for the paper that will be used for printing.",
  "configprintarea.descrip": "GcExcel supports customized printing by allowing users to select a range of cells in order to configure the desired print area in a worksheet.",
  "configprinttailcolumns.descrip": "You can configure columns in a worksheet in order to repeat them at the right by using the PrintTailColumns property of the IPageSetup interface.",
  "configprinttailrows.descrip": "You can configure rows in a worksheet in order to repeat them at the bottom using the PrintTailRows property of the IPageSetup interface.",
  "configprinttitlecolumns.descrip": "You can configure columns in a worksheet in order to repeat them at the left by using the PrintTitleColumns property.",
  "configprinttitlerows.descrip": "You can configure rows in a worksheet in order to repeat them at the top by using the PrintTitleRows property.",
  "configsheetprintsettings.descrip": "Refer to the following example code to customize the printint settings of a worksheet, such as whether to print grid lines and headings.",
  "configureblackandwhite.descrip": "GcExcel can export spreadsheet of black and white effect to PDF file.",
  "configuredraft.descrip": "GcExcel can export spreadsheet of draft effect to PDF file.",
  "configureheaderfooter.descrip": "The header/footer settings of PageSetup will be applied in the exported PDF file.",
  "configureoritation.descrip": "The orientation setting of PageSetup will be applied in the exported PDF file.",
  "configurepagebreaks.descrip": "The page break settings will be applied in the exported PDF file.",
  "configurepageorder.descrip": "GcExcel will do pagination according to the page order setting of PageSetupand and export pages to PDF file.",
  "configurepagesetup.descrip": "All page setup settings will applied in the exported PDF file.",
  "configurepagination.descrip": "GcExcel will first do pagination and then export each page to PDF file.",
  "configureprintarea.descrip": "GcExcel will only export the specified area to PDF if PageSetup.PrintArea is set.",
  "configureprintpagerange.descrip": "GcExcel will only export the specified pages to PDF if PageSetup.PrintPageRange is set.",
  "configureprinttails.descrip": "The tail rows and columns will be applied in the exported PDF file.",
  "configureprinttitles.descrip": "The title rows and columns will be applied in the exported PDF file.",
  "configurescaling.descrip": "The scale settings will be applied in the exported PDF file.",
  "configworkbookreferencestyle.descrip": "Refer to the following example code to see how reference style can be set in a workbook.",
  "createhyperlinks.descrip": "Refer to the following example code to insert hyperlinks to an external file, to a webpage, to a range within the worksheet and to an email address.",
  "createrangegroup.descrip": "You can apply row/column grouping by using the Group method of the IRange interface and specifying the rows/columns you want to apply grouping on. Refer to the following example code to apply row/column grouping in a worksheet.",
  "custompageinfos.descrip": "Refer to the following example code to see how to customize the page settings of any page and then export to PDF file.",
  "customshape.descrip": "GcExcel can export spreadsheets that contain custom shapes into a PDF file.",
  "deletehyperlinks.descrip": "Refer to the following example code to delete hyperlinks",
  "dirtyandcalculation.descrip": "GcExcel allow users to disable calculation engine, dirty and re-calculate the formula of a specific range.",
  "drawrangeinsideapdf.descrip": "Refer to the following example code to allow users to render Excel ranges inside the PDF file",
  "exportcellrichtext.descrip": "GcExcel can export rich text cell to PDF file.",
  "exportflowchart.descrip": "In this example, GcExcel first opens an Excel file that contains some shapes, then export it to a PDF file.",
  "keeptogether.descrip": "This example code demonstrates how to keep adjacent rows together in one page when exporting to PDF file.",
  "manageheadersondifferentpages.descrip": "Refer to the following example code in order to export different headers on different pages while exporting to a PDF file.",
  "numberformating.descrip": "GcExcel can export cell text with different number format to PDF file.",
  "overflow.descrip": "GcExcel can export the overflow cell to PDF file.",
  "printmultipleworksheetstoonepage.descrip": "Refer to the following example code to allow users to export multiple worksheets to a single page in the PDF file.",
  "printspecificpages.descrip": "Refer to the following example code to export some specific pages to the PDF file.",
  "renderexcelrangesinsideapdf.descrip": "Refer to the following example code to allow users to render Excel ranges inside the PDF file along with some custom textual information at runtime to the specified location on the page.",
  "savemultipleworkbookstopdf.descrip": "GcExcel allows users to save multiple workbooks into a single PDF file.",
  "setshapenottoprint.descrip": "The IsPrintable property of the IShape interface can be used to get or set whether the object will be printed in the PDF document.",
  "shapewithgradientandpatternfill.descrip": "GcExcel can export shapes with gradient or pattern fill to PDF file.",
  "shapewithline.descrip": "GcExcel can export shapes with vary kind of border settings to PDF file.",
  "shapewithpictureortexturefill.descrip": "GcExcel can export shapes with picture or texture fill to PDF file.",
  "shapewithrotation.descrip": "GcExcel can export rotated shapes to PDF file.",
  "shapewithtext.descrip": "GcExcel can export shape with rich text to PDF file.",
  "showspecificlevel.descrip": "You can also choose to display specified levels of row or column groups using the ShowLevels method of the IOutline interface.",
  "textstyle.descrip": "GcExcel can export various kind of font effect to PDF, such as text underline, strikethrough, bold, etc.",
  "ungrouprange.descrip": "Refer to the following example code to ungroup row and column in a worksheet.",
  "usearrayformula.descrip": "Array formula is a formula that can execute multiple calculations on individual cells or a range of cells to display a column or a row of subtotals. Refer to the following example code to set array formula and get entire array.",
  "usetableformula.descrip": "Table formula refers to a formula that is used as a structured reference in the worksheet instead of using it as an explicit cell reference. Refer to the following example code to set table formula in your spreadsheets.",
  "customobject.name": "Custom object",
  "cellstyle.name": "Cell style",
  "dataset.name": "DataSet",
  "datasource.name": "Data source",
  "datatable.name": "DataTable",
  "datatemplate.name": "Data template",
  "inlinetemplate.name": "Inline template",
  "expressiontemplate.name": "Expression template",
  "functiontemplate.name": "Function template",
  "jsonfile.name": "Json file",
  "mergecell.name": "Merge cell",
  "properties.name": "Properties",
  "resultset.name": "ResultSet",
  "setcontext.name": "Set context",
  "setexpansiontype.name": "Set expansion type",
  "setgrouptype.name": "Set group type",
  "setpagebreak.name": "Set pagebreak",
  "setrange.name": "Set range",
  "setsorttype.name": "Set sort type",
  "sheettemplate.name": "Sheet template",
  "style.name": "Style",
  "templatecell.name": "Template cell",
  "templates.name": "Templates",
  "variable.name": "Variable",
  "financialdashboard.name": "Financial dashboard",
  "templatesamples.name": "Template samples",
  "sales.name": "Sales",
  "purchaseorder.name": "Purchase order",
  "shippinganddeliveryorder.name": "Shipping & delivery order",
  "tablixreport.name": "Tablix report",
  "travel.name": "Travel",
  "datasource.descrip": "## Data source\nThe template API can bind Excel templates directly with data from following objects:\n\n- **DataSet/DataTable:** Can handle data source from any type of DB\n- **Custom Object:** These are user defined objects. Can handle data source from Json String/File/XML, etc. That is, any data souce that can be serialized as a custom object.\n- **Variable:** User defined variable in code.\n- **Array/List:** User defined array/list in code.",
  "properties.descrip": "## Properties\nGcExcel use parenthese **(** and **)** to organize all template properties. Property is set in key-value format. Multiple properties are separated using comma.\n\nProperty name and value are case-insensitive. \n\nFor example: (context=A1) is equal to (Context = a1).\n\nProperty name and predefined value support full name and shorthand. \n\nFor example: (E = H) is equal to (expansion = horizontal).\n\nThe template provides lots of properties:\n\n- **C(context):** Cell context\n- **E(expansion):** Expansion type\n- **G(group):** Group type\n- **R(range):** Set a fallback context for the templates in the specified range\n- **S(sort):** Sort type\n- **PB(pagebreak):** Add a pagebreak in report file",
  "style.descrip": "## Style\nThe templates support **cell style** and **merged styles** applied on the cell. The data will grow as per the style applied on the cells.",
  "templatecell.descrip": "## Template cell\nGcExcel uses **{{** and **}}** as markers of template.\n\nBetween these markers, user can use data field, function field, expression field and lots of properties.\n\nThe template supports following kinds of template cells:\n\n- **data template:** a template representing a data field\n- **function template:** a template representing a function\n- **formula template:** a template representing a formula, and will be remained as formula after template processing\n- **expression template:** a template representing an expression\n- **inline template:** inline template for use with text\n- **sheet template:** template in the sheet name\n- **image template:** a template representing an image, and will be shown as image in the generated report",
  "templates.descrip": "## Templates\nGcExcel(GrapeCity Documents for Excel) introduces new templates support with comprehensive syntax and API to bind Excel documents to data and generate Excel reports with advanced layouts.\n\nWith flexible syntax and easy notations for data expansion and formulas, the new template syntax and API will make it easy to define Excel templates and generate Excel reports supporting numerous use cases.\n\nIn this section, you'll learn how to use features of **GcExcel Template**. And also, there are several user samples for you to have a entire vision of templates and reports.\n\nClick the **\"Run\"** button to perform the following actions on the server:\n- Create an empty workbook\n- Execute all of the code in the code window\n- Save to an Excel file\n\nThen you can view the results by downloading the Excel file.\n\n**NOTE**: In this demo, Spread.Sheets is in read-only mode. Don't be alarmed if some features are not interactive. Download the fully functional  Excel file to interact with the features.",
  "templatesamples.descrip": "## Template samples\nThis section showcases some real-world scenarios implemented **GcExcel Templates** to generate full professional Excel Reports.",
  "cellstyle.descrip": "User can directly use Excel's cell style in the template. \n\nThe style will be applied to the cells as the data grows.",
  "customobject.descrip": "User can use **custom object** as the data source of GcExcel Template, and bind its fields and properties as data field in template.",
  "dataset.descrip": "User can use **DataSet** as the data source of GcExcel Template.",
  "datatable.descrip": "User can use **DataTable** as the data source of GcExcel Template.",
  "datatemplate.descrip": "Bind data with a template which consists of a data field of data source.",
  "expressiontemplate.descrip": "Bind data with a template which consists of expression fields.",
  "functiontemplate.descrip": "Bind data with a template which consists of formula functions.",
  "inlinetemplate.descrip": "Bind data with a template which consists of inline fields.",
  "jsonfile.descrip": "User can use a json file as the data source of GcExcel Template. Before this, user should read data from the file and serialize it to a custom object.\nActually, user can use any data which can be serialized to a custom object as the data souce.",
  "resultset.descrip": "User can use instance of **java.sql.ResultSet** from database as the data source of GcExcel Template.",
  "mergecell.descrip": "User can use merge cells in the template. \n\nGcExcel will detect the type of merge cell in template, and generate the expected report.",
  "setcontext.descrip": "User can use **C(context)** property to set a template's context explicitly.",
  "setexpansiontype.descrip": "User can use **E(expansion)** property to set a template's expansion type.",
  "setgrouptype.descrip": "User can use **G(group)** property to set a template's group type.",
  "setpagebreak.descrip": "User can use **PB(pagebreak)** property on a template to insert a page break dynamically for the report.",
  "setrange.descrip": "User can use **R(range)** property to set a range for the current template.\n\nIn the specified range, if a template cell has no default context nor explicit context, it will take the current template as its context.",
  "setsorttype.descrip": "User can use **S(sort)** property to set a template's sort type.",
  "sheettemplate.descrip": "Bind data with a template, that has template field in the name of the worksheet.",
  "variable.descrip": "User can use **variable** defined in code as the data source of GcExcel Template.",
  "changedatafieldsummarizefunction.descrip": "Refer to the following example code to see how to change the consolidation function of Pivot Table data field.",
  "convertexceltopdf.descrip": "Refer to the following code to see how to convert an Excel file to PDF document with GcExcel.",
  "convertrangetoimage.descrip": "Refer to the following example code to see how to convert a spreadsheet range to an image.",
  "convertshapetoimage.descrip": "Refer to the following example code to see how to convert a shape in spreadsheet to an image.",
  "exportsheettoimage.descrip": "Refer to the following example code to see how to convert a worksheet to an image.",
  "exportshapetoimage.descrip": "Refer to the following example code to see how to convert a shape in spreadsheet to an image.",
  "exportrangetoimage.descrip": "Refer to the following example code to see how to convert a range of spreadsheet to an image.",
  "createpicture.descrip": "Refer to the following example code to see how to create a picture object in worksheet.",
  "createpivottable.descrip": "Refer to the following example code to see how to create a povt table in GcExcel.",
  "deletepicture.descrip": "Refer to the following example code to see how to delete a picture object in worksheet.",
  "filteritemsinpivottable.descrip": "Refer to the following example code to see how to hide some row fields in Pivot Table.",
  "modifysubtotalsforpivotfield.descrip": "Refer to the following example code to see how to set different subtotal functions for Pivot Table fields.",
  "picturecopy.descrip": "Refer to the following example code to see how to copy pictures in worksheet.",
  "picturecut.descrip": "Refer to the following example code to see how to cut pictures in worksheet.",
  "pictureduplicate.descrip": "Refer to the following example code to see how to duplicate a picture.",
  "refreshpivottable.descrip": "Refer to the following example code to see how to refresh povit table when some cell value changes.",
  "saveborder.descrip": "GcExcel can export all kinds of Excel borders to PDF.",
  "saveconditionalformatting.descrip": "GcExcel can export a spreadsheet with conditional formats to PDF.",
  "savepicturetopdf.descrip": "GcExcel can export a spreadsheet with pictures to PDF.",
  "savepivottable.descrip": "GcExcel can export a spreadsheet with Pivot Tables to PDF.",
  "saverangefilltopdf.descrip": "GcExcel can export a spreadsheet range with different kinds of fills(solid, gradient, pattern) to PDF.",
  "savesparklinestopdf.descrip": "GcExcel can export a spreadsheet with sparklines to PDF.",
  "savetable.descrip": "GcExcel can export a spreadsheet with tables to PDF.",
  "saveworkbooktopdf.descrip": "Refer to the following example code to export a workbook to PDF document.",
  "saveworksheettopdf.descrip": "Refer to the following example code to export a single worksheet to PDF document.",
  "setbuiltinstyle.descrip": "Refer to the following example code to see how to set a built-in style for Pivot Table.",
  "setcustompivotstyle.descrip": "Refer to the following example code to see how to customize a Pivot Table style",
  "setfontsfolderpath.descrip": "Refer to the following example code to see how to set the fonts folder path before saving to PDF document.",
  "setnumberformatforfield.descrip": "Refer to the following example code to see how to set number format for a pivot field.",
  "setshowtablestyles.descrip": "Refer to the following example code to see how to show or hide some of table style elements.",
  "shrinktofitforwrappedtext.descrip": "Refer to the following example code to see how to shrink to fit the wrapped text when exporting to PDF.",
  "verticaltext.descrip": "Refer to the following example code to set vertical text for japanese text and can export it to a PDF document to see effect.",
  "accessworksheet.descrip": "Refer to the following example code to see how to get worksheet object.",
  "activateworksheet.descrip": "Refer to the following example code to see how to activate a worksheet.",
  "addcustomslicerstyle.descrip": "Refer to the following example code to see how to create a custom slicer style.",
  "addcustomthemes.descrip": "Refer to the following example code to see how to create custom theme and apply it to a workbook.",
  "addslicersforpivottable.descrip": "Refer to the following example code to see how to create slicer for a Pivot Table.",
  "addslicersfortable.descrip": "Refer to the following example code to see how to create slicer for a table.",
  "addworksheet.descrip": "Refer to the following example code to see how to add a new worksheet.",
  "applyslicerstyle.descrip": "Refer to the following example code to see how to apply a slicer style.",
  "autofit.descrip": "Refer to the following example code in order to automatically fit the row height and column width in a worksheet.",
  "changeworkbooktheme.descrip": "Refer to the following example code to see how to change the theme of a workbook.",
  "clearsparklinegroup.descrip": "Refer to the following example code to see how to clear sparkline groups.",
  "clearsparklines.descrip": "Refer to the following example code to see how to clear sparklines.",
  "configshape3dformat.descrip": "Refer to the following example code to see how to configure three-D properties of a shape.",
  "configshapeline.descrip": "Refer to the following example code to see how to format the border of a shape.",
  "configshapewithgradientfill.descrip": "Refer to the following example code to see how to set gradient fill for a shape.",
  "configshapewithpatternfill.descrip": "Refer to the following example code to see how to set pattern fill for a shape.",
  "configshapewithpicturefill.descrip": "Refer to the following example code to see how to set picture fill for a shape.",
  "configshapewithsolidfill.descrip": "Refer to the following example code to see how to set solid fill for a shape.",
  "configshapewithtexturefill.descrip": "Refer to the following example code to see how to set texture fill for a shape.",
  "configslicerlayout.descrip": "Refer to the following example code to see how to configure the layout of a slicer object.",
  "configsparklinesettings.descrip": "Refer to the following example code to see how to configure sparklines, such as line weight, marker color and series color.",
  "configureworkbookview.descrip": "Refer to the following example code to see how to configure a workbook view, such as such as whether to display scrollbars, whether to show tabs, and so on.",
  "configureworksheetview.descrip": "Refer to the following example code to configure the worksheet view object, such as whether to display grid line, or the zoom factor and so on.",
  "configworksheet.descrip": "Refer to the following example code to configure a worksheet.",
  "connectshapesbyconnector.descrip": "Refer to the following example code to see how to connect two shapes with a connector.",
  "controladjustingpagebreaks.descrip": "Refer to the following example code to add, delete and adjust page breaks within a worksheet.",
  "copyworksheet.descrip": "Refer to the following example code to copy a worksheet within workbook.",
  "copyworksheetbetweenworkbooks.descrip": "Refer to the following example code to copy a worksheet between different workbooks.",
  "createnewworkbook.descrip": "Refer to the following example code to see how to create a workbook.",
  "createsparklines.descrip": "Refer to the following example code to see how to create sparklines in a worksheet.",
  "customsort.descrip": "Refer to the following example code to see how to create a custom sort for a range.",
  "deleteworksheet.descrip": "Refer to the following example code to delete a worksheet from workbook.",
  "dotablefilter.descrip": "The state of a slicer will be synchronized with table filter.",
  "groupexistsparklines.descrip": "Refer to the following example code to see how to group current sparklines.",
  "importcsvfiletoworkbook.descrip": "Refer to the following example code to see how to load a csv file.",
  "importcsvfiletoworkbookwithoptions.descrip": "Refer to the following example code to see how to load a csv file with options.",
  "importexcelfiledataonly.descrip": "Refer to the following example code to see how to only load data from Excel file.",
  "importexcelfiletoworkbook.descrip": "Refer to the following example code to see how to open an Excel file.",
  "importexcelfilewithoutcalculation.descrip": "Refer to the following example code to see how to avoid recalucating formulas after opening an Excel file.",
  "importexcelfilewithpassword.descrip": "Refer to the following example code to see how to open a password protected Excel file.",
  "importoleobjectstoworkbookandexport.descrip": "GcExcel can open an Excel file with ole objects.",
  "importxlsmtoworkbook.descrip": "GcExcel can open xlsm files, and all macros and form controls will be preserved after exporting to xlsm again.",
  "loadandsavejsonwithshapes.descrip": "GcExcel can load and save ssjson file with shapes in it.",
  "moveworksheet.descrip": "Refer to the following example code to move a worksheet to the end of all worksheets.",
  "moveworksheetbetweenworkbooks.descrip": "Refer to the following example code to move a worksheet into a different workbook",
  "protectworksheet.descrip": "Refer to the following example code to protect a worksheet and configure the protect settings.",
  "saveworkbooktocsvfile.descrip": "Refer to the following example code to see how to save  a workbook to csv file.",
  "saveworkbooktocsvfilewithoptions.descrip": "Refer to the following example code to see how to save  a workbook to csv file with options.",
  "saveworkbooktoexcelfile.descrip": "Refer to the following example code to see how to save  a workbook to Excel file.",
  "saveworkbookwithpassword.descrip": "Refer to the following example code to see how to save  a workbook to password protected  Excel file.",
  "saveworksheettocsvfile.descrip": "Refer to the following example code to save a single worksheet to csv file.",
  "saveworksheettocsvfilewithoptions.descrip": "Refer to the following example code to save a single worksheet to csv file with options.",
  "setbackgroundimage.descrip": "Refer to the following example code to set a background image for worksheet.",
  "setshapetext.descrip": "Refer to the following example code to see how to add rich text for a shape.",
  "shapecopy.descrip": "Refer to the following example code to see how to copy a shape object.",
  "shapecut.descrip": "Refer to the following example code to see how to cut a shape object",
  "shapeduplicate.descrip": "Refer to the following example code to see how to duplicate a shape object.",
  "slicercopy.descrip": "Refer to the following example code to see how to copy a slicer object",
  "slicercut.descrip": "Refer to the following example code to see how to cut a slicer object",
  "slicerduplicate.descrip": "Refer to the following example code to see how to duplicate a slicer object",
  "sortrangebyfontcolor.descrip": "Refer to the following example code to see how to sort a range by font color.",
  "sortrangebyicon.descrip": "Refer to the following example code to see how to sort a range by conditional formatting icons.",
  "sortrangebyinterior.descrip": "Refer to the following example code to see how to sort a range by interior.",
  "sortrangebyvalue.descrip": "Refer to the following example code to see how to sort a range by value.",
  "tojsonfromjson.descrip": "Refer to the following example code to see how to load from json and save to json file. ",
  "unprotectworksheet.descrip": "Refer to the following example code to unprotect a worksheet.",
  "usedateaxis.descrip": "Refer to the following example code to see how to configure date axis of sparkline.",
  "useslicerdofilter.descrip": "Refer to the following example code to see how to use slicer to do filtering.",
  "useslicertoclearfilter.descrip": "Refer to the following example code to see how to clear all filters on data with slicer.",
  "showcase.name": "Showcase",
  "showcase.descrip": "In this folder, you can explore complete code demonstrating how to generate an Excel file, or  you may have your own Excel files and just want to open and update some of its contents at server side\n\nClick the **\"Run\"** button to perform the following actions on the server:\n- Create an empty workbook or open an existing Excel file.\n- Execute all of code in the code window\n- Save to an Excel file",
  "departmentbudget.name": "Department Budget",
  "protectworksheetwithpassword.name": "Protect worksheet with password",
  "protectworksheetwithpassword.descrip": "Refer to the following example code to see how to protect the worksheet with a password.",
  "unprotectworksheetwithpassword.name": "Unprotect worksheet with password",
  "unprotectworksheetwithpassword.descrip": "Refer to the following example code to see how to unprotect the worksheet with a password.",
  "imageexporting.descrip": "## Image Exporting\nIn this folder, you can explore complete code demonstrating how to export sheet/range/shape/chart to image files at server side.\n\nClick the **\"Run\"** button to perform the following actions on the server:\n- Create an empty workbook\n- Execute all of code in the code window\n- Save to image file\n\nThen you can view the image in your browser.",
  "imageexporting.name": "Image Exporting",
  "savebackgroundpicturestopdf.name": "Save background pictures to pdf",
  "savebackgroundpicturestopdf.descrip": "Refer to the following example code to see how to export background pictures to pdf.",
  "configcharttitleangle.name": "Set angle of chart title",
  "configcharttitleangle.descrip": "Refer to the following example code to see how to configure text angle of a chart title.",
  "configcustomerrorbar.name": "Custom type",
  "configcustomerrorbar.descrip": "Refer to the following example code to see how to configure a custom type error bar of chart.",
  "configdatalabelangle.name": "Set angle of data labels",
  "configdatalabelangle.descrip": "Refer to the following example code to see how to configure text angle of data labels.",
  "configdeleteerrorbar.name": "Delete error bar",
  "configdeleteerrorbar.descrip": "Refer to the following example code to see how to delete an error bar of chart.",
  "configerrorbarincludeandendtype.name": "Set include type and end cap type",
  "configerrorbarincludeandendtype.descrip": "Refer to the following example code to see how to configure include type and end cap type of error bar.",
  "configerrorbarstyle.name": "Style",
  "configerrorbarstyle.descrip": "Refer to the following example code to see how to configure error bar's style.",
  "configfixedvalueerrorbar.name": "Fixed value type",
  "configfixedvalueerrorbar.descrip": "Refer to the following example code to see how to configure a fixed value type error bar of chart.",
  "configpercentageerrorbar.name": "Percentage type",
  "configpercentageerrorbar.descrip": "Refer to the following example code to see how to configure a percentage type error bar of chart.",
  "configstderrerrorbar.name": "Standard error type",
  "configstderrerrorbar.descrip": "Refer to the following example code to see how to configure a standard error type error bar of chart.",
  "configstdeverrorbar.name": "Standard deviation type",
  "configstdeverrorbar.descrip": "Refer to the following example code to see how to configure a standard deviation type error bar of chart.",
  "configtickmarklabelangle.name": "Set angle of tick mark labels",
  "configtickmarklabelangle.descrip": "Refer to the following example code to see how to configure the tick labels' angle of axis.",
  "configxyerrorbars.name": "X and Y direction",
  "configxyerrorbars.descrip": "Refer to the following example code to see how to configure X and Y direction error bar of scatter or bubble chart.",
  "errorbars.name": "Error bars",
  "errorbars.descrip": "## ErrorBars\nThese examples demonstrate how to configure chart **error bars**.",
  "configgradientfillwithpathshape.name": "Set gradient path type",
  "configgradientfillwithpathshape.descrip": "Refer to the following example code to see how to set different path type of gradient fill.",
  "printtransparentcell.name": "Print transparent cell",
  "printtransparentcell.descrip": "Refer to the following example code to see how to print the transparency of the cell's background colors.",
  "formulatemplate.name": "Formula template",
  "formulatemplate.descrip": "Bind data with a template which consists of formulas. And these formulas will be retained and refer to the expanded data.",
  "globaloptions.name":"Global options",
  "globaloptions.descrip":"## Global options\nThis feature provides global options for user to control the default behaviors of GcExcel Template.\n\nGcExcel defines some built-in workbook defined names to set global options on the template.\nCurrently, these options are Workbook Defined Names. So, user should take care of the scope of using in the options in the template. That is, template options in multiple worksheets will behave the same.\n\nUser can add/edit/delete these built-in defined names directly in Excel file, or via GcExcel APIs.\n\nThe value of Name property in built-in defined name will be taken as the template global option's name.\nThe value of RefersTo property in built-in defined name will be taken as the template global option's value.\nThe option name is case-sensitive, while the option value is case-insensitive.\n\nThe template supports following types of global options:\n\n- **TemplateOptions.KeepLineSize:** Boolean type. The value can be **True** or **False**(Default).\nWhether the row height and column width should be of equal size when processing template.\n- **TemplateOptions.InsertMode:** String type. The value can be **Cells**(Default) or **EntireRowColumn**.\nWhether GcExcel will insert cells or entire rows & columns when extra spaces are needed while expanding the template.",
  "keeplinesize.name":"Keep row & column size",
  "keeplinesize.descrip":"Use built-in defined name \"TemplateOptions.KeepLineSize\" to specify whether the row height and column width should be of equal size when processing template.\nThe value is in boolean type, and can be True or False(Default).",
  "insertmode.name":"Insert mode",
  "insertmode.descrip":"Use built-in defined name \"TemplateOptions.InsertMode\" to specify whether GcExcel will insert cells or entire rows & columns when extra spaces are needed while expanding the template.\nThe value is in string type, and can be \"Cells\"(Default) or \"EntireRowColumn\".",
  "imagetemplate.name":"Image template",
  "imagetemplate.descrip":"Use template property \"image=true\" to show data of an image field as images after template processing",
  "templateotherfeatures.name":"Work with other features",
  "templateotherfeatures.descrip":"## Work with other features\nGcExcel template can work with other features to create lots of dynamic reports.\nSuch as: conditional formatting, chart.\n\nWe've planed to support more features working with template in future.",
  "templateworkwithconditionalformatting.name":"Conditional formatting",
  "templateworkwithconditionalformatting.descrip":"Conditional formattings on a template cell will be applied to all the cells expanded from it after template processing.",
  "templateworkwithchart.name":"Chart",
  "templateworkwithchart.descrip":"User can manually set chart's series name, series value and axis label to related template cells. And the chart can be correctly displayed following these settings after template processing.",
  "employeeabsenceschedule.name":"Employee absence schedule",
  "salestracker.name":"Sales tracker",
  "addshapewithcustomname.name": "Shape with custom name",
  "addshapewithcustomname.descrip": "Refer to the following example code to see how to add a shape with custom name.",
  "createchartwithcustomname.name": "Chart with custom name",
  "createchartwithcustomname.descrip": "Refer to the following example code to see how to create a chart with custom name. ",
  "getpaginationinfo.name": "Get the horizontal or vertical pagination infos",
  "getpaginationinfo.descrip": "Refer to the following example code to see how to getget an array of page boundaries of a sheet for vertical or horizontal paging in GcExcel.",
  "departmentbudget.descrip":"This sample demonstrates a vertical group template. The departments' data are expanded horizontally, while the employees' data  are expanded vertically.",
  "employeeabsenceschedule.descrip":"This sample demonstrates the template with conditional formatting applied on a template cell. It uses a sheet name template to show each month's data in a seperate sheet. ",
  "financialdashboard.descrip":"This sample demonstrates a cross-table template.",
  "purchaseorder.descrip":"This sample demonstrates a entire document report with static values and a dynamic table.",
  "sales.descrip":"This sample demonstrates an outline group template table. It has outline and subtotal groups for each area.",
  "salestracker.descrip":"This sample demonstrates the template working with charts. These charts use template cells as their series' data: values, axis labels etc.",
  "shippinganddeliveryorder.descrip":"This sample demonstrates a document report with pre-desigied style. It uses template to fill the static and dynamic data.",
  "tablixreport.descrip":"This sample demonstrates a Tablix template table. It has multiple lines in row & column header. And also, there are subtotal lines inside.",
  "travel.descrip":"This sample demonstrates multiple template tables in one sheet.",
  "outlinecolumn.name": "Outline column",
  "outlinecolumn.descrip": "Refer to the following example code to see how to add the outline column for the worksheet to display the data in tree structure.",
  "outlinecolumntopdf.name": "Export outline column",
  "outlinecolumntopdf.descrip": "Refer to the following example code to see how to export the outline column of the worksheet to PDF file.",
  "setshapetextalignment.name": "Set alignment of shape's text",
  "setshapetextalignment.descrip": "Refer to the following example code to see how to set the horizontal and vertical alignment of the shape's text in GcExcel.",
  "shapewithtextalignment.name": "Shape with text alignment",
  "shapewithtextalignment.descrip": "GcExcel can export shape text with alignment to PDF file.",
  "databinding.descrip": "## Data Binding\nGrapeCity Documents for Excel now supports one-time data binding. \n\n- **Sheet binding**: bind source data to sheet\n- **Cell binding**: bind source data to cell\n- **Table binding**: bind source data to table",
  "databinding.name": "Data binding",
  "bindautomatically.descrip": "Refer to the following example code to see how to bind data source to sheet columns automatically.",
  "bindautomatically.name": "Bind to sheet automatically",
  "bindcustomobject.descrip": "Refer to the following example code to see how to bind custom object to table.",
  "bindcustomobject.name": "Bind custom object",
  "bindresultset.descrip": "Refer to the following example code to see how to bind ResultSet to sheet columns.",
  "bindresultset.name": "Bind ResultSet to sheet",
  "bindmanually.descrip": "Refer to the following example code to see how to bind data source to sheet columns manually.",
  "bindmanually.name": "Bind to sheet manually",
  "cellbinding.descrip": "Refer to the following example code to see how to bind data source to cells.",
  "cellbinding.name": "Cell binding",
  "sheetbinding.descrip": "**Sheet binding**\n- Use IRange.getBindingPath/setBindingPath  to get/set column binding path. (e.g. worksheet.getRange(\"A:A\").getEntireColumn().setBindingPath(\"xxx\") ).\n- Use IWorsheet.getAutoGenerateColumns/setAutoGenerateColumns to get/set if data source should be bound to columns automatically. The default value is true.\n- If IWorsheet.getAutoGenerateColumns is true, each field of source data would be bound to a column.\n- Use IWorksheet.getDataSource/setDataSource to get/set data source. And each worksheet can only have one data source. Data source can be a java.sql.ResultSet or an Iterable/Array.",
  "sheetbinding.name": "Sheet binding",
  "tablebinding.descrip": "**Table binding**\n- Use ITabel.getBindingPath/setBindingPath to get/set table's binding path.\n- Use ITableColumn.getDataField/setDataField to get/set binding path for table columns.\n- Use ITable.getAutoGenerateColumns/setAutoGenerateColumns to get/set if data source should be bound to table columns automatically. The default value is true.\n- When ITable.getAutoGenerateColumns is true, each field of source data would be bound to a table column.\n- Use IWorksheet.getDataSource/setDataSource to get/set data source. Data source can only be custom object which contains an Iterable/Array filed.\n- The table range would change with data source.",
  "tablebinding.name": "Table binding",
  "getrangeboundary.name": "Add image to specific range",
  "getrangeboundary.descrip": "Refer to the following example code to see how to add a image to specific range in GcExcel.",
  "addsignaturelines.descrip": "Add a new Microsoft Office signature line.",
  "addsignaturelines.name": "Add signature lines",
  "copysignaturelines.descrip": "Copy signature lines to another range or worksheet.",
  "copysignaturelines.name": "Copy signature lines",
  "countersignsignature.descrip": "Countersign a signature with the same certificate.",
  "countersignsignature.name": "Countersign signature",
  "cutsignaturelines.descrip": "Cut signature lines to another range.",
  "cutsignaturelines.name": "Cut signature lines",
  "deletesignaturelines.descrip": "Delete signature lines through IShape or ISignature.",
  "deletesignaturelines.name": "Delete signature lines",
  "listsignaturelines.descrip": "List signature lines with index or enumerator.",
  "listsignaturelines.name": "List signature lines",
  "movesignaturelines.descrip": "Move signature lines to another range or worksheet.",
  "movesignaturelines.name": "Move signature lines",
  "signsignatureline.descrip": "Sign a new signature line with ISignature.Sign method.",
  "signsignatureline.name": "Sign a new signature line",
  "signworkbook.descrip": "Ensure the integrity of the workbook by adding an invisible digital signature with ISignatureSet.AddNonVisibleSignature method.",
  "signworkbook.name": "Add non visible signature",
  "verifysignatures.descrip": "Verify signatures with ISignature.IsValid method.",
  "verifysignatures.name": "Verify signatures",
  "signatures.name": "Digital signatures",
  "exportsignaturelinetopdf.descrip": "Export Excel workbook having a signature line to PDF document.",
  "exportsignaturelinetopdf.name": "Export as pdf",
  "signatures.descrip": "This demo showcases examples of using signature lines and digital signatures in Excel spreadsheets.",
  "tojsonfromjsonforworksheet.name": "ToJson and FromJson",
  "tojsonfromjsonforworksheet.descrip":"Refer to the following example code to see how to import and export json for a single worksheet.",
  "templateworkwithtable.name":"Table",
  "templateworkwithtable.descrip":"Table containing template cells, will be resized accordingly after template processing.",
  "medicalreport.name":"Medical Report",
  "medicalreport.descrip":"This sample demonstrates an entire document report with template cells in a table.",
  "htmlexporting.name": "Html exporting",
  "htmlexporting.descrip": "## Html Exporting\nIn this folder, you can explore complete code demonstrating how to export html file at server side. \n\nClick the **\"Run\"** button to perform the following actions on the server:\n- Create an empty workbook\n- Execute all of code in the code window\n- Save to html\n\nThen you can download and view the html in your browser.",
  "saveworkbooktohtml.name": "Save workbook to html",
  "saveworkbooktohtml.descrip": "Refer to the following example code to see how to export a workbook to html.",
  "saveworksheettohtml.name": "Save worksheet to html",
  "saveworksheettohtml.descrip": "Refer to the following example code to see how to export a worksheet to html.",
  "saverangetohtml.name": "Save range to html",
  "saverangetohtml.descrip": "Refer to the following example code to see how to export a sheet range to html.",
  "saveworksheettosinglehtml.name": "Save to a single html",
  "saveworksheettosinglehtml.descrip": "Refer to the following example code to see how to export a worksheet to a single html file.\n\t\nWhen HtmlSaveOptions meet the following conditions, workbook would be exported to a single html file stream.\n- HtmlSaveOptions.ExportSheetName is set and valid or there's only one sheet to be exported.\n- HtmlSaveOptions.ExportImageAsBase64 as true.\n- HtmlSaveOptions.ExportCssSeperately as false.\n- HtmlSaveOptions.ExportSingleTab as false.",
  "savehtmlwithheadingsandgridlines.name": "Save html with headings and gridlines",
  "savehtmlwithheadingsandgridlines.descrip": "Refer to the following example code to see how to export Excel to Html with row/column headings and gridlines.",
  "savehtmlwithscalablewidth.name": "Save html with scalable width",
  "savehtmlwithscalablewidth.descrip": "Refer to the following example code to see how to export Excel to Html with scalable width.",
  "setshapezorder.name": "Set shape's z-order",
  "setshapezorder.descrip": "Refer to the following example code to see how to set the shape's z-order.",
  "configfreezetrailingrowcol.name": "Configure freeze trailing  row and column",
  "configfreezetrailingrowcol.descrip": "Refer to the following example code to see how to configure freeze trailing row and column count.",
  "configfrozenlinecolor.name": "Configure frozen line color",
  "configfrozenlinecolor.descrip": "Refer to the following example code to see how to configure frozen line color.",
  "configshowhvgridlinesseparately.name": "Configure to show horizontal and vertical gridlines separately",
  "configshowhvgridlinesseparately.descrip": "Refer to the following example code to see how to configure to show horizontal and vertical gridline separately.",
  "picturetransparency.name": "Set transparency",
  "picturetransparency.descrip": "Refer to the following example code to see how to set picture's transparency.",
  "addnonvisiblesignaturetosignedworkbook.descrip": "Add signature to a signed workbook in DigitalSignatureOnly mode mode.",
  "addnonvisiblesignaturetosignedworkbook.name": "Add signature to signed workbook",
  "deletenonvisiblesignature.descrip": "Delete signature in a signed workbook in DigitalSignatureOnly mode mode.",
  "deletenonvisiblesignature.name": "Delete signature in signed workbook",
  "deletesignaturefromsignatureline.descrip": "Remove signature from a signed signature line in DigitalSignatureOnly mode mode.",
  "deletesignaturefromsignatureline.name": "Remove signature from signed signature line",
  "signexistingsignatureline.descrip": "Sign a signature line in a signed workbook in DigitalSignatureOnly mode mode.",
  "signexistingsignatureline.name": "Sign signature line in signed workbook",
  "FolderExampleDemonstratingFeatures": "In this sample, we will demonstrate following features:",
  "templateworkwithsparkline.name":"Sparkline",
  "templateworkwithsparkline.descrip":"Sparkline referring to template cells, will be copied and adjusted accordingly after template processing.",
  "expensetrendbudgetreport.name":"Expense trend budget",
  "expensetrendbudgetreport.descrip":"This sample mainly demonstrates defining a Template with sparklines referring to a template cell. ",
  "fillmode.name":"Set fill mode",
  "fillmode.descrip":"## Set fill mode\nnUser can use **FM(FillMode)** property to change the data filling mode of template. It supports two values: \n\n**Insert**(default)\n\nInsert empty lines when template expands, then set data and style of template cell in the empty lines.\n\n**Overwrite**\n\nDirectly overwrite the cells defined in the template with data, without applying any style. (The default style set in the template will be used while template expands). This is very useful if user has a fixed layout template.\n\nWhen using overwrite mode, user can use property **FR(FillRange)** to specify a range for overwriting data. If the data is overflow for the range, GcExcel will duplicate the fill range accordingly to set data.",
  "setfillmode.name":"Default",
  "setfillmode.descrip":"FillMode.Insert is the **default** fill mode, which means to insert empty lines when template expands, then set data and style of the template cell in the lines.",
  "setfillmodeoverflow.name":"Fixed layout(overflow)",
  "setfillmodeoverflow.descrip":"When using overwrite mode, user can use property FR(FillRange) to specify a range for overwriting data. If the data overflows and does not fit in the specified range, GcExcel will duplicate the specified range accordingly to set data.",
  "setfillmodeoverwrite.name":"Fixed layout",
  "setfillmodeoverwrite.descrip":"When using FillMode.Overwrite, no new lines will be inserted, cell content will be overwritten directly with the data. This is very useful if user wants a fixed layout template.",
  "constructionproposal.name":"Construction proposal",
  "constructionproposal.descrip":"This sample mainly demonstrates the overwrite fill mode applied in a fixed layout template.",
  "pdfformbuilder.name": "PDF Form Builder",
  "pdfformbuilder.descrip":"## PDF Form Builder\nGcExcel Template provides a new template property **\"form\"** for user to define PDF form fields. The value of the form property is in JSON format.  User can use JSON string to describe all settings of a PDF form field. The property name and enum value are case insensitive.\n\nThis feature is only for pdf exporting, so the definition of PDF form fields will be ignored when exporting to excel.",
  "pdfformbuildersamples.name":"PDF Form Builder samples",
  "pdfformbuildersamples.descrip":"## PDF Form Builder samples\nThis section showcases some real-world scenarios implemented with GcExcel Templates to generate full professional PDF Form Reports.",
  "checkboxfields.name":"Check box",
  "checkboxfields.descrip":"Bind data with Excel template defining Check box Field in Template cell and export to PDF.",
  "comboboxfields.name":"Combo box",
  "comboboxfields.descrip":"Bind data with Excel template defining Combo box Field in Template cell and export to PDF.",
  "listboxfields.name":"List box",
  "listboxfields.descrip":"Bind data with Excel template defining List box Field in Template cell and export to PDF.",
  "pushbuttonfields.name":"Button",
  "pushbuttonfields.descrip":"This sample demonstrates generating PDF Forms having Submit button and Reset buttons defined in the Excel Template cells.",
  "radiobuttonfields.name":"Radio button",
  "radiobuttonfields.descrip":"Bind data with Excel template defining Radio button Field in Template cell and export to PDF.",
  "sendaitaxform.name":"Sendai tax form",
  "sendaitaxform.descrip":"This sample demonstrates defining PDF Form Fields in Excel templates and exporting to PDF.",
  "shipregistration.name":"Ship registration",
  "shipregistration.descrip":"This sample demonstrates defining PDF Form Fields in Excel templates and exporting to PDF.",
  "signaturefields.name":"Signature",
  "signaturefields.descrip": "This sample demonstrates generating PDF Forms with signature fields defined in Excel template cells.",
  "textfields.name":"Text box",
  "textfields.descrip":"Bind data with Excel template defining Text box Field in Template cell and export to PDF.",
  "ustaxform_fw4.name":"US tax form",
  "ustaxform_fw4.descrip":"This sample demonstrates defining PDF Form Fields in Excel templates and exporting to PDF.",
  "wageandtaxstatement.name":"Wage and tax statement",
  "wageandtaxstatement.descrip":"This sample demonstrates defining PDF Form Fields in Excel templates and exporting to PDF.",
  "deferlayoutupdate.descrip": "Refer to the following example code to see how to defer layout update for  a Pivot Table.",
  "deferlayoutupdate.name": "Defer layout update",
  "fieldlayoutsettings.descrip": "Refer to the following example code to see how to change layout of a Pivot Table.",
  "fieldlayoutsettings.name": "Set layout settings",
  "getdetailrange.descrip": "Refer to the following example code to see how to get the detail range of a Pivot Table.",
  "getdetailrange.name": "Get detail range",
  "layoutandformatoptions.descrip": "Refer to the following example code to see how to set the layout and format options for  a Pivot Table.",
  "layoutandformatoptions.name": "Set layout and format options",
  "multipledatafields.descrip": "Refer to the following example code to see how to add multiple data fields from one pivot field.",
  "multipledatafields.name": "Add multiple data fields",
  "setconditionalformat.descrip": "Refer to the following example code to see how to set conditional format for a Pivot Table.",
  "setconditionalformat.name": "Set conditional format",
  "setstyle.descrip": "Refer to the following example code to see how to find specific range and set cell style in a Pivot Table.",
  "setstyle.name": "Set style",
  "sort.descrip": "Refer to the following example code to see how to sort the pivot items of a pivot field.",
  "sort.name": "Sort",
  "embedfontforformfields.name": "Set font embed mode for Form fields",
  "embedfontforformfields.descrip":"With TemplateOptions.EmbedFontForFormFields, you can choose whether to embed the fonts used by Form fields when generaating PDF document.\n- True to embed fonts, the generated PDF may be large.\n- False to not embed any fonts, the generated PDF is small, but you may input messy code if can not find the fonts on your system."
}