{
  "com.grapecity.documents.excel.examples.Tutorial": "\n\n        val worksheet = workbook.getWorksheets().get(0)\n\n        //-----------------------------Set Value------------------------------\n        worksheet.getRange(\"B3:C7\").setValue(\n                arrayOf<Array<Any>>(\n                        arrayOf<Any>(\"ITEM\", \"AMOUNT\"),\n                        arrayOf<Any>(\"Income 1\", 2500),\n                        arrayOf<Any>(\"Income 2\", 1000),\n                        arrayOf<Any>(\"Income 3\", 250),\n                        arrayOf<Any>(\"Other\", 250)\n                )\n        )\n        worksheet.getRange(\"B10:C23\").setValue(\n                arrayOf<Array<Any>>(\n                        arrayOf<Any>(\"ITEM\", \"AMOUNT\"),\n                        arrayOf<Any>(\"Rent/mortgage\", 800),\n                        arrayOf<Any>(\"Electric\", 120),\n                        arrayOf<Any>(\"Gas\", 50),\n                        arrayOf<Any>(\"Cell phone\", 45),\n                        arrayOf<Any>(\"Groceries\", 500),\n                        arrayOf<Any>(\"Car payment\", 273),\n                        arrayOf<Any>(\"Auto expenses\", 120),\n                        arrayOf<Any>(\"Student loans\", 50),\n                        arrayOf<Any>(\"Credit cards\", 100),\n                        arrayOf<Any>(\"Auto Insurance\", 78),\n                        arrayOf<Any>(\"Personal care\", 50),\n                        arrayOf<Any>(\"Entertainment\", 100),\n                        arrayOf<Any>(\"Miscellaneous\", 50)\n                )\n        )\n        worksheet.getRange(\"B2:C2\").merge()\n        worksheet.getRange(\"B2\").setValue(\"MONTHLY INCOME\")\n        worksheet.getRange(\"B9:C9\").merge()\n        worksheet.getRange(\"B9\").setValue(\"MONTHLY EXPENSES\")\n        worksheet.getRange(\"E2:G2\").merge()\n        worksheet.getRange(\"E2\").setValue(\"PERCENTAGE OF INCOME SPENT\")\n        worksheet.getRange(\"E5:G5\").merge()\n        worksheet.getRange(\"E5\").setValue(\"SUMMARY\")\n        worksheet.getRange(\"E3:F3\").merge()\n        worksheet.getRange(\"E9\").setValue(\"BALANCE\")\n        worksheet.getRange(\"E6\").setValue(\"Total Monthly Income\")\n        worksheet.getRange(\"E7\").setValue(\"Total Monthly Expenses\")\n\n        //--------------------------------Set Height & Width--------------------------------\n        worksheet.setStandardHeight(26.25)\n        worksheet.setStandardWidth(8.43)\n\n        worksheet.getRange(\"2:24\").setRowHeight(27.0)\n        worksheet.getRange(\"A:A\").setColumnWidth(2.855)\n        worksheet.getRange(\"B:B\").setColumnWidth(33.285)\n        worksheet.getRange(\"C:C\").setColumnWidth(25.57)\n        worksheet.getRange(\"D:D\").setColumnWidth(1.0)\n        worksheet.getRange(\"E:F\").setColumnWidth(25.57)\n        worksheet.getRange(\"G:G\").setColumnWidth(14.285)\n\n        //------------------------------Set Table--------------------------------------\n        val incomeTable = worksheet.getTables().add(worksheet.getRange(\"B3:C7\"), true)\n        incomeTable.setName(\"tblIncome\")\n        incomeTable.setTableStyle(workbook.getTableStyles().get(\"TableStyleMedium4\"))\n        val expensesTable = worksheet.getTables().add(worksheet.getRange(\"B10:C23\"), true)\n        expensesTable.setName(\"tblExpenses\")\n        expensesTable.setTableStyle(workbook.getTableStyles().get(\"TableStyleMedium4\"))\n\n        //------------------------------Set Formulas-----------------------------------\n        worksheet.getNames().add(\"TotalMonthlyIncome\", \"=SUM(tblIncome[AMOUNT])\")\n        worksheet.getNames().add(\"TotalMonthlyExpenses\", \"=SUM(tblExpenses[AMOUNT])\")\n        worksheet.getRange(\"E3\").setFormula(\"=TotalMonthlyExpenses\")\n        worksheet.getRange(\"G3\").setFormula(\"=TotalMonthlyExpenses/TotalMonthlyIncome\")\n        worksheet.getRange(\"G6\").setFormula(\"=TotalMonthlyIncome\")\n        worksheet.getRange(\"G7\").setFormula(\"=TotalMonthlyExpenses\")\n        worksheet.getRange(\"G9\").setFormula(\"=TotalMonthlyIncome-TotalMonthlyExpenses\")\n\n        //----------------------------Set Styles-------------------------\n        val currencyStyle = workbook.getStyles().get(\"Currency\")\n        currencyStyle.setIncludeAlignment(true)\n        currencyStyle.setHorizontalAlignment(HorizontalAlignment.Left)\n        currencyStyle.setVerticalAlignment(VerticalAlignment.Bottom)\n        currencyStyle.setNumberFormat(\"$#,##0.00\")\n\n        val heading1Style = workbook.getStyles().get(\"Heading 1\")\n        heading1Style.setIncludeAlignment(true)\n        heading1Style.setHorizontalAlignment(HorizontalAlignment.Center)\n        heading1Style.setVerticalAlignment(VerticalAlignment.Center)\n        heading1Style.getFont().setName(\"Century Gothic\")\n        heading1Style.getFont().setBold(true)\n        heading1Style.getFont().setSize(11.0)\n        heading1Style.getFont().setColor(Color.GetWhite())\n        heading1Style.setIncludeBorder(false)\n        heading1Style.setIncludePatterns(true)\n        heading1Style.getInterior().setColor(Color.FromArgb(32, 61, 64))\n\n        val percentStyle = workbook.getStyles().get(\"Percent\")\n        percentStyle.setIncludeAlignment(true)\n        percentStyle.setHorizontalAlignment(HorizontalAlignment.Center)\n        percentStyle.setIncludeFont(true)\n        percentStyle.getFont().setColor(Color.FromArgb(32, 61, 64))\n        percentStyle.getFont().setName(\"Century Gothic\")\n        percentStyle.getFont().setBold(true)\n        percentStyle.getFont().setSize(14.0)\n\n        worksheet.getSheetView().setDisplayGridlines(false)\n        worksheet.getRange(\"C4:C7, C11:C23, G6:G7, G9\").setStyle(currencyStyle)\n        worksheet.getRange(\"B2, B9, E2, E5\").setStyle(heading1Style)\n        worksheet.getRange(\"G3\").setStyle(percentStyle)\n\n        worksheet.getRange(\"E6:G6\").getBorders().get(BordersIndex.EdgeBottom).setLineStyle(BorderLineStyle.Medium)\n        worksheet.getRange(\"E6:G6\").getBorders().get(BordersIndex.EdgeBottom).setColor(Color.FromArgb(32, 61, 64))\n        worksheet.getRange(\"E7:G7\").getBorders().get(BordersIndex.EdgeBottom).setLineStyle(BorderLineStyle.Medium)\n        worksheet.getRange(\"E7:G7\").getBorders().get(BordersIndex.EdgeBottom).setColor(Color.FromArgb(32, 61, 64))\n\n        worksheet.getRange(\"E9:G9\").getInterior().setColor(Color.FromArgb(32, 61, 64))\n        worksheet.getRange(\"E9:G9\").setHorizontalAlignment(HorizontalAlignment.Left)\n        worksheet.getRange(\"E9:G9\").setVerticalAlignment(VerticalAlignment.Center)\n        worksheet.getRange(\"E9:G9\").getFont().setName(\"Century Gothic\")\n        worksheet.getRange(\"E9:G9\").getFont().setBold(true)\n        worksheet.getRange(\"E9:G9\").getFont().setSize(11.0)\n        worksheet.getRange(\"E9:G9\").getFont().setColor(Color.GetWhite())\n        worksheet.getRange(\"E3:F3\").getBorders().setColor(Color.FromArgb(32, 61, 64))\n\n        //----------------------------Set Conditional Format-------------------------\n        val dataBar = worksheet.getRange(\"E3\").getFormatConditions().addDatabar()\n        dataBar.getMinPoint().setType(ConditionValueTypes.Number)\n        dataBar.getMinPoint().setValue(1)\n        dataBar.getMaxPoint().setType(ConditionValueTypes.Number)\n        dataBar.getMaxPoint().setValue(\"=TotalMonthlyIncome\")\n        dataBar.setBarFillType(DataBarFillType.Gradient)\n        dataBar.getBarColor().setColor(Color.GetRed())\n        dataBar.setShowValue(false)\n\n        //--------------------------------Set Shape--------------------------------\n        val shape = worksheet.getShapes().addChart(ChartType.ColumnClustered, 339.0, 247.0, 316.5, 346.0)\n        shape.getChart().getChartArea().getFormat().getLine().setTransparency(1.0)\n        shape.getChart().getColumnGroups().get(0).setOverlap(0)\n        shape.getChart().getColumnGroups().get(0).setGapWidth(37)\n\n        val category_axis = shape.getChart().getAxes().item(AxisType.Category)\n        category_axis.getFormat().getLine().getColor().setRGB(Color.GetBlack())\n        category_axis.getTickLabels().getFont().setSize(11.0)\n        category_axis.getTickLabels().getFont().getColor().setRGB(Color.GetBlack())\n\n        val series_axis = shape.getChart().getAxes().item(AxisType.Value)\n        series_axis.getFormat().getLine().setWeight(1.0)\n        series_axis.getFormat().getLine().getColor().setRGB(Color.GetBlack())\n        series_axis.getTickLabels().setNumberFormat(\"$###0\")\n        series_axis.getTickLabels().getFont().setSize(11.0)\n        series_axis.getTickLabels().getFont().getColor().setRGB(Color.GetBlack())\n\n        val chartSeries = shape.getChart().getSeriesCollection().newSeries()\n        chartSeries.setFormula(\"=SERIES(\\\"Simple Budget\\\",{\\\"Income\\\",\\\"Expenses\\\"},'Sheet1'!\\$G$6:\\$G$7,1)\")\n        chartSeries.getPoints().get(0).getFormat().getFill().getColor().setRGB(Color.FromArgb(176, 21, 19))\n        chartSeries.getPoints().get(1).getFormat().getFill().getColor().setRGB(Color.FromArgb(234, 99, 18))\n        chartSeries.getDataLabels().getFont().setSize(11.0)\n        chartSeries.getDataLabels().getFont().getColor().setRGB(Color.GetBlack())\n        chartSeries.getDataLabels().setShowValue(true)\n        chartSeries.getDataLabels().setPosition(DataLabelPosition.OutsideEnd)\n    ",
  "com.grapecity.documents.excel.examples.showcase.BloodPressureTracker": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //theme\n        //create a custom theme.\n        val theme = Theme(\"testTheme\")\n        theme.themeColorScheme.get(ThemeColor.Light1).rgb = Color.FromArgb(255, 255, 255)\n        theme.themeColorScheme.get(ThemeColor.Dark1).rgb = Color.FromArgb(0, 0, 0)\n        theme.themeColorScheme.get(ThemeColor.Light2).rgb = Color.FromArgb(222, 222, 212)\n        theme.themeColorScheme.get(ThemeColor.Dark2).rgb = Color.FromArgb(30, 46, 47)\n        theme.themeColorScheme.get(ThemeColor.Accent1).rgb = Color.FromArgb(233, 117, 90)\n        theme.themeColorScheme.get(ThemeColor.Accent2).rgb = Color.FromArgb(122, 182, 186)\n        theme.themeColorScheme.get(ThemeColor.Accent3).rgb = Color.FromArgb(125, 181, 135)\n        theme.themeColorScheme.get(ThemeColor.Accent4).rgb = Color.FromArgb(230, 191, 94)\n        theme.themeColorScheme.get(ThemeColor.Accent5).rgb = Color.FromArgb(230, 143, 77)\n        theme.themeColorScheme.get(ThemeColor.Accent6).rgb = Color.FromArgb(194, 107, 112)\n        theme.themeColorScheme.get(ThemeColor.Hyperlink).rgb = Color.FromArgb(122, 182, 186)\n        theme.themeColorScheme.get(ThemeColor.FollowedHyperlink).rgb = Color.FromArgb(166, 140, 177)\n        theme.themeFontScheme.major.get(FontLanguageIndex.Latin).name = \"Gill Sans\"\n        theme.themeFontScheme.minor.get(FontLanguageIndex.Latin).name = \"Gill Sans\"\n\n        //assign the custom theme for workbook.\n        workbook.theme = theme\n\n        //does not show sheet gridlines.\n        worksheet.sheetView.displayGridlines = false\n\n        //RowHeightColumnWidth\n        //set row height and column width.\n        worksheet.standardHeight = 12.75\n        worksheet.standardWidth = 8.43\n        worksheet.rows.get(1).rowHeight = 32.25\n        worksheet.rows.get(2).rowHeight = 13.5\n        worksheet.rows.get(3).rowHeight = 18.75\n        worksheet.rows.get(6).rowHeight = 18.75\n        worksheet.rows.get(9).rowHeight = 18.75\n        worksheet.rows.get(12).rowHeight = 18.75\n        worksheet.rows.get(15).rowHeight = 19.5\n        worksheet.rows.get(16).rowHeight = 13.5\n        worksheet.rows.get(33).rowHeight = 19.5\n        worksheet.rows.get(34).rowHeight = 13.5\n\n        worksheet.columns.get(0).columnWidth = 1.7109375\n        worksheet.columns.get(1).columnWidth = 12.140625\n        worksheet.columns.get(2).columnWidth = 12.140625\n        worksheet.columns.get(3).columnWidth = 12.140625\n        worksheet.columns.get(4).columnWidth = 11.85546875\n        worksheet.columns.get(5).columnWidth = 12.7109375\n        worksheet.columns.get(6).columnWidth = 13.85546875\n        worksheet.columns.get(7).columnWidth = 44.7109375\n\n        //Values\n        //initialize worksheet's values.\n        worksheet.name = \"BLOOD PRESSURE DATA\"\n        worksheet.getRange(\"B2\").value = \"BLOOD PRESSURE TRACKER\"\n        worksheet.getRange(\"B4:F13\").value = arrayOf(arrayOf<Any?>(\"NAME\", null, null, null, null), arrayOf<Any?>(null, null, null, null, null), arrayOf<Any?>(null, null, null, \"Systolic\", \"Diastolic\"), arrayOf<Any?>(\"TARGET BLOOD PRESSURE\", null, null, 120, 80), arrayOf<Any?>(null, null, null, null, null), arrayOf<Any?>(null, null, null, \"Systolic\", \"Diastolic\"), arrayOf<Any?>(\"CALL PHYSICIAN IF ABOVE\", null, null, 140, 90), arrayOf<Any?>(null, null, null, null, null), arrayOf<Any?>(null, null, null, null, null), arrayOf<Any?>(\"PHYSICIAN PHONE NUMBER\", null, null, \"[Phone Number]\", null))\n        worksheet.getRange(\"B16\").value = \"CHARTED PROGRESS\"\n        worksheet.getRange(\"B34\").value = \"DATA ENTRY\"\n\n        //Table\n        //initialize table data.\n        worksheet.getRange(\"B36:H44\").value = arrayOf(arrayOf<Any?>(\"TIME\", \"DATE\", \"AM/PM\", \"SYSTOLIC\", \"DIASTOLIC\", \"HEART RATE\", \"NOTES\"), arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 10, 0, 0), GregorianCalendar(2013, 6, 1), \"AM\", 129, 99, 72, null), arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 18, 0, 0), GregorianCalendar(2013, 6, 1), \"PM\", 133, 80, 75, null), arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 10, 30, 0), GregorianCalendar(2013, 6, 2), \"AM\", 142, 86, 70, null), arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 19, 0, 0), GregorianCalendar(2013, 6, 2), \"PM\", 141, 84, 68, null), arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 9, 0, 0), GregorianCalendar(2013, 6, 2), \"AM\", 137, 84, 70, null), arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 18, 30, 0), GregorianCalendar(2013, 6, 3), \"PM\", 139, 83, 72, null), arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 10, 0, 0), GregorianCalendar(2013, 6, 4), \"AM\", 140, 85, 78, null), arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 18, 0, 0), GregorianCalendar(2013, 6, 4), \"PM\", 138, 85, 69, null))\n        val table = worksheet.tables.add(worksheet.getRange(\"B36:H44\"), true)\n        table.showTotals = true\n\n        //set total row formulas.\n        table.columns.get(0).total.value = \"Average\"\n        table.columns.get(3).totalsCalculation = TotalsCalculation.Average\n        table.columns.get(4).totalsCalculation = TotalsCalculation.Average\n        table.columns.get(5).totalsCalculation = TotalsCalculation.Average\n        table.columns.get(6).totalsCalculation = TotalsCalculation.None\n\n        //config data body range and total range's number format.\n        table.columns.get(0).dataBodyRange.numberFormat = \"h:mm;@\"\n        table.columns.get(1).dataBodyRange.numberFormat = \"m/d/yyyy\"\n        table.columns.get(3).dataBodyRange.numberFormat = \"0\"\n        table.columns.get(4).dataBodyRange.numberFormat = \"0\"\n        table.columns.get(5).dataBodyRange.numberFormat = \"0\"\n        table.columns.get(3).total.numberFormat = \"0\"\n        table.columns.get(4).total.numberFormat = \"0\"\n        table.columns.get(5).total.numberFormat = \"0\"\n\n        //config table range's alignment.\n        table.range.horizontalAlignment = HorizontalAlignment.Left\n        table.range.indentLevel = 0\n        table.range.verticalAlignment = VerticalAlignment.Center\n\n        //TableStyle\n        //create a custom table style.\n        val tablestyle = workbook.tableStyles.add(\"testStyle\")\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).font.themeColor = ThemeColor.Dark1\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).font.tintAndShade = 0.25\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeTop).lineStyle = BorderLineStyle.Thin\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeTop).themeColor = ThemeColor.Accent1\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeTop).tintAndShade = 0.4\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.InsideHorizontal).lineStyle = BorderLineStyle.Thin\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.InsideHorizontal).themeColor = ThemeColor.Accent1\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.InsideHorizontal).tintAndShade = 0.4\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thin\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeBottom).themeColor = ThemeColor.Accent1\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeBottom).tintAndShade = 0.4\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeLeft).lineStyle = BorderLineStyle.Thin\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeLeft).themeColor = ThemeColor.Accent1\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeLeft).tintAndShade = 0.4\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeRight).lineStyle = BorderLineStyle.Thin\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeRight).themeColor = ThemeColor.Accent1\n        tablestyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeRight).tintAndShade = 0.4\n\n        tablestyle.tableStyleElements.get(TableStyleElementType.FirstRowStripe).interior.themeColor = ThemeColor.Accent1\n        tablestyle.tableStyleElements.get(TableStyleElementType.FirstRowStripe).interior.tintAndShade = 0.8\n\n        tablestyle.tableStyleElements.get(TableStyleElementType.HeaderRow).font.bold = true\n        tablestyle.tableStyleElements.get(TableStyleElementType.HeaderRow).font.themeColor = ThemeColor.Dark1\n        tablestyle.tableStyleElements.get(TableStyleElementType.HeaderRow).font.tintAndShade = 0.25\n        tablestyle.tableStyleElements.get(TableStyleElementType.HeaderRow).interior.themeColor = ThemeColor.Accent1\n\n        tablestyle.tableStyleElements.get(TableStyleElementType.TotalRow).font.bold = true\n        tablestyle.tableStyleElements.get(TableStyleElementType.TotalRow).font.themeColor = ThemeColor.Dark1\n        tablestyle.tableStyleElements.get(TableStyleElementType.TotalRow).font.tintAndShade = 0.25\n        tablestyle.tableStyleElements.get(TableStyleElementType.TotalRow).borders.get(BordersIndex.EdgeTop).lineStyle = BorderLineStyle.Double\n        tablestyle.tableStyleElements.get(TableStyleElementType.TotalRow).borders.get(BordersIndex.EdgeTop).themeColor = ThemeColor.Accent1\n\n        //assign custom table style for table.\n        table.tableStyle = workbook.tableStyles.get(\"testStyle\")\n\n        //Style\n        //assign built-in styles for ranges.\n        worksheet.getRange(\"B2:H2\").style = workbook.styles.get(\"Heading 1\")\n        worksheet.getRange(\"B4:F4, B7:D7, B10:D10, B13:D13\").style = workbook.styles.get(\"Heading 2\")\n        worksheet.getRange(\"B16:H16, B34:H34\").style = workbook.styles.get(\"Heading 3\")\n\n        //modify built-in styles.\n        val style_Heading1 = workbook.styles.get(\"Heading 1\")\n        style_Heading1.horizontalAlignment = HorizontalAlignment.General\n        style_Heading1.verticalAlignment = VerticalAlignment.Center\n        style_Heading1.font.themeFont = ThemeFont.Major\n        style_Heading1.font.size = 24.0\n        style_Heading1.font.bold = true\n        style_Heading1.font.themeColor = ThemeColor.Accent1\n        style_Heading1.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thick\n        style_Heading1.borders.get(BordersIndex.EdgeBottom).themeColor = ThemeColor.Accent1\n\n        style_Heading1.includeAlignment = true\n        style_Heading1.includeFont = true\n        style_Heading1.includeBorder = true\n        style_Heading1.includeNumber = false\n        style_Heading1.includePatterns = false\n        style_Heading1.includeProtection = false\n\n        val style_Heading2 = workbook.styles.get(\"Heading 2\")\n        style_Heading2.horizontalAlignment = HorizontalAlignment.General\n        style_Heading2.verticalAlignment = VerticalAlignment.Bottom\n        style_Heading2.font.themeFont = ThemeFont.Minor\n        style_Heading2.font.size = 14.0\n        style_Heading2.font.themeColor = ThemeColor.Dark1\n        style_Heading2.font.tintAndShade = 0.25\n        style_Heading2.font.bold = false\n        style_Heading2.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Dotted\n        style_Heading2.borders.get(BordersIndex.EdgeBottom).themeColor = ThemeColor.Light1\n        style_Heading2.borders.get(BordersIndex.EdgeBottom).tintAndShade = -0.5\n\n        style_Heading2.includeAlignment = true\n        style_Heading2.includeFont = true\n        style_Heading2.includeBorder = true\n        style_Heading2.includeNumber = false\n        style_Heading2.includePatterns = false\n        style_Heading2.includeProtection = false\n\n        val style_Heading3 = workbook.styles.get(\"Heading 3\")\n        style_Heading3.horizontalAlignment = HorizontalAlignment.General\n        style_Heading3.verticalAlignment = VerticalAlignment.Center\n        style_Heading3.font.themeFont = ThemeFont.Minor\n        style_Heading3.font.size = 14.0\n        style_Heading3.font.bold = true\n        style_Heading3.font.themeColor = ThemeColor.Dark1\n        style_Heading3.font.tintAndShade = 0.25\n        style_Heading3.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thick\n        style_Heading3.borders.get(BordersIndex.EdgeBottom).themeColor = ThemeColor.Accent2\n\n        style_Heading3.includeAlignment = true\n        style_Heading3.includeFont = true\n        style_Heading3.includeBorder = true\n        style_Heading3.includeNumber = false\n        style_Heading3.includePatterns = false\n        style_Heading3.includeProtection = false\n\n        val style_Normal = workbook.styles.get(\"Normal\")\n        style_Normal.numberFormat = \"General\"\n        style_Normal.horizontalAlignment = HorizontalAlignment.General\n        style_Normal.verticalAlignment = VerticalAlignment.Center\n        style_Normal.font.themeFont = ThemeFont.Minor\n        style_Normal.font.size = 10.0\n        style_Normal.font.themeColor = ThemeColor.Dark1\n        style_Normal.font.tintAndShade = 0.25\n\n        style_Normal.includeAlignment = true\n        style_Normal.includeFont = true\n        style_Normal.includeBorder = true\n        style_Normal.includeNumber = true\n        style_Normal.includePatterns = true\n        style_Normal.includeProtection = true\n\n        //modify cell styles.\n        worksheet.getRange(\"B4\").borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.None\n        worksheet.getRange(\"C4:F4\").borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thin\n        val range1 = worksheet.getRange(\"E7:F7, E10:F10\")\n        range1.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Dotted\n        range1.borders.get(BordersIndex.EdgeBottom).themeColor = ThemeColor.Light1\n        range1.borders.get(BordersIndex.EdgeBottom).tintAndShade = -0.5\n        range1.font.bold = true\n        val range2 = worksheet.getRange(\"E7, E10\")\n        range2.borders.get(BordersIndex.EdgeRight).lineStyle = BorderLineStyle.Thin\n        range2.borders.get(BordersIndex.EdgeRight).themeColor = ThemeColor.Light1\n        range2.borders.get(BordersIndex.EdgeRight).tintAndShade = -0.5\n\n        //Chart\n        //create a new chart.\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 8.99984251968504, 268.5, 627.750157480315, 184.5)\n\n        //create series for chart.\n        val series_systolic = shape.chart.seriesCollection.newSeries()\n        val series_diatolic = shape.chart.seriesCollection.newSeries()\n        val series_HeartRate = shape.chart.seriesCollection.newSeries()\n\n        //set series formulas.\n        series_systolic.formula = \"=SERIES('BLOOD PRESSURE DATA'!\\$E$36,'BLOOD PRESSURE DATA'!\\$C$37:\\$D$44,'BLOOD PRESSURE DATA'!\\$E$37:\\$E$44,1)\"\n        series_diatolic.formula = \"=SERIES('BLOOD PRESSURE DATA'!\\$F$36,'BLOOD PRESSURE DATA'!\\$C$37:\\$D$44,'BLOOD PRESSURE DATA'!\\$F$37:\\$F$44,2)\"\n\n        //set series plot on secondary axis, and change its chart type.\n        series_HeartRate.axisGroup = AxisGroup.Secondary\n        series_HeartRate.chartType = ChartType.Line\n        series_HeartRate.formula = \"=SERIES('BLOOD PRESSURE DATA'!\\$G$36,,'BLOOD PRESSURE DATA'!\\$G$37:\\$G$44,3)\"\n\n        //set series fill to gradient fill.\n        series_systolic.format.fill.twoColorGradient(GradientStyle.Horizontal, 1)\n        series_systolic.format.fill.gradientAngle = 270.0\n        series_systolic.format.fill.gradientStops.get(0).color.rgb = Color.FromArgb(255, 172, 175)\n        series_systolic.format.fill.gradientStops.get(1).color.rgb = Color.FromArgb(255, 227, 228)\n        series_systolic.format.fill.gradientStops.insert(0xFEC6C8, 0.35)\n        series_systolic.format.line.color.objectThemeColor = ThemeColor.Accent6\n\n        series_diatolic.format.fill.twoColorGradient(GradientStyle.Horizontal, 1)\n        series_diatolic.format.fill.gradientAngle = 270.0\n        series_diatolic.format.fill.gradientStops.get(0).color.rgb = Color.FromArgb(255, 192, 147)\n        series_diatolic.format.fill.gradientStops.get(1).color.rgb = Color.FromArgb(255, 227, 212)\n        series_diatolic.format.fill.gradientStops.insert(0xFFCBA9, 0.35)\n        series_diatolic.format.line.color.objectThemeColor = ThemeColor.Accent5\n\n        //set series gap width and overlap.\n        shape.chart.columnGroups.get(0).gapWidth = 150\n        shape.chart.columnGroups.get(0).overlap = 0\n\n        //set series line style.\n        series_HeartRate.format.line.beginArrowheadLength = ArrowheadLength.Medium\n        series_HeartRate.format.line.beginArrowheadStyle = ArrowheadStyle.None\n        series_HeartRate.format.line.beginArrowheadWidth = ArrowheadWidth.Medium\n        series_HeartRate.format.line.color.objectThemeColor = ThemeColor.Accent4\n        series_HeartRate.format.line.color.tintAndShade = 0.0\n        series_HeartRate.format.line.dashStyle = LineDashStyle.Solid\n        series_HeartRate.format.line.endArrowheadLength = ArrowheadLength.Medium\n        series_HeartRate.format.line.endArrowheadStyle = ArrowheadStyle.None\n        series_HeartRate.format.line.endArrowheadWidth = ArrowheadWidth.Medium\n        series_HeartRate.format.line.style = LineStyle.Single\n        series_HeartRate.format.line.weight = 1.25\n\n        val primary_axis = shape.chart.axes.item(AxisType.Value, AxisGroup.Primary)\n        primary_axis.hasTitle = true\n        primary_axis.axisTitle.text = \"BLOOD PRESSURE\"\n        primary_axis.axisTitle.includeInLayout = true\n\n        val secondary_axis = shape.chart.axes.item(AxisType.Value, AxisGroup.Secondary)\n        secondary_axis.hasTitle = true\n        secondary_axis.axisTitle.text = \"HEART RATE\"\n        secondary_axis.axisTitle.includeInLayout = true\n\n        val category_axis = shape.chart.axes.item(AxisType.Category, AxisGroup.Primary)\n        category_axis.hasTitle = true\n        category_axis.categoryType = CategoryType.CategoryScale\n        category_axis.format.line.color.colorType = SolidColorType.None\n\n        shape.chart.hasTitle = false\n        //set chart font style.\n        shape.chart.chartArea.font.size = 9.0\n        shape.chart.chartArea.font.color.objectThemeColor = ThemeColor.Dark1\n        shape.chart.chartArea.font.color.brightness = 0.5\n\n\n        //Shape\n        val shape1 = worksheet.shapes.addShape(AutoShapeType.Rectangle, 402.0, 77.25, 234.0, 100.0)\n        shape1.fill.solid()\n        shape1.fill.color.objectThemeColor = ThemeColor.Accent1\n        shape1.fill.color.brightness = 0.6\n        //set shape's border to no line.\n        shape1.line.color.colorType = SolidColorType.None\n\n        //set shape rich text.\n        val shape1_p1 = shape1.textFrame.textRange.paragraphs.get(0)\n        shape1_p1.text = \"*\"\n        shape1_p1.runs.add(\" Blood pressures may vary dependent on many\")\n        shape1_p1.runs.add(\" factors.  Always consult with a physician about what is normal for you.  These numbers may vary slightly.\")\n\n        val shape1_p2 = shape1.textFrame.textRange.paragraphs.add(\"\")\n        val shape1_p3 = shape1.textFrame.textRange.paragraphs.add(\"Info from National Institute of Health:\")\n        val shape1_p4 = shape1.textFrame.textRange.paragraphs.add(\"http://www.nhlbi.nih.gov/health/health-topics/topics/hbp/\")\n\n        shape1.textFrame.textRange.font.size = 10.0\n        shape1.textFrame.textRange.font.themeFont = ThemeFont.Minor\n        shape1.textFrame.textRange.font.color.objectThemeColor = ThemeColor.Dark1\n        shape1.textFrame.textRange.font.color.brightness = 0.25\n        shape1_p3.runs.get(0).font.bold = true\n\n        val shape2 = worksheet.shapes.addShape(AutoShapeType.Rectangle, 421.5, 546.75, 198.0, 50.0)\n        shape2.fill.solid()\n        shape2.fill.color.objectThemeColor = ThemeColor.Accent3\n        shape2.fill.color.brightness = 0.6\n        //set shape's border to no line.\n        shape2.line.color.colorType = SolidColorType.None\n\n        val shape2_p1 = shape2.textFrame.textRange.paragraphs.get(0)\n        shape2_p1.text = \"NOTE:\"\n        shape2_p1.runs.add(\" Any blood pressure readings over the indicated numbers (\\\"CALL PHYSICIAN IF ABOVE\\\") will be\")\n        shape2_p1.runs.add(\" highlighted.\")\n\n        shape2.textFrame.textRange.font.size = 10.0\n        shape2.textFrame.textRange.font.themeFont = ThemeFont.Minor\n        shape2.textFrame.textRange.font.color.objectThemeColor = ThemeColor.Dark1\n        shape2.textFrame.textRange.font.color.brightness = 0.25\n        shape2_p1.runs.get(0).font.bold = true\n\n        //DefinedName\n        //create defined names for workbook.\n        workbook.names.add(\"MaxDiastolic\", \"='BLOOD PRESSURE DATA'!\\$F$10\")\n        workbook.names.add(\"MaxSystolic\", \"='BLOOD PRESSURE DATA'!\\$E$10\")\n\n        //ConditionalFormat\n        //create conditional format for ranges.\n        val condition1 = worksheet.getRange(\"E37:E44\").formatConditions.add(FormatConditionType.Expression, FormatConditionOperator.Between, \"=E37>MaxSystolic\", null) as IFormatCondition\n        val condition2 = worksheet.getRange(\"F37:F44\").formatConditions.add(FormatConditionType.Expression, FormatConditionOperator.Between, \"=F37>MaxDiastolic\", null) as IFormatCondition\n        condition1.interior.color = Color.GetRed()\n        condition2.interior.color = Color.GetRed()\n\n    ",
  "com.grapecity.documents.excel.examples.showcase.MovieList": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //------------------Set RowHeight & ColumnWidth----------------\n        worksheet.standardHeight = 43.5\n        worksheet.standardWidth = 8.43\n\n        worksheet.getRange(\"1:1\").rowHeight = 171.0\n        worksheet.getRange(\"2:2\").rowHeight = 12.75\n        worksheet.getRange(\"3:3\").rowHeight = 22.5\n        worksheet.getRange(\"4:7\").rowHeight = 43.75\n        worksheet.getRange(\"A:A\").columnWidth = 2.887\n        worksheet.getRange(\"B:B\").columnWidth = 8.441\n        worksheet.getRange(\"C:C\").columnWidth = 12.777\n        worksheet.getRange(\"D:D\").columnWidth = 25.109\n        worksheet.getRange(\"E:E\").columnWidth = 12.109\n        worksheet.getRange(\"F:F\").columnWidth = 41.664\n        worksheet.getRange(\"G:G\").columnWidth = 18.555\n        worksheet.getRange(\"H:H\").columnWidth = 11.0\n        worksheet.getRange(\"I:I\").columnWidth = 13.664\n        worksheet.getRange(\"J:J\").columnWidth = 15.109\n        worksheet.getRange(\"K:K\").columnWidth = 38.887\n        worksheet.getRange(\"L:L\").columnWidth = 2.887\n\n\n        //------------------------Set Table Values-------------------\n        val table = worksheet.tables.add(worksheet.getRange(\"B3:K7\"), true)\n        worksheet.getRange(\"B3:K7\").value = arrayOf(arrayOf<Any?>(\"NO.\", \"YEAR\", \"TITLE\", \"REVIEW\", \"STARRING ACTORS\", \"DIRECTOR\", \"GENRE\", \"RATING\", \"FORMAT\", \"COMMENTS\"), arrayOf(1, 1994, \"Forrest Gump\", \"5 Stars\", \"Tom Hanks, Robin Wright, Gary Sinise\", \"Robert Zemeckis\", \"Drama\", \"PG-13\", \"DVD\", \"Based on the 1986 novel of the same name by Winston Groom\"), arrayOf(2, 1946, \"It’s a Wonderful Life\", \"2 Stars\", \"James Stewart, Donna Reed, Lionel Barrymore \", \"Frank Capra\", \"Drama\", \"G\", \"VHS\", \"Colorized version\"), arrayOf(3, 1988, \"Big\", \"4 Stars\", \"Tom Hanks, Elizabeth Perkins, Robert Loggia \", \"Penny Marshall\", \"Comedy\", \"PG\", \"DVD\", \"\"), arrayOf(4, 1954, \"Rear Window\", \"3 Stars\", \"James Stewart, Grace Kelly, Wendell Corey \", \"Alfred Hitchcock\", \"Suspense\", \"PG\", \"Blu-ray\", \"\"))\n\n\n        //-----------------------Set Table style--------------------\n        val tableStyle = workbook.tableStyles.add(\"Movie List\")\n        workbook.defaultTableStyle = \"Movie List\"\n\n        tableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).interior.color = Color.GetWhite()\n\n        tableStyle.tableStyleElements.get(TableStyleElementType.FirstRowStripe).interior.color = Color.FromArgb(38, 38, 38)\n\n        tableStyle.tableStyleElements.get(TableStyleElementType.SecondRowStripe).interior.color = Color.GetBlack()\n\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).font.color = Color.GetBlack()\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).borders.color = Color.FromArgb(38, 38, 38)\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).interior.color = Color.FromArgb(68, 217, 255)\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).borders.get(BordersIndex.EdgeTop).lineStyle = BorderLineStyle.Thick\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).borders.get(BordersIndex.EdgeLeft).lineStyle = BorderLineStyle.None\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).borders.get(BordersIndex.EdgeRight).lineStyle = BorderLineStyle.None\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.None\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).borders.get(BordersIndex.InsideHorizontal).lineStyle = BorderLineStyle.None\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).borders.get(BordersIndex.InsideVertical).lineStyle = BorderLineStyle.None\n\n\n        //--------------------------------Set Named Styles---------------------\n        val movieListBorderStyle = workbook.styles.add(\"Movie list border\")\n        movieListBorderStyle.includeNumber = true\n        movieListBorderStyle.includeAlignment = true\n        movieListBorderStyle.verticalAlignment = VerticalAlignment.Center\n        movieListBorderStyle.wrapText = true\n        movieListBorderStyle.includeFont = true\n        movieListBorderStyle.font.name = \"Helvetica\"\n        movieListBorderStyle.font.size = 11.0\n        movieListBorderStyle.font.color = Color.GetWhite()\n        movieListBorderStyle.includeBorder = true\n        movieListBorderStyle.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thick\n        movieListBorderStyle.borders.get(BordersIndex.EdgeBottom).color = Color.FromArgb(38, 38, 38)\n        movieListBorderStyle.includePatterns = true\n        movieListBorderStyle.interior.color = Color.FromArgb(238, 219, 78)\n\n        val nOStyle = workbook.styles.add(\"NO.\")\n        nOStyle.includeNumber = true\n        nOStyle.includeAlignment = true\n        nOStyle.horizontalAlignment = HorizontalAlignment.Left\n        nOStyle.verticalAlignment = VerticalAlignment.Center\n        nOStyle.includeFont = true\n        nOStyle.font.name = \"Helvetica\"\n        nOStyle.font.size = 11.0\n        nOStyle.font.color = Color.GetWhite()\n        nOStyle.includeBorder = true\n        nOStyle.includePatterns = true\n        nOStyle.interior.color = Color.FromArgb(38, 38, 38)\n\n        val reviewStyle = workbook.styles.add(\"Review\")\n        reviewStyle.includeNumber = true\n        reviewStyle.includeAlignment = true\n        reviewStyle.verticalAlignment = VerticalAlignment.Center\n        reviewStyle.includeFont = true\n        reviewStyle.font.name = \"Helvetica\"\n        reviewStyle.font.size = 11.0\n        reviewStyle.font.color = Color.GetWhite()\n        reviewStyle.includeBorder = true\n        reviewStyle.includePatterns = true\n        reviewStyle.interior.color = Color.FromArgb(38, 38, 38)\n\n        val yearStyle = workbook.styles.add(\"Year\")\n        yearStyle.includeNumber = true\n        yearStyle.includeAlignment = true\n        yearStyle.horizontalAlignment = HorizontalAlignment.Left\n        yearStyle.verticalAlignment = VerticalAlignment.Center\n        yearStyle.includeFont = true\n        yearStyle.font.name = \"Helvetica\"\n        yearStyle.font.size = 11.0\n        yearStyle.font.color = Color.GetWhite()\n        yearStyle.includeBorder = true\n        yearStyle.includePatterns = true\n        yearStyle.interior.color = Color.FromArgb(38, 38, 38)\n\n        val heading1Style = workbook.styles.get(\"Heading 1\")\n        heading1Style.includeAlignment = true\n        heading1Style.verticalAlignment = VerticalAlignment.Bottom\n        heading1Style.includeBorder = true\n        heading1Style.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thick\n        heading1Style.borders.get(BordersIndex.EdgeBottom).color = Color.FromArgb(68, 217, 255)\n        heading1Style.includeFont = true\n        heading1Style.font.name = \"Helvetica\"\n        heading1Style.font.bold = false\n        heading1Style.font.size = 12.0\n        heading1Style.font.color = Color.GetBlack()\n\n        val normalStyle = workbook.styles.get(\"Normal\")\n        normalStyle.includeNumber = true\n        normalStyle.includeAlignment = true\n        normalStyle.verticalAlignment = VerticalAlignment.Center\n        normalStyle.wrapText = true\n        normalStyle.includeFont = true\n        normalStyle.font.name = \"Helvetica\"\n        normalStyle.font.size = 11.0\n        normalStyle.font.color = Color.GetWhite()\n        normalStyle.includePatterns = true\n        normalStyle.interior.color = Color.FromArgb(38, 38, 38)\n\n\n        //-----------------------------Use NamedStyle--------------------------\n        worksheet.sheetView.displayGridlines = false\n        worksheet.tabColor = Color.FromArgb(38, 38, 38)\n        table.tableStyle = tableStyle\n\n        worksheet.getRange(\"A2:L2\").style = movieListBorderStyle\n        worksheet.getRange(\"B3:K3\").style = heading1Style\n        worksheet.getRange(\"B4:B7\").style = nOStyle\n        worksheet.getRange(\"C4:C7\").style = yearStyle\n        worksheet.getRange(\"E4:E7\").style = reviewStyle\n        worksheet.getRange(\"F4:F7\").indentLevel = 1\n        worksheet.getRange(\"F4:F7\").horizontalAlignment = HorizontalAlignment.Left\n\n\n        //-----------------------------Add Shapes------------------------------\n        //Movie picture\n        val stream = this.getResourceStream(\"movie.png\")\n\n        //Movie list picture\n        val stream2 = this.getResourceStream(\"list.png\")\n        try {\n            val pictureShape = worksheet.shapes.addPicture(stream, ImageType.PNG, 0.0, 1.0, worksheet.getRange(\"A:L\").width, worksheet.getRange(\"1:1\").height - 1.5)\n            pictureShape.placement = Placement.Move\n\n            val pictureShape2 = worksheet.shapes.addPicture(stream2, ImageType.PNG, 1.0, 0.8, 325.572, 85.51)\n            pictureShape2.placement = Placement.Move\n\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n\n        //Rounded Rectangular Callout 7\n        val roundedRectangular = worksheet.shapes.addShape(AutoShapeType.RoundedRectangularCallout, 437.5, 22.75, 342.0, 143.0)\n        roundedRectangular.name = \"Rounded Rectangular Callout 7\"\n        roundedRectangular.placement = Placement.Move\n        roundedRectangular.textFrame.textRange.font.name = \"Helvetica\"\n        roundedRectangular.textFrame.textRange.font.color.rgb = Color.FromArgb(38, 38, 38)\n\n        roundedRectangular.fill.solid()\n        roundedRectangular.fill.color.rgb = Color.FromArgb(68, 217, 255)\n        roundedRectangular.fill.transparency = 0.0\n        roundedRectangular.line.solid()\n        roundedRectangular.line.color.rgb = Color.FromArgb(0, 129, 162)\n        roundedRectangular.line.weight = 2.0\n        roundedRectangular.line.transparency = 0.0\n\n        val roundedRectangular_p0 = roundedRectangular.textFrame.textRange.paragraphs.get(0)\n        roundedRectangular_p0.runs.font.bold = true\n        roundedRectangular_p0.runs.add(\"TABLE\")\n        roundedRectangular_p0.runs.add(\" TIP\")\n\n        roundedRectangular.textFrame.textRange.paragraphs.add(\"\")\n\n        val roundedRectangular_p2 = roundedRectangular.textFrame.textRange.paragraphs.add()\n        roundedRectangular_p2.runs.add(\"Use the drop down arrows in the table headings to quickly filter your movie list. \" +\n                \"For multiple entry fields, such as Starring Actors,  select the drop down arrow next to the field and enter text in the Search box. \" +\n                \"For example, type Tom Hanks or James Stewart, and then select OK.\")\n\n        roundedRectangular.textFrame.textRange.paragraphs.add(\"\")\n\n        val roundedRectangular_p4 = roundedRectangular.textFrame.textRange.paragraphs.add()\n        roundedRectangular_p4.runs.add(\"To delete this note, click the edge to select it and then press \")\n        roundedRectangular_p4.runs.add(\"Delete\")\n        roundedRectangular_p4.runs.add(\".\")\n        roundedRectangular_p4.runs.get(2).font.bold = true\n\n        roundedRectangular.textFrame.textRange.paragraphs.add(\"\")\n\n        //Add Stright Line Shape\n        val lineShape = worksheet.shapes.addConnector(ConnectorType.Straight, 455.228f, 57.35f, 756.228f, 57.35f)\n        lineShape.line.solid()\n        lineShape.line.weight = 3.0\n        lineShape.line.color.rgb = Color.FromArgb(38, 38, 38)\n        lineShape.line.dashStyle = LineDashStyle.SysDot\n\n    ",
  "com.grapecity.documents.excel.examples.showcase.EventBudget": "\n\n        //Load template file Event budget.xlsx from resource\n        workbook.open(this.getResourceStream(\"xlsx/Event budget.xlsx\")!!)\n\n        val worksheet = workbook.activeSheet\n\n        //change range B2's font size.\n        worksheet.getRange(\"B2\").font.size = 22.0\n\n        //change range E4's font style to bold.\n        worksheet.getRange(\"E4\").font.bold = true\n\n        //change table style.\n        worksheet.tables.get(\"tblAdmissions\").tableStyle = workbook.tableStyles.get(\"TableStyleLight10\")\n        worksheet.tables.get(\"tblAds\").tableStyle = workbook.tableStyles.get(\"TableStyleLight10\")\n        worksheet.tables.get(\"tblVendors\").tableStyle = workbook.tableStyles.get(\"TableStyleLight10\")\n        worksheet.tables.get(\"tblItems\").tableStyle = workbook.tableStyles.get(\"TableStyleLight10\")\n\n        //modify range F4:G5's cell style.\n        worksheet.getRange(\"F4:G5\").interior.themeColor = ThemeColor.Light1\n        worksheet.getRange(\"F4:G5\").interior.tintAndShade = -0.15\n        worksheet.getRange(\"F4:G5\").font.themeFont = ThemeFont.Major\n        worksheet.getRange(\"F4:G5\").font.size = 12.0\n        worksheet.getRange(\"F4:G5\").borders.get(BordersIndex.InsideHorizontal).lineStyle = BorderLineStyle.None\n        worksheet.getRange(\"F5:G5\").numberFormat = \"$#,##0.00\"\n\n        //modify table columns' style.\n        worksheet.getRange(\"F8:G11, F15:G18, F22:G25, F29:G33\").interior.themeColor = ThemeColor.Light1\n        worksheet.getRange(\"F8:G11, F15:G18, F22:G25, F29:G33\").interior.tintAndShade = -0.15\n        worksheet.getRange(\"E8:G11, E15:G18, E22:G25, E29:G33\").numberFormat = \"$#,##0.00\"\n\n    ",
  "com.grapecity.documents.excel.examples.showcase.SimpleInvoice": "\n\n        //Load template file Simple invoice.xlsx from resource\n        workbook.open(this.getResourceStream(\"xlsx/Simple invoice.xlsx\")!!)\n\n        val worksheet = workbook.activeSheet\n\n        // fill some new items\n        worksheet.getRange(\"E09:H09\").value = arrayOf(\"DD1-001\", \"Item 3\", 5.60, 12)\n        worksheet.getRange(\"E10:H10\").value = arrayOf(\"DD2-001\", \"Item 3\", 8.5, 14)\n        worksheet.getRange(\"E11:H11\").value = arrayOf(\"DD3-001\", \"Item 3\", 9.6, 16)\n\n    ",
  "com.grapecity.documents.excel.examples.showcase.CustomerProfitabilityAnalysis": "\n\n        val data = arrayOf(arrayOf<Any?>(null, \"[Segment Name]\", \"[Segment Name]\", \"[Segment Name]\", \"Overall\"), arrayOf<Any?>(\"Customer Activity:\", null, null, null, null), arrayOf<Any?>(\"Number of active customers—Beginning of period\", 5, 8, 8, null), arrayOf<Any?>(\"Number of customers added\", 2, 4, 4, null), arrayOf<Any?>(\"Number of customers lost/terminated\", -1, -2, -2, null), arrayOf<Any?>(\"Number of active customers—End of period\", null, null, null, null), arrayOf<Any?>(null, null, null, null, null), arrayOf<Any?>(\"Profitability Analysis:\", null, null, null, null), arrayOf<Any?>(\"Revenue per segment\", 1500000, 1800000, 2500000, null), arrayOf<Any?>(\"Weighting\", null, null, null, null), arrayOf<Any?>(null, null, null, null, null), arrayOf<Any?>(\"Cost of sales:\", null, null, null, null), arrayOf<Any?>(\"Ongoing service and support costs\", 1000000, 1400000, 1400000, null), arrayOf<Any?>(\"Other direct customer costs\", 200000, 100000, 100000, null), arrayOf<Any?>(\"Total cost of sales\", null, null, null, null), arrayOf<Any?>(\"Gross margin\", null, null, null, null), arrayOf<Any?>(\"Weighting\", null, null, null, null), arrayOf<Any?>(null, null, null, null, null), arrayOf<Any?>(\"Other costs:\", null, null, null, null), arrayOf<Any?>(\"Customer acquisition\", 105000, 120000, 235000, null), arrayOf<Any?>(\"Customer marketing\", 150000, 125000, 275000, null), arrayOf<Any?>(\"Customer termination\", 80000, 190000, 140000, null), arrayOf<Any?>(\"Total other customer costs\", null, null, null, null), arrayOf<Any?>(\"Customer profit by segment\", null, null, null, null), arrayOf<Any?>(\"Weighting\", null, null, null, null), arrayOf<Any?>(null, null, null, null, null), arrayOf<Any?>(\"Summary Metrics:\", \"[Segment Name]\", \"[Segment Name]\", \"[Segment Name]\", \"Trend\"), arrayOf<Any?>(\"Average cost per acquired customer\", null, null, null, null), arrayOf<Any?>(\"Average cost per terminated customer\", null, null, null, null), arrayOf<Any?>(\"Average marketing cost per active customer\", null, null, null, null), arrayOf<Any?>(\"Average profit (loss) per customer\", null, null, null, null))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.name = \"Customer Profitability\"\n        worksheet.tabColor = Color.FromArgb(131, 172, 121)\n        worksheet.sheetView.displayGridlines = false\n\n        //Set Value.\n        worksheet.getRange(\"B2\").value = \"[Company Name]\"\n        worksheet.getRange(\"B3\").value = \"Customer Profitability Analysis\"\n        worksheet.getRange(\"B4\").value = \"[Date]\"\n        worksheet.getRange(\"B6\").value = \"Gray cells will be calculated for you. You do not need to enter anything into them.\"\n        worksheet.getRange(\"B7:F37\").value = data\n\n        //Set formula.\n        worksheet.getRange(\"F9:F11\").formula = \"=SUM(C9:E9)\"\n        worksheet.getRange(\"C12:F12\").formula = \"=SUM(C9:C11)\"\n\n        worksheet.getRange(\"C16:E16\").formula = \"=+C15/\\$F$15\"\n        worksheet.getRange(\"F15:F16\").formula = \"=SUM(C15:E15)\"\n\n        worksheet.getRange(\"F19:F20\").formula = \"=SUM(C19:E19)\"\n        worksheet.getRange(\"C21:F21\").formula = \"=SUM(C19:C20)\"\n        worksheet.getRange(\"C22:F22\").formula = \"=+C15-C21\"\n        worksheet.getRange(\"C23:E23\").formula = \"=MAX(0, MIN(1,C22/\\$F$22))\"\n        worksheet.getRange(\"F23\").formula = \"=SUM(C23:E23)\"\n\n        worksheet.getRange(\"F26:F28\").formula = \"=SUM(C26:E26)\"\n        worksheet.getRange(\"C29:F29\").formula = \"=SUM(C26:C28)\"\n        worksheet.getRange(\"C30:E30\").formula = \"=+C22-C29\"\n        worksheet.getRange(\"C31:E31\").formula = \"=MAX(0,MIN(1, C30/\\$F$30))\"\n        worksheet.getRange(\"F30:F31\").formula = \"=SUM(C30:E30)\"\n\n        worksheet.getRange(\"C34:E34\").formula = \"=+C26/C10\"\n        worksheet.getRange(\"C35:E35\").formula = \"=-C28/C11\"\n        worksheet.getRange(\"C36:E36\").formula = \"=+C27/C12\"\n        worksheet.getRange(\"C37:E37\").formula = \"=+C30/C12\"\n\n        //Change the range's RowHeight and ColumnWidth.\n        worksheet.standardHeight = 15.0\n        worksheet.standardWidth = 9.140625\n        worksheet.rows.get(0).rowHeight = 9.95\n        worksheet.rows.get(1).rowHeight = 33.0\n        worksheet.rows.get(2).rowHeight = 27.0\n        worksheet.rows.get(3).rowHeight = 19.5\n        worksheet.rows.get(4).rowHeight = 9.0\n        worksheet.rows.get(5).rowHeight = 19.5\n        worksheet.rows.get(6).rowHeight = 18.0\n        worksheet.rows.get(12).rowHeight = 9.0\n        worksheet.rows.get(16).rowHeight = 9.0\n        worksheet.rows.get(23).rowHeight = 9.0\n        worksheet.rows.get(31).rowHeight = 9.0\n\n        worksheet.columns.get(0).columnWidth = 1.85546875\n        worksheet.columns.get(1).columnWidth = 46.7109375\n        worksheet.columns.get(2).columnWidth = 16.42578125\n        worksheet.columns.get(3).columnWidth = 16.42578125\n        worksheet.columns.get(4).columnWidth = 16.42578125\n        worksheet.columns.get(5).columnWidth = 16.42578125\n\n        //Modify the build in name styles.\n        val nameStyle_Normal = workbook.styles.get(\"Normal\")\n        nameStyle_Normal.verticalAlignment = VerticalAlignment.Center\n        nameStyle_Normal.font.themeColor = ThemeColor.Dark1\n        nameStyle_Normal.font.tintAndShade = 0.249946592608417\n        nameStyle_Normal.font.size = 10.0\n\n        val nameStyle_Heading_1 = workbook.styles.get(\"Heading 1\")\n        nameStyle_Heading_1.horizontalAlignment = HorizontalAlignment.Left\n        nameStyle_Heading_1.verticalAlignment = VerticalAlignment.Center\n        nameStyle_Heading_1.font.themeFont = ThemeFont.Major\n        nameStyle_Heading_1.font.bold = false\n        nameStyle_Heading_1.font.size = 24.0\n        nameStyle_Heading_1.font.themeColor = ThemeColor.Dark1\n        nameStyle_Heading_1.font.tintAndShade = 0.249946592608417\n        nameStyle_Heading_1.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.None\n        nameStyle_Heading_1.includeAlignment = true\n\n        val nameStyle_Heading_2 = workbook.styles.get(\"Heading 2\")\n        nameStyle_Heading_2.horizontalAlignment = HorizontalAlignment.Left\n        nameStyle_Heading_2.verticalAlignment = VerticalAlignment.Center\n        nameStyle_Heading_2.font.themeFont = ThemeFont.Major\n        nameStyle_Heading_2.font.bold = false\n        nameStyle_Heading_2.font.size = 20.0\n        nameStyle_Heading_2.font.themeColor = ThemeColor.Dark1\n        nameStyle_Heading_2.font.tintAndShade = 0.249946592608417\n        nameStyle_Heading_2.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.None\n        nameStyle_Heading_2.interior.themeColor = ThemeColor.Accent3\n        nameStyle_Heading_2.interior.tintAndShade = 0.39994506668294322\n        nameStyle_Heading_2.includeNumber = true\n        nameStyle_Heading_2.includePatterns = true\n\n        val nameStyle_Heading_3 = workbook.styles.get(\"Heading 3\")\n        nameStyle_Heading_3.horizontalAlignment = HorizontalAlignment.Left\n        nameStyle_Heading_3.verticalAlignment = VerticalAlignment.Center\n        nameStyle_Heading_3.font.themeFont = ThemeFont.Major\n        nameStyle_Heading_3.font.bold = false\n        nameStyle_Heading_3.font.size = 14.0\n        nameStyle_Heading_3.font.themeColor = ThemeColor.Dark1\n        nameStyle_Heading_3.font.tintAndShade = 0.249946592608417\n        nameStyle_Heading_3.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.None\n        nameStyle_Heading_3.includeAlignment = true\n        nameStyle_Heading_3.includePatterns = true\n\n        val nameStyle_Heading_4 = workbook.styles.get(\"Heading 4\")\n        nameStyle_Heading_4.horizontalAlignment = HorizontalAlignment.Left\n        nameStyle_Heading_4.verticalAlignment = VerticalAlignment.Center\n        nameStyle_Heading_4.font.themeFont = ThemeFont.Major\n        nameStyle_Heading_4.font.bold = true\n        nameStyle_Heading_4.font.size = 10.0\n        nameStyle_Heading_4.font.themeColor = ThemeColor.Light1\n        nameStyle_Heading_4.font.tintAndShade = -0.0499893185216834\n        nameStyle_Heading_4.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.None\n        nameStyle_Heading_4.interior.themeColor = ThemeColor.Accent3\n        nameStyle_Heading_4.interior.tintAndShade = -0.249946592608417\n        nameStyle_Heading_4.includeAlignment = true\n        nameStyle_Heading_4.includeBorder = true\n        nameStyle_Heading_4.includePatterns = true\n\n        //Apply the above name styles on ranges.\n        worksheet.getRange(\"B2:F2\").style = workbook.styles.get(\"Heading 1\")\n        worksheet.getRange(\"B3:F3\").style = workbook.styles.get(\"Heading 2\")\n        worksheet.getRange(\"B4:F4\").style = workbook.styles.get(\"Heading 3\")\n        worksheet.getRange(\"B8:F8\").style = workbook.styles.get(\"Heading 4\")\n        worksheet.getRange(\"B14:F14\").style = workbook.styles.get(\"Heading 4\")\n        worksheet.getRange(\"B18:F18\").style = workbook.styles.get(\"Heading 4\")\n        worksheet.getRange(\"B25:F25\").style = workbook.styles.get(\"Heading 4\")\n        worksheet.getRange(\"B33:F33\").style = workbook.styles.get(\"Heading 4\")\n\n        //Set NumberFormat.\n        worksheet.getRange(\"C9:F12\").numberFormat = \"0_);[Red](0)\"\n        worksheet.getRange(\"C15:F15\").numberFormat = \"\\\"$\\\"#,##0.00_);[Red](\\\"$\\\"#,##0.00)\"\n        worksheet.getRange(\"C16:F16\").numberFormat = \"0%\"\n        worksheet.getRange(\"C19:F22\").numberFormat = \"\\\"$\\\"#,##0.00_);[Red](\\\"$\\\"#,##0.00)\"\n        worksheet.getRange(\"C23:F23\").numberFormat = \"0%\"\n        worksheet.getRange(\"C26:F30\").numberFormat = \"\\\"$\\\"#,##0.00_);[Red](\\\"$\\\"#,##0.00)\"\n        worksheet.getRange(\"C31:F31\").numberFormat = \"0%\"\n        worksheet.getRange(\"C34:F37\").numberFormat = \"\\\"$\\\"#,##0.00_);[Red](\\\"$\\\"#,##0.00)\"\n\n        //Set range's font style.\n        worksheet.getRange(\"B6\").font.tintAndShade = 0.34998626667073579\n        worksheet.getRange(\"B6\").font.size = 8.0\n        worksheet.getRange(\"B6\").font.italic = true\n        worksheet.getRange(\"C7:F7\").font.tintAndShade = 0.0\n        worksheet.getRange(\"B9:F12\").font.tintAndShade = 0.0\n        worksheet.getRange(\"B15:F16\").font.tintAndShade = 0.0\n        worksheet.getRange(\"B19:F23\").font.tintAndShade = 0.0\n        worksheet.getRange(\"B26:F31\").font.tintAndShade = 0.0\n        worksheet.getRange(\"B34:F37\").font.tintAndShade = 0.0\n        worksheet.getRange(\"C33:F33\").font.bold = false\n\n        //Set range's alignment.\n        worksheet.getRange(\"C7:F7\").horizontalAlignment = HorizontalAlignment.Center\n        worksheet.getRange(\"C33:F33\").horizontalAlignment = HorizontalAlignment.Center\n\n        //Set range's border\n        worksheet.getRange(\"B9:F12\").borders.lineStyle = BorderLineStyle.Thin\n        worksheet.getRange(\"B9:F12\").borders.themeColor = ThemeColor.Accent3\n        worksheet.getRange(\"B9:F12\").borders.tintAndShade = 0.39994506668294322\n\n        worksheet.getRange(\"B15:F16\").borders.lineStyle = BorderLineStyle.Thin\n        worksheet.getRange(\"B15:F16\").borders.themeColor = ThemeColor.Accent3\n        worksheet.getRange(\"B15:F16\").borders.tintAndShade = 0.39994506668294322\n\n        worksheet.getRange(\"B19:F23\").borders.lineStyle = BorderLineStyle.Thin\n        worksheet.getRange(\"B19:F23\").borders.themeColor = ThemeColor.Accent3\n        worksheet.getRange(\"B19:F23\").borders.tintAndShade = 0.39994506668294322\n\n        worksheet.getRange(\"B26:F31\").borders.lineStyle = BorderLineStyle.Thin\n        worksheet.getRange(\"B26:F31\").borders.themeColor = ThemeColor.Accent3\n        worksheet.getRange(\"B26:F31\").borders.tintAndShade = 0.39994506668294322\n\n        worksheet.getRange(\"B34:F37\").borders.lineStyle = BorderLineStyle.Thin\n        worksheet.getRange(\"B34:F37\").borders.themeColor = ThemeColor.Accent3\n        worksheet.getRange(\"B34:F37\").borders.tintAndShade = 0.39994506668294322\n\n        //Set range's fill.\n        worksheet.getRange(\"F9:F12\").interior.themeColor = ThemeColor.Light1\n        worksheet.getRange(\"F9:F12\").interior.tintAndShade = -0.0499893185216834\n        worksheet.getRange(\"C12:E12\").interior.themeColor = ThemeColor.Light1\n        worksheet.getRange(\"C12:E12\").interior.tintAndShade = -0.0499893185216834\n        worksheet.getRange(\"F15:F16\").interior.themeColor = ThemeColor.Light1\n        worksheet.getRange(\"F15:F16\").interior.tintAndShade = -0.0499893185216834\n        worksheet.getRange(\"C16:E16\").interior.themeColor = ThemeColor.Light1\n        worksheet.getRange(\"C16:E16\").interior.tintAndShade = -0.0499893185216834\n        worksheet.getRange(\"F19:F23\").interior.themeColor = ThemeColor.Light1\n        worksheet.getRange(\"F19:F23\").interior.tintAndShade = -0.0499893185216834\n        worksheet.getRange(\"C21:E23\").interior.themeColor = ThemeColor.Light1\n        worksheet.getRange(\"C21:E23\").interior.tintAndShade = -0.0499893185216834\n        worksheet.getRange(\"F26:F31\").interior.themeColor = ThemeColor.Light1\n        worksheet.getRange(\"F26:F31\").interior.tintAndShade = -0.0499893185216834\n        worksheet.getRange(\"C29:E31\").interior.themeColor = ThemeColor.Light1\n        worksheet.getRange(\"C29:E31\").interior.tintAndShade = -0.0499893185216834\n        worksheet.getRange(\"C34:E37\").interior.themeColor = ThemeColor.Light1\n        worksheet.getRange(\"C34:E37\").interior.tintAndShade = -0.0499893185216834\n\n        //create a new group of sparklines.\n        val sparklineGroup = worksheet.getRange(\"F34:F37\").sparklineGroups.add(SparkType.Line, \"C34:E37\")\n\n        sparklineGroup.seriesColor.themeColor = ThemeColor.Accent3\n        sparklineGroup.seriesColor.tintAndShade = -0.249977111117893\n        sparklineGroup.points.negative.color.themeColor = ThemeColor.Accent4\n        sparklineGroup.points.markers.color.themeColor = ThemeColor.Accent4\n        sparklineGroup.points.markers.color.tintAndShade = -0.249977111117893\n        sparklineGroup.points.highpoint.color.themeColor = ThemeColor.Accent4\n        sparklineGroup.points.highpoint.color.tintAndShade = -0.249977111117893\n        sparklineGroup.points.lowpoint.color.themeColor = ThemeColor.Accent4\n        sparklineGroup.points.lowpoint.color.tintAndShade = -0.249977111117893\n        sparklineGroup.points.firstpoint.color.themeColor = ThemeColor.Accent4\n        sparklineGroup.points.firstpoint.color.tintAndShade = -0.249977111117893\n        sparklineGroup.points.lastpoint.color.themeColor = ThemeColor.Accent4\n        sparklineGroup.points.lastpoint.color.tintAndShade = -0.249977111117893\n        sparklineGroup.points.negative.visible = false\n        sparklineGroup.points.firstpoint.visible = false\n        sparklineGroup.points.lastpoint.visible = false\n\n        //Add chart.\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 9.75, 576.95, 590.25, 237.0)\n        shape.name = \"Chart 3\"\n\n        //Add Series.\n        val series1 = shape.chart.seriesCollection.newSeries()\n        series1.formula = \"=SERIES('Customer Profitability'!\\$B$34,'Customer Profitability'!\\$C$33:\\$E$33,'Customer Profitability'!\\$C$34:\\$E$34,1)\"\n        series1.format.fill.color.objectThemeColor = ThemeColor.Accent2\n\n        val series2 = shape.chart.seriesCollection.newSeries()\n        series2.formula = \"=SERIES('Customer Profitability'!\\$B$35,'Customer Profitability'!\\$C$33:\\$E$33,'Customer Profitability'!\\$C$35:\\$E$35,2)\"\n        series2.format.fill.color.objectThemeColor = ThemeColor.Accent4\n\n        val series3 = shape.chart.seriesCollection.newSeries()\n        series3.formula = \"=SERIES('Customer Profitability'!\\$B$36,'Customer Profitability'!\\$C$33:\\$E$33,'Customer Profitability'!\\$C$36:\\$E$36,3)\"\n        series3.format.fill.color.objectThemeColor = ThemeColor.Accent3\n\n        val series4 = shape.chart.seriesCollection.newSeries()\n        series4.formula = \"=SERIES('Customer Profitability'!\\$B$37,'Customer Profitability'!\\$C$33:\\$E$33,'Customer Profitability'!\\$C$37:\\$E$37,4)\"\n        series4.format.fill.color.objectThemeColor = ThemeColor.Accent5\n\n        //Set the char group's Overlap and GapWidth.\n        shape.chart.columnGroups.get(0).overlap = 0\n        shape.chart.columnGroups.get(0).gapWidth = 199\n\n        //Set the chart's title format.\n        val chartTitle = shape.chart.chartTitle\n        chartTitle.text = \"Summary Metrics per Customer Segment\"\n        chartTitle.font.themeFont = ThemeFont.Major\n        chartTitle.font.color.objectThemeColor = ThemeColor.Dark1\n        chartTitle.font.size = 20.0\n\n        //Set the chart legend's position.\n        shape.chart.legend.position = LegendPosition.Top\n\n        //Set category axis format.\n        val category_axis = shape.chart.axes.item(AxisType.Category)\n        category_axis.hasTitle = true\n        category_axis.axisTitle.text = \"SEGMENT\"\n        category_axis.axisTitle.font.size = 9.0\n        category_axis.axisTitle.font.themeFont = ThemeFont.Minor\n\n        //Set value axis format.\n        val value_axis = shape.chart.axes.item(AxisType.Value)\n        value_axis.crossesAt = -200000.0\n        value_axis.hasMinorGridlines = true\n        value_axis.minorGridlines.format.line.color.objectThemeColor = ThemeColor.Dark1\n        value_axis.minorGridlines.format.line.color.brightness = 0.95\n\n        //Create customize theme.\n        val theme = Theme(\"test\")\n        theme.themeColorScheme.get(ThemeColor.Dark1).rgb = Color.FromArgb(0, 0, 0)\n        theme.themeColorScheme.get(ThemeColor.Light1).rgb = Color.FromArgb(255, 255, 255)\n        theme.themeColorScheme.get(ThemeColor.Dark2).rgb = Color.FromArgb(77, 70, 70)\n        theme.themeColorScheme.get(ThemeColor.Light2).rgb = Color.FromArgb(255, 251, 239)\n        theme.themeColorScheme.get(ThemeColor.Accent1).rgb = Color.FromArgb(255, 225, 132)\n        theme.themeColorScheme.get(ThemeColor.Accent2).rgb = Color.FromArgb(102, 173, 166)\n        theme.themeColorScheme.get(ThemeColor.Accent3).rgb = Color.FromArgb(131, 172, 121)\n        theme.themeColorScheme.get(ThemeColor.Accent4).rgb = Color.FromArgb(254, 191, 102)\n        theme.themeColorScheme.get(ThemeColor.Accent5).rgb = Color.FromArgb(219, 112, 87)\n        theme.themeColorScheme.get(ThemeColor.Accent6).rgb = Color.FromArgb(165, 115, 137)\n        theme.themeColorScheme.get(ThemeColor.Hyperlink).rgb = Color.FromArgb(102, 173, 166)\n        theme.themeColorScheme.get(ThemeColor.FollowedHyperlink).rgb = Color.FromArgb(165, 115, 137)\n        theme.themeFontScheme.major.get(FontLanguageIndex.Latin).name = \"Marion\"\n        theme.themeFontScheme.minor.get(FontLanguageIndex.Latin).name = \"Marion\"\n\n        //Apply the above custom theme.\n        workbook.theme = theme\n\n        //Set active cell.\n        worksheet.getRange(\"B7\").activate()\n\n    ",
  "com.grapecity.documents.excel.examples.showcase.MonthlyBusinessBudget": "\n\n        //Load template file Monthly business budget.xlsx from resource\n        workbook.open(this.getResourceStream(\"xlsx/Monthly business budget.xlsx\")!!)\n\n        val worksheet = workbook.activeSheet\n\n        // change table style to TableStyleMedium14\n        val totalsTable = worksheet.tables.get(\"TotalsTable\")\n        totalsTable.tableStyle = workbook.tableStyles.get(\"TableStyleMedium14\")\n\n        // change chart type to column stacked\n        val chart = worksheet.shapes.get(0).chart\n        chart.chartType = ChartType.ColumnStacked\n        chart.columnGroups.get(0).overlap = 100\n\n        // set a bigger font size for chart title\n        chart.chartTitle.font.size = 24.0\n        chart.chartTitle.font.bold = true\n\n        // give a one color gradient to chart area\n        chart.chartArea.format.fill.oneColorGradient(GradientStyle.Horizontal, 1, 0.0)\n        chart.chartArea.format.fill.gradientStops.get(0).color.objectThemeColor = ThemeColor.Accent6\n        chart.chartArea.format.fill.gradientStops.get(0).color.brightness = 0.8\n\n        // make fill of plot area transparant\n        chart.plotArea.format.fill.transparency = 1.0\n\n        // config series1 of chart\n        val series1 = chart.seriesCollection.get(0)\n        series1.hasDataLabels = true\n        series1.format.fill.color.objectThemeColor = ThemeColor.Accent1\n\n        // give some formatting for the first point of series1\n        val point1 = series1.points.get(0)\n        point1.format.line.color.rgb = Color.GetBlack()\n        point1.format.line.weight = 2.0\n        point1.format.line.dashStyle = LineDashStyle.Dash\n\n        // config series2 of chart\n        val series2 = chart.seriesCollection.get(1)\n        series2.hasDataLabels = true\n        series2.format.fill.color.objectThemeColor = ThemeColor.Accent6\n        series2.dataLabels.font.color.rgb = Color.GetRed()\n\n        // get the value axis\n        val value_axis = chart.axes.item(AxisType.Value, AxisGroup.Primary)\n\n        // show the display unit as thousands for value axis\n        value_axis.hasDisplayUnitLabel = true\n        value_axis.displayUnit = DisplayUnit.Thousands\n\n        // give a color for the major grid line of value axis\n        value_axis.majorGridlines.format.line.color.objectThemeColor = ThemeColor.Accent6\n\n    ",
  "com.grapecity.documents.excel.examples.showcase.ToDoListWithProgressTracker": "\n\n        val data = arrayOf(arrayOf<Any?>(\"TASK\", \"PRIORITY\", \"STATUS\", \"START DATE\", \"DUE DATE\", \"% COMPLETE\", \"DONE?\", \"NOTES\"), arrayOf<Any?>(\"First Thing I Need To Do\", \"Normal\", \"Not Started\", null, null, 0, null, null), arrayOf<Any?>(\"Other Thing I Need To Finish\", \"High\", \"In Progress\", null, null, 0.5, null, null), arrayOf<Any?>(\"Something Else To Get Done\", \"Low\", \"Complete\", null, null, 1, null, null), arrayOf<Any?>(\"More Errands And Things\", \"Normal\", \"In Progress\", null, null, 0.75, null, null), arrayOf<Any?>(\"So Much To Get Done This Week\", \"High\", \"In Progress\", null, null, 0.25, null, null))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.name = \"To-Do List\"\n        worksheet.tabColor = Color.FromArgb(148, 112, 135)\n        worksheet.sheetView.displayGridlines = false\n\n        //Set Value.\n        worksheet.getRange(\"B1\").value = \"To-Do List\"\n        worksheet.getRange(\"B2:I7\").value = data\n\n        //Set formula.\n        worksheet.getRange(\"E3\").formula = \"=TODAY()\"\n        worksheet.getRange(\"E4\").formula = \"=TODAY()-30\"\n        worksheet.getRange(\"E5\").formula = \"=TODAY()-23\"\n        worksheet.getRange(\"E6\").formula = \"=TODAY()-15\"\n        worksheet.getRange(\"E7\").formula = \"=TODAY()-5\"\n\n        //Change the range's RowHeight and ColumnWidth.\n        worksheet.standardHeight = 30.0\n        worksheet.standardWidth = 8.88671875\n        worksheet.getRange(\"1:1\").rowHeight = 72.75\n        worksheet.getRange(\"2:2\").rowHeight = 33.0\n        worksheet.getRange(\"3:7\").rowHeight = 30.25\n        worksheet.getRange(\"A:A\").columnWidth = 2.77734375\n        worksheet.getRange(\"B:B\").columnWidth = 29.109375\n        worksheet.getRange(\"C:G\").columnWidth = 16.77734375\n        worksheet.getRange(\"H:H\").columnWidth = 10.77734375\n        worksheet.getRange(\"I:I\").columnWidth = 29.6640625\n        worksheet.getRange(\"J:J\").columnWidth = 2.77734375\n\n        //Modify the build in name getStyles().\n        val nameStyle_Normal = workbook.styles.get(\"Normal\")\n        nameStyle_Normal.verticalAlignment = VerticalAlignment.Center\n        nameStyle_Normal.wrapText = true\n        nameStyle_Normal.font.themeFont = ThemeFont.Minor\n        nameStyle_Normal.font.themeColor = ThemeColor.Dark1\n        nameStyle_Normal.font.tintAndShade = 0.25\n\n        val nameStyle_Title = workbook.styles.get(\"Title\")\n        nameStyle_Title.horizontalAlignment = HorizontalAlignment.General\n        nameStyle_Title.verticalAlignment = VerticalAlignment.Bottom\n        nameStyle_Title.font.themeFont = ThemeFont.Minor\n        nameStyle_Title.font.bold = true\n        nameStyle_Title.font.size = 38.0\n        nameStyle_Title.font.themeColor = ThemeColor.Dark1\n        nameStyle_Title.font.tintAndShade = 0.249946592608417\n        nameStyle_Title.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thick\n        nameStyle_Title.borders.get(BordersIndex.EdgeBottom).themeColor = ThemeColor.Dark1\n        nameStyle_Title.includeAlignment = true\n        nameStyle_Title.includeBorder = true\n\n        val nameStyle_Percent = workbook.styles.get(\"Percent\")\n        nameStyle_Percent.horizontalAlignment = HorizontalAlignment.Right\n        nameStyle_Percent.indentLevel = 1\n        nameStyle_Percent.verticalAlignment = VerticalAlignment.Center\n        nameStyle_Percent.includeAlignment = true\n\n        val nameStyle_Heading_1 = workbook.styles.get(\"Heading 1\")\n        nameStyle_Heading_1.horizontalAlignment = HorizontalAlignment.Left\n        nameStyle_Heading_1.verticalAlignment = VerticalAlignment.Bottom\n        nameStyle_Heading_1.font.themeFont = ThemeFont.Major\n        nameStyle_Heading_1.font.bold = false\n        nameStyle_Heading_1.font.size = 11.0\n        nameStyle_Heading_1.font.themeColor = ThemeColor.Dark1\n        nameStyle_Heading_1.font.tintAndShade = 0.249946592608417\n        nameStyle_Heading_1.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.None\n        nameStyle_Heading_1.includeNumber = true\n        nameStyle_Heading_1.includeAlignment = true\n        nameStyle_Heading_1.includeBorder = false\n\n        val nameStyle_Heading_2 = workbook.styles.get(\"Heading 2\")\n        nameStyle_Heading_2.horizontalAlignment = HorizontalAlignment.Right\n        nameStyle_Heading_2.indentLevel = 2\n        nameStyle_Heading_2.verticalAlignment = VerticalAlignment.Bottom\n        nameStyle_Heading_2.font.themeFont = ThemeFont.Major\n        nameStyle_Heading_2.font.bold = false\n        nameStyle_Heading_2.font.size = 11.0\n        nameStyle_Heading_2.font.themeColor = ThemeColor.Dark2\n        nameStyle_Heading_2.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.None\n        nameStyle_Heading_2.includeNumber = true\n        nameStyle_Heading_2.includeAlignment = true\n\n        //Create custom name styes.\n        val nameStyle_Done = workbook.styles.add(\"Done\")\n        nameStyle_Done.numberFormat = \"\\\"Done\\\";\\\"\\\";\\\"\\\"\"\n        nameStyle_Done.horizontalAlignment = HorizontalAlignment.Center\n        nameStyle_Done.verticalAlignment = VerticalAlignment.Center\n        nameStyle_Done.font.themeFont = ThemeFont.Minor\n        nameStyle_Done.font.themeColor = ThemeColor.Light1\n\n        val nameStyle_Date = workbook.styles.add(\"Date\")\n        nameStyle_Date.numberFormat = \"yyyy/m/d\"\n        nameStyle_Date.horizontalAlignment = HorizontalAlignment.Right\n        nameStyle_Date.verticalAlignment = VerticalAlignment.Center\n        nameStyle_Date.font.themeFont = ThemeFont.Minor\n        nameStyle_Date.font.themeColor = ThemeColor.Dark1\n        nameStyle_Date.font.tintAndShade = 0.249946592608417\n        nameStyle_Date.includeBorder = false\n        nameStyle_Date.includePatterns = false\n\n        //Apply the above name styles on ranges.\n        worksheet.getRange(\"B1:I1\").style = workbook.styles.get(\"Title\")\n        worksheet.getRange(\"B2:D2\").style = workbook.styles.get(\"Heading 1\")\n        worksheet.getRange(\"E2:F2\").style = workbook.styles.get(\"Heading 2\")\n        worksheet.getRange(\"G2\").style = workbook.styles.get(\"Heading 1\")\n        worksheet.getRange(\"H2:H7\").style = workbook.styles.get(\"Done\")\n        worksheet.getRange(\"I2\").style = workbook.styles.get(\"Heading 1\")\n        worksheet.getRange(\"E3:F7\").style = workbook.styles.get(\"Date\")\n        worksheet.getRange(\"G3:G7\").style = workbook.styles.get(\"Percent\")\n\n        //Add one custom table style.\n        val style = workbook.tableStyles.add(\"To-do List\")\n        style.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thin\n        style.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeBottom).themeColor = ThemeColor.Light1\n        style.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeBottom).tintAndShade = -0.14993743705557422\n        style.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.InsideHorizontal).lineStyle = BorderLineStyle.Thin\n        style.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.InsideHorizontal).themeColor = ThemeColor.Light1\n        style.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.InsideHorizontal).tintAndShade = -0.14993743705557422\n\n        //Create a table and apply the above table style.\n        val table = worksheet.tables.add(worksheet.getRange(\"B2:I7\"), true)\n        table.name = \"ToDoList\"\n        table.tableStyle = style\n\n        //Use table formula in table range.\n        worksheet.getRange(\"F3\").formula = \"=[@[START DATE]]+7\"\n        worksheet.getRange(\"F4\").formula = \"=[@[START DATE]]+35\"\n        worksheet.getRange(\"F5\").formula = \"=[@[START DATE]]+10\"\n        worksheet.getRange(\"F6\").formula = \"=[@[START DATE]]+36\"\n        worksheet.getRange(\"F7\").formula = \"=[@[START DATE]]+14\"\n        worksheet.getRange(\"H3:H7\").formula = \"=--([@[% COMPLETE]]>=1)\"\n\n        //Add a expression rule.\n        val expression = worksheet.getRange(\"B3:I7\").formatConditions.add(FormatConditionType.Expression, FormatConditionOperator.Between, \"=AND(\\$G3=0,\\$G3<>\\\"\\\")\", null) as IFormatCondition\n        expression.interior.themeColor = ThemeColor.Light1\n        expression.interior.tintAndShade = -0.0499893185216834\n\n        //Add a data bar rule.\n        val dataBar = worksheet.getRange(\"G3:G7\").formatConditions.addDatabar()\n        dataBar.barFillType = DataBarFillType.Solid\n        dataBar.barColor.themeColor = ThemeColor.Accent1\n        dataBar.barColor.tintAndShade = 0.39997558519241921\n\n        //Add an icon set rule.\n        val iconSet = worksheet.getRange(\"H3:H7\").formatConditions.addIconSetCondition()\n        iconSet.iconSet = workbook.iconSets.get(IconSetType.Icon3Symbols)\n        iconSet.iconCriteria.get(2).operator = FormatConditionOperator.GreaterEqual\n        iconSet.iconCriteria.get(2).value = 1\n        iconSet.iconCriteria.get(2).type = ConditionValueTypes.Number\n        iconSet.iconCriteria.get(1).operator = FormatConditionOperator.GreaterEqual\n        iconSet.iconCriteria.get(1).value = 0\n        iconSet.iconCriteria.get(1).type = ConditionValueTypes.Number\n\n        //Add a cell value rule.\n        val cellValue = worksheet.getRange(\"H3:H7\").formatConditions.add(FormatConditionType.CellValue, FormatConditionOperator.NotEqual, 1, null) as IFormatCondition\n        cellValue.stopIfTrue = true\n\n        //Create list validations.\n        worksheet.getRange(\"C3:C7\").validation.add(ValidationType.List, ValidationAlertStyle.Warning, ValidationOperator.Between, \"Low, Normal, High\", null)\n        var validation = worksheet.getRange(\"C3:C7\").validation\n        validation.errorMessage = \"Select entry from the list. Select CANCEL, then press ALT+DOWN ARROW to navigate the list. Select ENTER to make selection\"\n\n        worksheet.getRange(\"D3:D7\").validation.add(ValidationType.List, ValidationAlertStyle.Warning, ValidationOperator.Between, \"Not Started,In Progress, Deferred, Complete\", null)\n        validation = worksheet.getRange(\"D3:D7\").validation\n        validation.errorMessage = \"Select entry from the list. Select CANCEL, then press ALT+DOWN ARROW to navigate the list. Select ENTER to make selection\"\n\n        worksheet.getRange(\"G3:G7\").validation.add(ValidationType.List, ValidationAlertStyle.Warning, ValidationOperator.Between, \"0%,25%,50%,75%,100%\", null)\n        validation = worksheet.getRange(\"G3:G7\").validation\n        validation.errorMessage = \"Select entry from the list. Select CANCEL, then press ALT+DOWN ARROW to navigate the list. Select ENTER to make selection\"\n\n        //Create custom validation.\n        worksheet.getRange(\"F3:F7\").validation.add(ValidationType.Custom, ValidationAlertStyle.Warning, ValidationOperator.Between, \"=F3>=E3\", null)\n        validation = worksheet.getRange(\"F3:F7\").validation\n        validation.errorMessage = \"The Due Date must be greater than or equal to the Start Date. Select YES to keep the value, NO to retry or CANCEL to clear the entry\"\n\n        //Create none validations, set inputmessage.\n        worksheet.getRange(\"B2\").validation.add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, null, null)\n        validation = worksheet.getRange(\"B2\").validation\n        validation.inputMessage = \"Enter Task in this column under this heading. Use heading filters to find specific entries\"\n\n        worksheet.getRange(\"C2\").validation.add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, null, null)\n        validation = worksheet.getRange(\"C2\").validation\n        validation.inputMessage = \"Select Priority in this column under this heading. Press ALT+DOWN ARROW to open the drop-down list, then ENTER to make selection\"\n\n        worksheet.getRange(\"D2\").validation.add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, null, null)\n        validation = worksheet.getRange(\"D2\").validation\n        validation.inputMessage = \"Select Status in this column under this heading.  Press ALT+DOWN ARROW to open the drop-down list, then ENTER to make selection\"\n\n        worksheet.getRange(\"E2\").validation.add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, null, null)\n        validation = worksheet.getRange(\"E2\").validation\n        validation.inputMessage = \"Enter Start Date in this column under this heading\"\n\n        worksheet.getRange(\"F2\").validation.add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, null, null)\n        validation = worksheet.getRange(\"F2\").validation\n        validation.inputMessage = \"Enter Due Date in this column under this heading\"\n\n        worksheet.getRange(\"G2\").validation.add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, null, null)\n        validation = worksheet.getRange(\"G2\").validation\n        validation.inputMessage = \"Select % Complete in this column. Press ALT+DOWN ARROW to open the drop-down list, then ENTER to make selection. A status bar indicates progress toward completion\"\n\n        worksheet.getRange(\"H2\").validation.add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, null, null)\n        validation = worksheet.getRange(\"H2\").validation\n        validation.inputMessage = \"Icon indicator for task completion in this column under this heading is automatically updated as tasks complete\"\n\n        worksheet.getRange(\"I2\").validation.add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, null, null)\n        validation = worksheet.getRange(\"I2\").validation\n        validation.inputMessage = \"Enter Notes in this column under this heading\"\n\n        //Create customize theme.\n        val theme = Theme(\"test\")\n        theme.themeColorScheme.get(ThemeColor.Dark1).rgb = Color.FromArgb(0, 0, 0)\n        theme.themeColorScheme.get(ThemeColor.Light1).rgb = Color.FromArgb(255, 255, 255)\n        theme.themeColorScheme.get(ThemeColor.Dark2).rgb = Color.FromArgb(37, 28, 34)\n        theme.themeColorScheme.get(ThemeColor.Light2).rgb = Color.FromArgb(240, 248, 246)\n        theme.themeColorScheme.get(ThemeColor.Accent1).rgb = Color.FromArgb(148, 112, 135)\n        theme.themeColorScheme.get(ThemeColor.Accent2).rgb = Color.FromArgb(71, 166, 181)\n        theme.themeColorScheme.get(ThemeColor.Accent3).rgb = Color.FromArgb(234, 194, 53)\n        theme.themeColorScheme.get(ThemeColor.Accent4).rgb = Color.FromArgb(107, 192, 129)\n        theme.themeColorScheme.get(ThemeColor.Accent5).rgb = Color.FromArgb(233, 115, 61)\n        theme.themeColorScheme.get(ThemeColor.Accent6).rgb = Color.FromArgb(251, 147, 59)\n        theme.themeColorScheme.get(ThemeColor.Hyperlink).rgb = Color.FromArgb(71, 166, 181)\n        theme.themeColorScheme.get(ThemeColor.FollowedHyperlink).rgb = Color.FromArgb(148, 112, 135)\n        theme.themeFontScheme.major.get(FontLanguageIndex.Latin).name = \"Helvetica Neue\"\n        theme.themeFontScheme.minor.get(FontLanguageIndex.Latin).name = \"Bookman Old Style\"\n\n        //Apply the above custom theme.\n        workbook.theme = theme\n\n        //Set active cell.\n        worksheet.getRange(\"G4\").activate()\n\n    ",
  "com.grapecity.documents.excel.examples.showcase.PersonalAddressBook": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        // ***************************Set RowHeight & Width****************************\n        worksheet.standardHeight = 30.0\n        worksheet.getRange(\"3:4\").rowHeight = 30.25\n        worksheet.getRange(\"1:1\").rowHeight = 103.50\n        worksheet.getRange(\"2:2\").rowHeight = 38.25\n        worksheet.getRange(\"A:A\").columnWidth = 2.625\n        worksheet.getRange(\"B:B\").columnWidth = 22.25\n        worksheet.getRange(\"C:E\").columnWidth = 17.25\n        worksheet.getRange(\"F:F\").columnWidth = 31.875\n        worksheet.getRange(\"G:G\").columnWidth = 22.625\n        worksheet.getRange(\"H:H\").columnWidth = 30.0\n        worksheet.getRange(\"I:I\").columnWidth = 20.25\n        worksheet.getRange(\"J:J\").columnWidth = 17.625\n        worksheet.getRange(\"K:K\").columnWidth = 12.625\n        worksheet.getRange(\"L:L\").columnWidth = 37.25\n        worksheet.getRange(\"M:M\").columnWidth = 2.625\n\n        // *******************************Set Table Value &\n        // Formulas*************************************\n        val table = worksheet.tables.add(worksheet.getRange(\"B2:L4\"), true)\n        worksheet.getRange(\"B2:L4\").value = arrayOf(arrayOf<Any?>(\"NAME\", \"WORK\", \"CELL\", \"HOME\", \"EMAIL\", \"BIRTHDAY\", \"ADDRESS\", \"CITY\", \"STATE\", \"ZIP\", \"NOTE\"), arrayOf<Any?>(\"Kim Abercrombie\", 1235550123, 1235550123, 1235550123, \"someone@example.com\", null, \"123 N. Maple\", \"Cherryville\", \"WA\", 98031, \"\"), arrayOf<Any?>(\"John Smith\", 3215550123L, \"\", \"\", \"someone@example.com\", null, \"456 E. Aspen\", \"\", \"\", \"\", \"\"))\n        worksheet.getRange(\"B1\").value = \"ADDRESS BOOK\"\n        worksheet.getRange(\"G3\").formula = \"=TODAY()\"\n        worksheet.getRange(\"G4\").formula = \"=TODAY()+5\"\n\n        // ****************************Set Table Style********************************\n        val tableStyle = workbook.tableStyles.add(\"Personal Address Book\")\n        workbook.defaultTableStyle = \"Personal Address Book\"\n\n        // Set WholeTable element style.\n        tableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.color = Color.FromArgb(179, 35, 23)\n        tableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeLeft).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeRight).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.InsideVertical).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.InsideHorizontal).lineStyle = BorderLineStyle.Thin\n\n        // Set FirstColumn element style.\n        tableStyle.tableStyleElements.get(TableStyleElementType.FirstColumn).font.bold = true\n\n        // Set SecondColumns element style.\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).borders.color = Color.FromArgb(179, 35, 23)\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).borders.get(BordersIndex.EdgeTop).lineStyle = BorderLineStyle.Thick\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thick\n\n        // ***********************************Set Named\n        // Styles*****************************\n        val normalStyle = workbook.styles.get(\"Normal\")\n        normalStyle.font.name = \"Arial\"\n        normalStyle.font.color = Color.FromArgb(179, 35, 23)\n        normalStyle.horizontalAlignment = HorizontalAlignment.Left\n        normalStyle.indentLevel = 1\n        normalStyle.verticalAlignment = VerticalAlignment.Center\n        normalStyle.wrapText = true\n\n        val titleStyle = workbook.styles.get(\"Title\")\n        titleStyle.includeAlignment = true\n        titleStyle.horizontalAlignment = HorizontalAlignment.Left\n        titleStyle.verticalAlignment = VerticalAlignment.Center\n        titleStyle.font.name = \"Arial\"\n        titleStyle.font.bold = true\n        titleStyle.font.size = 72.0\n        titleStyle.font.color = Color.FromArgb(179, 35, 23)\n\n        val heading1Style = workbook.styles.get(\"Heading 1\")\n        heading1Style.includeBorder = false\n        heading1Style.font.name = \"Arial\"\n        heading1Style.font.size = 18.0\n        heading1Style.font.color = Color.FromArgb(179, 35, 23)\n\n        val dataStyle = workbook.styles.add(\"Data\")\n        dataStyle.includeNumber = true\n        dataStyle.numberFormat = \"m/d/yyyy\"\n\n        val phoneStyle = workbook.styles.add(\"Phone\")\n        phoneStyle.includeNumber = true\n        phoneStyle.numberFormat = \"[<=9999999]###-####;(###) ###-####\"\n\n        // ****************************************Use\n        // NamedStyle**************************\n        worksheet.sheetView.displayGridlines = false\n        worksheet.getRange(\"B2:L2\").interior.color = Color.FromArgb(217, 217, 217)\n        worksheet.getRange(\"B3:B4\").font.bold = true\n        worksheet.getRange(\"2:2\").horizontalAlignment = HorizontalAlignment.Left\n\n        table.tableStyle = tableStyle\n        worksheet.getRange(\"B1\").style = titleStyle\n        worksheet.getRange(\"B2:L2\").style = heading1Style\n        worksheet.getRange(\"C3:E4\").style = phoneStyle\n        worksheet.getRange(\"G3:G4\").style = dataStyle\n\n    ",
  "com.grapecity.documents.excel.examples.showcase.CostAnalysisWithParetoChart": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Cost Center\", \"Annual Cost\", \"Percent of Total\", \"Cumulative Percent\"), arrayOf<Any?>(\"Parts and materials\", 1325000, null, null), arrayOf<Any?>(\"Manufacturing equipment\", 900500, null, null), arrayOf<Any?>(\"Salaries\", 575000, null, null), arrayOf<Any?>(\"Maintenance\", 395000, null, null), arrayOf<Any?>(\"Office lease\", 295000, null, null), arrayOf<Any?>(\"Warehouse lease\", 250000, null, null), arrayOf<Any?>(\"Insurance\", 180000, null, null), arrayOf<Any?>(\"Benefits and pensions\", 130000, null, null), arrayOf<Any?>(\"Vehicles\", 125000, null, null), arrayOf<Any?>(\"Research\", 75000, null, null))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.name = \"COST DATA and CHART\"\n        worksheet.tabColor = Color.FromArgb(63, 94, 101)\n        worksheet.sheetView.displayGridlines = false\n\n        //Set Value.\n        worksheet.getRange(\"B2\").value = \"COST ANALYSIS - PARETO\"\n        worksheet.getRange(\"B39\").value = \"COST ANALYSIS\"\n        worksheet.getRange(\"B41:E51\").value = data\n\n        //Set NumberFormat.\n        worksheet.getRange(\"C42:C52\").numberFormat = \"\\\"$\\\"#,##0.00_);[Red](\\\"$\\\"#,##0.00)\"\n        worksheet.getRange(\"D42:E52\").numberFormat = \"0.00%\"\n\n        //Change the range's RowHeight and ColumnWidth.\n        worksheet.standardHeight = 15.75\n        worksheet.standardWidth = 8.43\n        worksheet.getRange(\"1:1\").rowHeight = 12.75\n        worksheet.getRange(\"2:2\").rowHeight = 20.25\n        worksheet.getRange(\"3:3\").rowHeight = 16.5\n        worksheet.getRange(\"39:39\").rowHeight = 20.25\n        worksheet.getRange(\"40:40\").rowHeight = 16.5\n        worksheet.getRange(\"41:41\").rowHeight = 29.25\n        worksheet.getRange(\"42:51\").rowHeight = 20.1\n        worksheet.getRange(\"A:A\").columnWidth = 1.44140625\n        worksheet.getRange(\"B:B\").columnWidth = 25.88671875\n        worksheet.getRange(\"C:C\").columnWidth = 18.5546875\n        worksheet.getRange(\"D:D\").columnWidth = 17.77734375\n        worksheet.getRange(\"E:E\").columnWidth = 20.77734375\n\n        //Apply one build in name style on the ranges.\n        worksheet.getRange(\"B2:J2\").style = workbook.styles.get(\"Heading 1\")\n        worksheet.getRange(\"B39:E39\").style = workbook.styles.get(\"Heading 1\")\n\n        //Create a table and apply one build in table style.\n        val table = worksheet.tables.add(worksheet.getRange(\"B41:E51\"), true)\n        table.name = \"tblData\"\n        table.tableStyle = workbook.tableStyles.get(\"TableStyleLight9\")\n        table.showTotals = true\n        table.showTableStyleRowStripes = true\n\n        //Use table formula in table range.\n        worksheet.getRange(\"D42:D51\").formula = \"=[@[Annual Cost]]/SUM([[Annual Cost]])\"\n        worksheet.getRange(\"E42:E51\").formula = \"=SUM(INDEX([Percent of Total],1):[@[Percent of Total]])\"\n        table.columns.get(1).totalsCalculation = TotalsCalculation.Sum\n        table.columns.get(2).totalsCalculation = TotalsCalculation.Sum\n        table.columns.get(3).totalsCalculation = TotalsCalculation.None\n\n        //Add chart.\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 9.75, 48.0, 597.0, 472.5)\n        shape.name = \"Pareto Chart\"\n\n        //Add Series.\n        val series_ColumnClustered = shape.chart.seriesCollection.newSeries()\n        series_ColumnClustered.formula = \"=SERIES('COST DATA and CHART'!\\$C$41,'COST DATA and CHART'!\\$B$42:\\$B$51,'COST DATA and CHART'!\\$C$42:\\$C$51,1)\"\n        series_ColumnClustered.format.fill.twoColorGradient(GradientStyle.Horizontal, 1)\n        series_ColumnClustered.format.fill.gradientAngle = 90.0\n        series_ColumnClustered.format.fill.gradientStops.get(0).color.objectThemeColor = ThemeColor.Accent1\n        series_ColumnClustered.format.fill.gradientStops.get(0).color.brightness = 0.0\n        series_ColumnClustered.format.fill.gradientStops.get(0).position = 0.0\n        series_ColumnClustered.format.fill.gradientStops.get(1).color.objectThemeColor = ThemeColor.Accent1\n        series_ColumnClustered.format.fill.gradientStops.get(1).color.brightness = -0.16\n        series_ColumnClustered.format.fill.gradientStops.get(1).position = 1.0\n        series_ColumnClustered.format.line.color.objectThemeColor = ThemeColor.Light1\n\n        val series_Line = shape.chart.seriesCollection.newSeries()\n        series_Line.chartType = ChartType.Line\n        series_Line.formula = \"=SERIES('COST DATA and CHART'!\\$E$41,,'COST DATA and CHART'!\\$E$42:\\$E$51,2)\"\n        series_Line.format.line.weight = 2.25\n        series_Line.axisGroup = AxisGroup.Secondary\n\n        //Change the secondary's maxinumscale.\n        val secondary_axis = shape.chart.axes.item(AxisType.Value, AxisGroup.Secondary)\n        secondary_axis.maximumScale = 1.0\n\n        //Set the chart's title format.\n        shape.chart.chartTitle.text = \"Cost Center\"\n        shape.chart.chartTitle.font.themeFont = ThemeFont.Minor\n        shape.chart.chartTitle.font.color.rgb = Color.FromArgb(89, 89, 89)\n        shape.chart.chartTitle.font.size = 18.0\n\n        //Set the chart has no legend.\n        shape.chart.hasLegend = false\n\n        //Set the char group's Overlap and GapWidth.\n        shape.chart.columnGroups.get(0).overlap = 0\n        shape.chart.columnGroups.get(0).gapWidth = 0\n\n        //Set chart area's format.\n        shape.chart.chartArea.format.fill.presetGradient(GradientStyle.Horizontal, 1, PresetGradientType.EarlySunset)\n        shape.chart.chartArea.format.fill.gradientStops.delete(3)\n        shape.chart.chartArea.format.fill.gradientStops.delete(3)\n        shape.chart.chartArea.format.fill.gradientAngle = 90.0\n        shape.chart.chartArea.format.fill.gradientStops.get(0).color.objectThemeColor = ThemeColor.Light1\n        shape.chart.chartArea.format.fill.gradientStops.get(0).color.brightness = 0.0\n        shape.chart.chartArea.format.fill.gradientStops.get(0).position = 0.0\n        shape.chart.chartArea.format.fill.gradientStops.get(1).color.objectThemeColor = ThemeColor.Light1\n        shape.chart.chartArea.format.fill.gradientStops.get(1).color.brightness = -0.15\n        shape.chart.chartArea.format.fill.gradientStops.get(1).position = 0.68\n        shape.chart.chartArea.format.fill.gradientStops.get(2).color.objectThemeColor = ThemeColor.Light1\n        shape.chart.chartArea.format.fill.gradientStops.get(2).color.brightness = 0.0\n        shape.chart.chartArea.format.fill.gradientStops.get(2).position = 1.0\n\n        //Create customize theme.\n        val theme = Theme(\"test\")\n        theme.themeColorScheme.get(ThemeColor.Dark1).rgb = Color.FromArgb(0, 0, 0)\n        theme.themeColorScheme.get(ThemeColor.Light1).rgb = Color.FromArgb(255, 255, 255)\n        theme.themeColorScheme.get(ThemeColor.Dark2).rgb = Color.FromArgb(96, 89, 88)\n        theme.themeColorScheme.get(ThemeColor.Light2).rgb = Color.FromArgb(241, 246, 246)\n        theme.themeColorScheme.get(ThemeColor.Accent1).rgb = Color.FromArgb(63, 94, 101)\n        theme.themeColorScheme.get(ThemeColor.Accent2).rgb = Color.FromArgb(224, 170, 83)\n        theme.themeColorScheme.get(ThemeColor.Accent3).rgb = Color.FromArgb(179, 29, 66)\n        theme.themeColorScheme.get(ThemeColor.Accent4).rgb = Color.FromArgb(162, 67, 162)\n        theme.themeColorScheme.get(ThemeColor.Accent5).rgb = Color.FromArgb(120, 59, 101)\n        theme.themeColorScheme.get(ThemeColor.Accent6).rgb = Color.FromArgb(55, 120, 169)\n        theme.themeColorScheme.get(ThemeColor.Hyperlink).rgb = Color.FromArgb(71, 166, 181)\n        theme.themeColorScheme.get(ThemeColor.FollowedHyperlink).rgb = Color.FromArgb(120, 59, 101)\n        theme.themeFontScheme.major.get(FontLanguageIndex.Latin).name = \"Constantia\"\n        theme.themeFontScheme.minor.get(FontLanguageIndex.Latin).name = \"Helvetica\"\n\n        //Apply the above custom theme.\n        workbook.theme = theme\n\n        //Set active cell.\n        worksheet.getRange(\"B43\").activate()\n\n    ",
  "com.grapecity.documents.excel.examples.showcase.BidTracker": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //***********************Set RowHeight & ColumnWidth***************\n        worksheet.standardHeight = 30.0\n        worksheet.getRange(\"1:1\").rowHeight = 57.75\n        worksheet.getRange(\"2:9\").rowHeight = 30.25\n        worksheet.getRange(\"A:A\").columnWidth = 2.71\n        worksheet.getRange(\"B:B\").columnWidth = 11.71\n        worksheet.getRange(\"C:C\").columnWidth = 28.0\n        worksheet.getRange(\"D:D\").columnWidth = 22.425\n        worksheet.getRange(\"E:E\").columnWidth = 16.71\n        worksheet.getRange(\"F:F\").columnWidth = 28.0\n        worksheet.getRange(\"G:H\").columnWidth = 16.71\n        worksheet.getRange(\"I:I\").columnWidth = 2.71\n\n        //**************************Set Table Value & Formulas*********************\n        val table = worksheet.tables.add(worksheet.getRange(\"B2:H9\"), true)\n        worksheet.getRange(\"B2:H9\").value = arrayOf(arrayOf<Any?>(\"BID #\", \"DESCRIPTION\", \"DATE RECEIVED\", \"AMOUNT\", \"PERCENT COMPLETE\", \"DEADLINE\", \"DAYS LEFT\"), arrayOf<Any?>(1, \"Bid number 1\", null, 2000, 0.5, null, null), arrayOf<Any?>(2, \"Bid number 2\", null, 3500, 0.25, null, null), arrayOf<Any?>(3, \"Bid number 3\", null, 5000, 0.3, null, null), arrayOf<Any?>(4, \"Bid number 4\", null, 4000, 0.2, null, null), arrayOf<Any?>(5, \"Bid number 5\", null, 4000, 0.75, null, null), arrayOf<Any?>(6, \"Bid number 6\", null, 1500, 0.45, null, null), arrayOf<Any?>(7, \"Bid number 7\", null, 5000, 0.65, null, null))\n        worksheet.getRange(\"B1\").value = \"Bid Details\"\n        worksheet.getRange(\"D3\").formula = \"=TODAY()-10\"\n        worksheet.getRange(\"D4:D5\").formula = \"=TODAY()-20\"\n        worksheet.getRange(\"D6\").formula = \"=TODAY()-10\"\n        worksheet.getRange(\"D7\").formula = \"=TODAY()-28\"\n        worksheet.getRange(\"D8\").formula = \"=TODAY()-17\"\n        worksheet.getRange(\"D9\").formula = \"=TODAY()-15\"\n        worksheet.getRange(\"G3:G9\").formula = \"=[@[DATE RECEIVED]]+30\"\n        worksheet.getRange(\"H3:H9\").formula = \"=[@DEADLINE]-TODAY()\"\n\n        //****************************Set Table Style********************************\n        val tableStyle = workbook.tableStyles.add(\"Bid Tracker\")\n        workbook.defaultTableStyle = \"Bid Tracker\"\n\n        //Set WholeTable element style.\n        tableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).font.color = Color.FromArgb(89, 89, 89)\n        tableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.color = Color.FromArgb(89, 89, 89)\n        tableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeLeft).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeRight).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeTop).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.InsideVertical).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.InsideHorizontal).lineStyle = BorderLineStyle.Thin\n\n        //Set HeaderRow element style.\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).font.color = Color.FromArgb(89, 89, 89)\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).borders.get(BordersIndex.EdgeLeft).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).borders.get(BordersIndex.EdgeRight).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).borders.get(BordersIndex.EdgeTop).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).borders.get(BordersIndex.InsideVertical).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).borders.get(BordersIndex.InsideHorizontal).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).interior.color = Color.FromArgb(131, 95, 1)\n        tableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).interior.patternColor = Color.FromArgb(254, 184, 10)\n\n\n        //Set TotalRow element style.\n        tableStyle.tableStyleElements.get(TableStyleElementType.TotalRow).borders.color = Color.GetWhite()\n        tableStyle.tableStyleElements.get(TableStyleElementType.TotalRow).borders.get(BordersIndex.EdgeLeft).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.TotalRow).borders.get(BordersIndex.EdgeRight).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.TotalRow).borders.get(BordersIndex.EdgeTop).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.TotalRow).borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.TotalRow).borders.get(BordersIndex.InsideVertical).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.TotalRow).borders.get(BordersIndex.InsideHorizontal).lineStyle = BorderLineStyle.Thin\n        tableStyle.tableStyleElements.get(TableStyleElementType.TotalRow).interior.color = Color.FromArgb(131, 95, 1)\n\n\n        //***********************************Set Named Styles*****************************\n        val titleStyle = workbook.styles.get(\"Title\")\n        titleStyle.font.name = \"Trebuchet MS\"\n        titleStyle.font.size = 36.0\n        titleStyle.font.color = Color.FromArgb(56, 145, 167)\n        titleStyle.includeAlignment = true\n        titleStyle.verticalAlignment = VerticalAlignment.Center\n\n        val heading1Style = workbook.styles.get(\"Heading 1\")\n        heading1Style.includeAlignment = true\n        heading1Style.horizontalAlignment = HorizontalAlignment.Left\n        heading1Style.indentLevel = 1\n        heading1Style.verticalAlignment = VerticalAlignment.Bottom\n        heading1Style.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.None\n        heading1Style.font.size = 14.0\n        heading1Style.font.color = Color.GetWhite()\n        heading1Style.font.bold = false\n        heading1Style.includePatterns = true\n        heading1Style.interior.color = Color.FromArgb(131, 95, 1)\n        heading1Style.font.name = \"Trebuchet MS\"\n\n\n        val dateStyle = workbook.styles.add(\"Date\")\n        dateStyle.includeNumber = true\n        dateStyle.numberFormat = \"m/d/yyyy\"\n        dateStyle.includeAlignment = true\n        dateStyle.horizontalAlignment = HorizontalAlignment.Left\n        dateStyle.indentLevel = 1\n        dateStyle.verticalAlignment = VerticalAlignment.Center\n        dateStyle.includeFont = false\n        dateStyle.includeBorder = false\n        dateStyle.includePatterns = false\n        dateStyle.font.name = \"Trebuchet MS\"\n\n\n        val commaStyle = workbook.styles.get(\"Comma\")\n        commaStyle.includeNumber = true\n        commaStyle.numberFormat = \"#,##0_);(#,##0)\"\n        commaStyle.includeAlignment = true\n        commaStyle.horizontalAlignment = HorizontalAlignment.Left\n        commaStyle.indentLevel = 1\n        commaStyle.verticalAlignment = VerticalAlignment.Center\n        commaStyle.font.name = \"Trebuchet MS\"\n\n\n        val normalStyle = workbook.styles.get(\"Normal\")\n        normalStyle.horizontalAlignment = HorizontalAlignment.Left\n        normalStyle.indentLevel = 1\n        normalStyle.verticalAlignment = VerticalAlignment.Center\n        normalStyle.wrapText = true\n        normalStyle.font.color = Color.FromArgb(89, 89, 89)\n\n\n        val currencyStyle = workbook.styles.get(\"Currency\")\n        currencyStyle.numberFormat = \"$#,##0.00\"\n        currencyStyle.includeAlignment = true\n        currencyStyle.horizontalAlignment = HorizontalAlignment.Left\n        currencyStyle.indentLevel = 1\n        currencyStyle.verticalAlignment = VerticalAlignment.Center\n        currencyStyle.font.name = \"Trebuchet MS\"\n\n\n        val percentStyle = workbook.styles.get(\"Percent\")\n        percentStyle.includeAlignment = true\n        percentStyle.horizontalAlignment = HorizontalAlignment.Right\n        percentStyle.verticalAlignment = VerticalAlignment.Center\n        percentStyle.includeFont = true\n        percentStyle.font.name = \"Trebuchet MS\"\n        percentStyle.font.size = 20.0\n        percentStyle.font.bold = true\n        percentStyle.font.color = Color.FromArgb(89, 89, 89)\n        percentStyle.font.name = \"Trebuchet MS\"\n\n\n        val comma0Style = workbook.styles.get(\"Comma [0]\")\n        comma0Style.numberFormat = \"#,##0_);(#,##0)\"\n        comma0Style.includeAlignment = true\n        comma0Style.horizontalAlignment = HorizontalAlignment.Right\n        comma0Style.indentLevel = 3\n        comma0Style.verticalAlignment = VerticalAlignment.Center\n        percentStyle.font.name = \"Trebuchet MS\"\n\n\n        //************************************Add Conditional Formatting****************\n        val dataBar = worksheet.getRange(\"F3:F9\").formatConditions.addDatabar()\n        dataBar.minPoint.type = ConditionValueTypes.Number\n        dataBar.minPoint.value = 1\n        dataBar.maxPoint.type = ConditionValueTypes.Number\n        dataBar.maxPoint.value = 0\n\n        dataBar.barFillType = DataBarFillType.Gradient\n        dataBar.barColor.color = Color.FromArgb(126, 194, 211)\n        dataBar.direction = DataBarDirection.Context\n\n        dataBar.axisColor.color = Color.GetBlack()\n        dataBar.axisPosition = DataBarAxisPosition.Automatic\n\n        dataBar.negativeBarFormat.colorType = DataBarNegativeColorType.Color\n        dataBar.negativeBarFormat.color.color = Color.GetRed()\n        dataBar.showValue = true\n\n\n        //****************************************Use NamedStyle**************************\n        worksheet.sheetView.displayGridlines = false\n        table.tableStyle = tableStyle\n        worksheet.getRange(\"B1\").style = titleStyle\n        worksheet.getRange(\"B1\").wrapText = false\n        worksheet.getRange(\"B2:H2\").style = heading1Style\n        worksheet.getRange(\"B3:B9\").style = commaStyle\n        worksheet.getRange(\"C3:C9\").style = normalStyle\n        worksheet.getRange(\"D3:D9\").style = dateStyle\n        worksheet.getRange(\"E3:E9\").style = currencyStyle\n        worksheet.getRange(\"F3:F9\").style = percentStyle\n        worksheet.getRange(\"G3:G9\").style = dateStyle\n        worksheet.getRange(\"H3:H9\").style = comma0Style\n\n    ",
  "com.grapecity.documents.excel.examples.showcase.BloodSugarTracker": "\n\n        //Load template file Blood sugar tracker.xlsx from resource\n        workbook.open(this.getResourceStream(\"xlsx/Blood sugar tracker.xlsx\")!!)\n\n        val worksheet = workbook.activeSheet\n\n        //insert 19 rows\n        worksheet.getRange(\"1:19\").insert()\n\n        //Change the rows(2~5) RowHeight\n        worksheet.rows.get(1).rowHeight = 34.5\n        worksheet.rows.get(2).rowHeight = 15.75\n        worksheet.rows.get(3).rowHeight = 19.5\n        worksheet.rows.get(4).rowHeight = 15.75\n\n        //Set values\n        worksheet.getRange(\"B2\").value = \"BLOOD SUGAR TRACKING\"\n        worksheet.getRange(\"B4\").value = \"CHARTED PROGRESS\"\n\n        //Set Styles\n        worksheet.getRange(\"B2\").font.themeFont = ThemeFont.Major\n        worksheet.getRange(\"B2\").font.size = 26.0\n        worksheet.getRange(\"B2\").font.themeColor = ThemeColor.Dark1\n        worksheet.getRange(\"B2\").font.tintAndShade = 0.34998626667073579\n        worksheet.getRange(\"B2:D2\").borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thick\n        worksheet.getRange(\"B2:D2\").borders.get(BordersIndex.EdgeBottom).themeColor = ThemeColor.Accent1\n\n        worksheet.getRange(\"B4\").font.themeFont = ThemeFont.Major\n        worksheet.getRange(\"B4\").font.bold = true\n        worksheet.getRange(\"B4\").font.size = 14.0\n        worksheet.getRange(\"B4\").font.themeColor = ThemeColor.Dark1\n        worksheet.getRange(\"B4\").font.tintAndShade = 0.34998626667073579\n        worksheet.getRange(\"B4:D4\").borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thick\n        worksheet.getRange(\"B4:D4\").borders.get(BordersIndex.EdgeBottom).themeColor = ThemeColor.Accent2\n\n        //Add chart\n        val shape = worksheet.shapes.addChart(ChartType.Line, 9.75, 100.5, 365.0, 203.25)\n        shape.name = \"BloodSugarProgress\"\n\n        //Add Series.\n        val series1 = shape.chart.seriesCollection.newSeries()\n        series1.formula = \"=SERIES('BLOOD SUGAR DATA'!\\$C$23,'BLOOD SUGAR DATA'!\\$B$24:\\$B$45,'BLOOD SUGAR DATA'!\\$C$24:\\$C$45,1)\"\n        series1.format.line.color.objectThemeColor = ThemeColor.Accent1\n        series1.format.line.weight = 2.5\n\n        val series2 = shape.chart.seriesCollection.newSeries()\n        series2.formula = \"=SERIES('BLOOD SUGAR DATA'!\\$D$23,'BLOOD SUGAR DATA'!\\$B$24:\\$B$45,'BLOOD SUGAR DATA'!\\$D$24:\\$D$45,2)\"\n        series2.format.line.color.objectThemeColor = ThemeColor.Accent2\n        series2.format.line.weight = 2.5\n\n        //Hidden the chart title\n        shape.chart.hasTitle = false\n\n        //Hidden the category axis\n        val category_axis = shape.chart.axes.item(AxisType.Category)\n        category_axis.visible = false\n\n        //Set value axis units\n        val value_axis = shape.chart.axes.item(AxisType.Value)\n        value_axis.maximumScale = 140.0\n        value_axis.minimumScale = 50.0\n        value_axis.majorUnit = 10.0\n        value_axis.minorUnit = 2.0\n\n        //Add a rectange shape\n        val shape1 = worksheet.shapes.addShape(AutoShapeType.Rectangle, 385.0, 84.75, 102.0, 218.25)\n        shape1.fill.solid()\n        shape1.fill.color.objectThemeColor = ThemeColor.Accent1\n        shape1.fill.color.brightness = 0.6\n\n        //set shape's border to no line\n        shape1.line.color.colorType = SolidColorType.None\n\n        //set shape rich text\n        val shape1_p1 = shape1.textFrame.textRange.paragraphs.get(0)\n        shape1_p1.text = \"INFO:\"\n        shape1_p1.runs.add(\" Blood sugar levels will vary from person-to-person.  There are many factors to keeping it within your normal range and isn't based on sugar alone.  Consult a physician for additional information or follow-up.\")\n\n        val shape1_p2 = shape1.textFrame.textRange.paragraphs.add(\"\")\n        val shape1_p3 = shape1.textFrame.textRange.paragraphs.add(\"More info can be found here:\")\n        val shape1_p4 = shape1.textFrame.textRange.paragraphs.add(\"http://diabetes.webmd.com/blood-glucose\")\n\n        shape1.textFrame.textRange.font.size = 10.0\n        shape1.textFrame.textRange.font.themeFont = ThemeFont.Minor\n        shape1.textFrame.textRange.font.color.objectThemeColor = ThemeColor.Dark1\n        shape1.textFrame.textRange.font.color.brightness = 0.25\n        shape1_p1.runs.get(0).font.bold = true\n        shape1_p3.runs.get(0).font.bold = true\n\n        //Do table filter\n        val table = worksheet.tables.get(0)\n        table.range.autoFilter(1, \">=102\")\n\n    ",
  "com.grapecity.documents.excel.examples.showcase.PersonalNetWorthCalculator": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //-------------------------Set RowHeight & Width-----------------------------------\n        worksheet.standardHeight = 30.0\n        worksheet.standardWidth = 8.43\n\n        worksheet.getRange(\"1:1\").rowHeight = 278.25\n        worksheet.getRange(\"2:4\").rowHeight = 30.25\n        worksheet.getRange(\"8:8\").rowHeight = 55.5\n        worksheet.getRange(\"9:30\").rowHeight = 30.25\n        worksheet.getRange(\"33:33\").rowHeight = 55.5\n        worksheet.getRange(\"34:44\").rowHeight = 43.5\n        worksheet.getRange(\"A:A\").columnWidth = 2.777\n        worksheet.getRange(\"B:B\").columnWidth = 32.887\n        worksheet.getRange(\"C:C\").columnWidth = 24.219\n        worksheet.getRange(\"D:D\").columnWidth = 10.109\n        worksheet.getRange(\"E:E\").columnWidth = 61.332\n        worksheet.getRange(\"F:F\").columnWidth = 2.777\n\n\n        //-------------------------Set Table Value & Formulas-------------------------------\n        val assetsTable = worksheet.tables.add(worksheet.getRange(\"B9:D30\"), true)\n        assetsTable.name = \"Assets\"\n        worksheet.getRange(\"B8\").value = \"Assets\"\n        worksheet.getRange(\"B9:D30\").value = arrayOf(arrayOf<Any?>(\"Category\", \"Item\", \"Value\"), arrayOf(\"Real Estate\", \"Home\", 560000), arrayOf(\"Real Estate\", \"Other\", 255000), arrayOf(\"Investments\", \"Retirement accounts\", 98000), arrayOf(\"Investments\", \"Stocks\", 53000), arrayOf(\"Investments\", \"Bonds\", 25000), arrayOf(\"Investments\", \"Mutual funds\", 33000), arrayOf(\"Investments\", \"CDs\", 74000), arrayOf(\"Investments\", \"Bullion\", 20000), arrayOf(\"Investments\", \"Trust funds\", 250000), arrayOf(\"Investments\", \"Health savings account\", 18000), arrayOf(\"Investments\", \"Face value of life insurance policy\", 85000), arrayOf(\"Investments\", \"Other\", 20000), arrayOf(\"Cash\", \"Checking accounts\", 14500), arrayOf(\"Cash\", \"Savings accounts\", 5000), arrayOf(\"Cash\", \"Other\", 2000), arrayOf(\"Personal Property\", \"Cars\", 55000), arrayOf(\"Personal Property\", \"Other vehicles\", 85000), arrayOf(\"Personal Property\", \"Furnishings\", 100000), arrayOf(\"Personal Property\", \"Collectibles\", 50000), arrayOf(\"Personal Property\", \"Jewelry\", 60000), arrayOf(\"Personal Property\", \"Other luxury goods\", 40000))\n\n        val debtsTable = worksheet.tables.add(worksheet.getRange(\"B34:C44\"), true)\n        debtsTable.name = \"Debts\"\n        worksheet.getRange(\"B33\").value = \"Debts\"\n        worksheet.getRange(\"B34:C44\").value = arrayOf(arrayOf<Any?>(\"Category\", \"Value\"), arrayOf(\"Mortgages\", 400000), arrayOf(\"Home equity loans\", 50000), arrayOf(\"Car loans\", 30000), arrayOf(\"Personal loans\", 0), arrayOf(\"Credit cards\", 0), arrayOf(\"Student loans\", 10000), arrayOf(\"Loans against investments\", 20000), arrayOf(\"Life insurance loans\", 5000), arrayOf(\"Other installment loans\", 10000), arrayOf(\"Other debts\", 50000))\n\n        worksheet.getRange(\"B1:C1\").merge()\n        worksheet.getRange(\"B1\").value = \"Personal\\r\\nNet\\r\\nWorth\"\n        worksheet.getRange(\"B2\").formula = \"=\\\"Total \\\"&TotalAssetsLabel\"\n        worksheet.getRange(\"B3\").formula = \"=\\\"Total \\\"&TotalDebtsLabel\"\n        worksheet.getRange(\"B4\").formula = \"=NetWorthLabel\"\n        worksheet.getRange(\"C2\").formula = \"=TotalAssets\"\n        worksheet.getRange(\"C3\").formula = \"=TotalDebts\"\n        worksheet.getRange(\"C4\").formula = \"=NetWorth\"\n\n        worksheet.names.add(\"TotalAssets\", \"=SUM(Assets[Value])\")\n        worksheet.names.add(\"TotalDebts\", \"=SUM(Debts[Value])\")\n        worksheet.names.add(\"NetWorth\", \"=TotalAssets-TotalDebts\")\n        worksheet.names.add(\"TotalAssetsLabel\", \"=Sheet1!\\$B$8\")\n        worksheet.names.add(\"TotalDebtsLabel\", \"=Sheet1!\\$B$33\")\n        worksheet.names.add(\"NetWorthLabel\", \"=\\\"Net Worth\\\"\")\n\n\n        //---------------------------Set Table Style---------------------------\n        val assetsTableStyle = workbook.tableStyles.add(\"Assets\")\n        workbook.defaultTableStyle = \"Assets\"\n        assetsTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).font.color = Color.FromArgb(64, 64, 64)\n        assetsTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.color = Color.FromArgb(128, 128, 128)\n        assetsTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.InsideHorizontal).lineStyle = BorderLineStyle.Dotted\n        assetsTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thin\n        assetsTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeTop).lineStyle = BorderLineStyle.None\n        assetsTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeLeft).lineStyle = BorderLineStyle.None\n        assetsTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeRight).lineStyle = BorderLineStyle.None\n        assetsTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.InsideVertical).lineStyle = BorderLineStyle.None\n\n        assetsTableStyle.tableStyleElements.get(TableStyleElementType.SecondRowStripe).interior.color = Color.GetWhite()\n        assetsTableStyle.tableStyleElements.get(TableStyleElementType.SecondRowStripe).stripeSize = 1\n\n        assetsTableStyle.tableStyleElements.get(TableStyleElementType.LastColumn).font.bold = true\n        assetsTableStyle.tableStyleElements.get(TableStyleElementType.LastColumn).font.color = Color.FromArgb(61, 125, 137)\n        assetsTableStyle.tableStyleElements.get(TableStyleElementType.LastColumn).interior.color = Color.GetWhite()\n\n        assetsTableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).interior.color = Color.FromArgb(61, 125, 137)\n\n\n        val debtsTableStyle = workbook.tableStyles.add(\"Debts\")\n        debtsTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).font.color = Color.FromArgb(64, 64, 64)\n        debtsTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.color = Color.FromArgb(128, 128, 128)\n        debtsTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.InsideHorizontal).lineStyle = BorderLineStyle.Dotted\n        debtsTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thin\n        debtsTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeTop).lineStyle = BorderLineStyle.None\n        debtsTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeLeft).lineStyle = BorderLineStyle.None\n        debtsTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.EdgeRight).lineStyle = BorderLineStyle.None\n        debtsTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.get(BordersIndex.InsideVertical).lineStyle = BorderLineStyle.None\n\n        debtsTableStyle.tableStyleElements.get(TableStyleElementType.SecondRowStripe).interior.color = Color.GetWhite()\n        debtsTableStyle.tableStyleElements.get(TableStyleElementType.SecondRowStripe).stripeSize = 1\n\n        debtsTableStyle.tableStyleElements.get(TableStyleElementType.LastColumn).font.bold = true\n        debtsTableStyle.tableStyleElements.get(TableStyleElementType.LastColumn).font.color = Color.FromArgb(146, 75, 12)\n        debtsTableStyle.tableStyleElements.get(TableStyleElementType.LastColumn).interior.color = Color.GetWhite()\n\n        debtsTableStyle.tableStyleElements.get(TableStyleElementType.HeaderRow).interior.color = Color.FromArgb(218, 113, 18)\n\n\n        //----------------------------Set Named Styles-------------------------\n        val normalStyle = workbook.styles.get(\"Normal\")\n        normalStyle.font.name = \"Century Gothic\"\n        normalStyle.font.size = 12.0\n        normalStyle.font.color = Color.FromArgb(64, 64, 64)\n        normalStyle.interior.color = Color.FromArgb(243, 243, 236)\n        normalStyle.interior.patternColor = Color.FromArgb(243, 243, 236)\n        normalStyle.horizontalAlignment = HorizontalAlignment.Left\n        normalStyle.indentLevel = 1\n        normalStyle.verticalAlignment = VerticalAlignment.Center\n        normalStyle.wrapText = true\n\n        val titleStyle = workbook.styles.get(\"Title\")\n        titleStyle.includeAlignment = true\n        titleStyle.verticalAlignment = VerticalAlignment.Center\n        titleStyle.wrapText = true\n        titleStyle.font.name = \"Century Gothic\"\n        titleStyle.font.size = 66.0\n        titleStyle.font.color = Color.FromArgb(64, 64, 64)\n        titleStyle.includePatterns = true\n        titleStyle.interior.color = Color.FromArgb(243, 243, 236)\n\n        val heading1Style = workbook.styles.get(\"Heading 1\")\n        heading1Style.includeAlignment = true\n        heading1Style.horizontalAlignment = HorizontalAlignment.Left\n        heading1Style.indentLevel = 4\n        heading1Style.verticalAlignment = VerticalAlignment.Center\n        heading1Style.font.name = \"Century Gothic\"\n        heading1Style.font.bold = false\n        heading1Style.font.size = 16.0\n        heading1Style.font.color = Color.FromArgb(64, 64, 64)\n        heading1Style.includeBorder = false\n        heading1Style.includePatterns = true\n        heading1Style.interior.color = Color.FromArgb(243, 243, 236)\n\n        val heading2Style = workbook.styles.get(\"Heading 2\")\n        heading2Style.includeNumber = true\n        heading2Style.numberFormat = \"$#,##0\"\n        heading2Style.includeAlignment = true\n        heading2Style.horizontalAlignment = HorizontalAlignment.Right\n        heading2Style.indentLevel = 2\n        heading2Style.verticalAlignment = VerticalAlignment.Center\n        heading2Style.font.name = \"Century Gothic\"\n        heading2Style.font.size = 16.0\n        heading2Style.font.color = Color.FromArgb(64, 64, 64)\n        heading2Style.includeBorder = false\n        heading2Style.includePatterns = true\n        heading2Style.interior.color = Color.FromArgb(243, 243, 236)\n\n        val heading3Style = workbook.styles.get(\"Heading 3\")\n        heading3Style.includeAlignment = true\n        heading3Style.horizontalAlignment = HorizontalAlignment.Left\n        heading3Style.verticalAlignment = VerticalAlignment.Bottom\n        heading3Style.includeBorder = false\n        heading3Style.font.name = \"Century Gothic\"\n        heading3Style.font.bold = false\n        heading3Style.font.size = 27.0\n        heading3Style.font.color = Color.FromArgb(64, 64, 64)\n        heading3Style.includePatterns = true\n        heading3Style.interior.color = Color.FromArgb(243, 243, 236)\n\n        val heading4Style = workbook.styles.get(\"Heading 4\")\n        heading4Style.font.name = \"Century Gothic\"\n        heading4Style.font.size = 16.0\n        heading4Style.font.color = Color.GetWhite()\n        heading4Style.font.bold = false\n\n        val currencyStyle = workbook.styles.get(\"Currency\")\n        currencyStyle.numberFormat = \"$#,##0\"\n        currencyStyle.includeAlignment = true\n        currencyStyle.horizontalAlignment = HorizontalAlignment.Right\n        currencyStyle.indentLevel = 1\n        currencyStyle.verticalAlignment = VerticalAlignment.Center\n        currencyStyle.includeFont = true\n        currencyStyle.font.bold = true\n        currencyStyle.font.name = \"Century Gothic\"\n        currencyStyle.font.size = 12.0\n\n\n        //----------------------------------Use Style---------------------------\n        assetsTable.tableStyle = assetsTableStyle\n        debtsTable.tableStyle = debtsTableStyle\n\n        worksheet.sheetView.displayGridlines = false\n        worksheet.getRange(\"B2:B4\").style = heading1Style\n        worksheet.getRange(\"C2:C4\").style = heading2Style\n        worksheet.getRange(\"B9:D9\").style = heading4Style\n        worksheet.getRange(\"D10:D30\").style = currencyStyle\n        worksheet.getRange(\"D10:D30\").font.color = Color.FromArgb(61, 125, 137)\n\n        worksheet.getRange(\"B34:C34\").style = heading4Style\n        worksheet.getRange(\"C35:C44\").style = currencyStyle\n        worksheet.getRange(\"C35:C44\").font.color = Color.FromArgb(218, 113, 18)\n        worksheet.getRange(\"B1\").style = titleStyle\n        worksheet.getRange(\"B8\").style = heading3Style\n        worksheet.getRange(\"B33\").style = heading3Style\n\n        worksheet.getRange(\"B3:C3\").borders.get(BordersIndex.EdgeTop).lineStyle = BorderLineStyle.Hair\n        worksheet.getRange(\"B3:C3\").borders.get(BordersIndex.EdgeTop).color = Color.FromArgb(128, 128, 128)\n        worksheet.getRange(\"B3:C3\").borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Hair\n        worksheet.getRange(\"B3:C3\").borders.get(BordersIndex.EdgeBottom).color = Color.FromArgb(128, 128, 128)\n\n\n        //--------------------------------Add Shape--------------------------------\n        val recShape1 = worksheet.shapes.addShape(AutoShapeType.Rectangle, 17.81, 282.75, 20.963, 21.75)\n        recShape1.line.color.colorType = SolidColorType.None\n        recShape1.fill.color.rgb = Color.FromArgb(60, 126, 138)\n        val recShape2 = worksheet.shapes.addShape(AutoShapeType.Rectangle, 17.81, 312.75, 20.963, 21.75)\n        recShape2.line.color.colorType = SolidColorType.None\n        recShape2.fill.color.rgb = Color.FromArgb(218, 118, 13)\n        val recShape3 = worksheet.shapes.addShape(AutoShapeType.Rectangle, 17.81, 342.75, 20.963, 21.75)\n        recShape3.line.color.colorType = SolidColorType.None\n        recShape3.fill.color.rgb = Color.FromArgb(84, 138, 57)\n\n        val pieShape = worksheet.shapes.addChart(ChartType.Pie, 442.5, 26.25, 346.0, 350.25)\n        pieShape.chart.hasLegend = false\n        pieShape.chart.hasTitle = false\n        pieShape.chart.chartGroups.get(0).firstSliceAngle = 180\n        pieShape.placement = Placement.Move\n\n        val chartArea = pieShape.chart.chartArea\n        chartArea.format.fill.transparency = 1.0\n        chartArea.format.line.transparency = 1.0\n\n        val chartSeries = pieShape.chart.seriesCollection.newSeries()\n        chartSeries.formula = \"=SERIES('Sheet1'!\\$B$2:\\$B$4,,'Sheet1'!\\$C$2:\\$C$4,1)\"\n\n        chartSeries.hasDataLabels = true\n        chartSeries.dataLabels.font.name = \"Century Gothic\"\n        chartSeries.dataLabels.font.size = 20.0\n        chartSeries.dataLabels.font.bold = true\n        chartSeries.dataLabels.font.color.rgb = Color.GetWhite()\n        chartSeries.dataLabels.showValue = false\n        chartSeries.dataLabels.showPercentage = true\n        chartSeries.dataLabels.position = DataLabelPosition.Center\n\n        chartSeries.points.get(0).format.fill.color.rgb = Color.FromArgb(60, 126, 138)\n        chartSeries.points.get(1).format.fill.color.rgb = Color.FromArgb(218, 118, 13)\n        chartSeries.points.get(2).format.fill.color.rgb = Color.FromArgb(84, 138, 57)\n        chartSeries.explosion = 1\n\n\n    ",
  "com.grapecity.documents.excel.examples.showcase.FinancialKPIs": "\n\n        //Load template file Financial KPIs.xlsx from resource\n        workbook.open(this.getResourceStream(\"xlsx/Financial KPIs.xlsx\")!!)\n\n        val worksheet = workbook.activeSheet\n\n        //set values\n        val proData = arrayOf(arrayOf<Any?>(1483550, 121386), arrayOf<Any?>(0.4336, 0.32), arrayOf<Any?>(0.1236, -0.0438), arrayOf<Any?>(12.36, -0.0438))\n\n        val proData1 = arrayOf<Any?>(0.14, 0.0029, 0.0361, 0.0361)\n\n        worksheet.getRange(\"E7:F10\").value = proData\n        worksheet.getRange(\"I7:I10\").value = proData1\n\n        val activeData = arrayOf(arrayOf<Any?>(\"4.32 item\", \"2.00 item\"), arrayOf<Any?>(\"72 days\", \"45 days\"), arrayOf<Any?>(\"53 days\", \"55 days\"))\n\n        val activeData1 = arrayOf<Any?>(\"0.45 items\", \"-5 days\", \"-6 days\")\n\n        worksheet.getRange(\"E12:F14\").value = activeData\n        worksheet.getRange(\"I12:I14\").value = activeData1\n\n        val effData = arrayOf(arrayOf<Any?>(0.3446, 0.25), arrayOf<Any?>(0.5335, 0.11))\n\n        val effData1 = arrayOf<Any?>(0.1245, 0.1946)\n\n        worksheet.getRange(\"E16:F17\").value = effData\n        worksheet.getRange(\"I16:I17\").value = effData1\n\n        val linData = arrayOf(arrayOf<Any?>(\"0.91:1\", \"'2:1\"), arrayOf<Any?>(\"0.58:1\", \"'1:1\"))\n\n        val linData1 = arrayOf<Any?>(\"'0.02:1\", \"'0.03:1\")\n\n        worksheet.getRange(\"E19:F20\").value = linData\n        worksheet.getRange(\"I19:I20\").value = linData1\n\n        val geaData = arrayOf(arrayOf<Any?>(-9.60, 0.85), arrayOf<Any?>(0.68, 0.5))\n\n        val geaData1 = arrayOf<Any?>(6.65, 0.0282)\n\n        worksheet.getRange(\"E22:F23\").value = geaData\n        worksheet.getRange(\"I22:I23\").value = geaData1\n\n        val casData = arrayOf(arrayOf<Any?>(0.0735, 1.2), arrayOf<Any?>(0.1442, 0.1442))\n\n        val casData1 = arrayOf<Any?>(-0.0046, 0.023)\n\n        worksheet.getRange(\"E25:F26\").value = casData\n        worksheet.getRange(\"I25:I26\").value = casData1\n\n    ",
  "com.grapecity.documents.excel.examples.showcase.BasicSalesReport": "\n\n        //create a custom theme.\n        val theme = Theme(\"testTheme\")\n        theme.themeColorScheme.get(ThemeColor.Light1).rgb = Color.FromArgb(255, 255, 255)\n        theme.themeColorScheme.get(ThemeColor.Dark1).rgb = Color.FromArgb(0, 0, 0)\n        theme.themeColorScheme.get(ThemeColor.Light2).rgb = Color.FromArgb(255, 255, 255)\n        theme.themeColorScheme.get(ThemeColor.Dark2).rgb = Color.FromArgb(0, 0, 0)\n        theme.themeColorScheme.get(ThemeColor.Accent1).rgb = Color.FromArgb(140, 198, 63)\n        theme.themeColorScheme.get(ThemeColor.Accent2).rgb = Color.FromArgb(242, 116, 45)\n        theme.themeColorScheme.get(ThemeColor.Accent3).rgb = Color.FromArgb(106, 159, 207)\n        theme.themeColorScheme.get(ThemeColor.Accent4).rgb = Color.FromArgb(242, 192, 45)\n        theme.themeColorScheme.get(ThemeColor.Accent5).rgb = Color.FromArgb(146, 98, 174)\n        theme.themeColorScheme.get(ThemeColor.Accent6).rgb = Color.FromArgb(121, 198, 199)\n        theme.themeColorScheme.get(ThemeColor.Hyperlink).rgb = Color.FromArgb(106, 159, 207)\n        theme.themeColorScheme.get(ThemeColor.FollowedHyperlink).rgb = Color.FromArgb(146, 98, 74)\n        theme.themeFontScheme.major.get(FontLanguageIndex.Latin).name = \"Garamond\"\n        theme.themeFontScheme.minor.get(FontLanguageIndex.Latin).name = \"Garamond\"\n\n        //assign the custom theme for workbook.\n        workbook.theme = theme\n\n\n        //Change built-in custom styles.\n        val style_Title = workbook.styles.get(\"Title\")\n        style_Title.font.themeFont = ThemeFont.Major\n        style_Title.font.size = 26.0\n        style_Title.font.bold = true\n        style_Title.font.themeColor = ThemeColor.Light1\n        style_Title.includeAlignment = false\n        style_Title.includeFont = true\n        style_Title.includeBorder = false\n        style_Title.includeNumber = false\n        style_Title.includePatterns = false\n        style_Title.includeProtection = false\n\n        val style_Normal = workbook.styles.get(\"Normal\")\n        style_Normal.horizontalAlignment = HorizontalAlignment.General\n        style_Normal.verticalAlignment = VerticalAlignment.Center\n        style_Normal.font.themeFont = ThemeFont.Minor\n        style_Normal.font.size = 9.0\n        style_Normal.font.themeColor = ThemeColor.Dark1\n        style_Normal.includeAlignment = true\n        style_Normal.includeFont = true\n        style_Normal.includeBorder = true\n        style_Normal.includeNumber = true\n        style_Normal.includePatterns = true\n        style_Normal.includeProtection = true\n\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.name = \"Data Input\"\n        //hide worksheet gridlines.\n        worksheet.sheetView.displayGridlines = false\n\n        //RowHeightColumnWidth\n        worksheet.standardHeight = 18.75\n        worksheet.standardWidth = 8.43\n\n        worksheet.getRange(\"1:1\").rowHeight = 51.75\n        worksheet.getRange(\"2:2\").rowHeight = 20.25\n        worksheet.getRange(\"3:87\").rowHeight = 19.0\n\n        worksheet.getRange(\"A:A\").columnWidth = 2.28515625\n        worksheet.getRange(\"B:B\").columnWidth = 16.85546875\n        worksheet.getRange(\"C:C\").columnWidth = 20.5703125\n        worksheet.getRange(\"D:D\").columnWidth = 27.7109375\n        worksheet.getRange(\"E:E\").columnWidth = 17.7109375\n        worksheet.getRange(\"F:F\").columnWidth = 18.140625\n        worksheet.getRange(\"G:G\").columnWidth = 2.28515625\n\n        //Values\n        worksheet.getRange(\"B1\").value = \"DATA INPUT\"\n\n        //Table\n        worksheet.getRange(\"B2:F87\").value = arrayOf(arrayOf<Any?>(\"DATE\", \"PRODUCT\", \"CUSTOMER\", \"AMOUNT\", \"QUARTER\"), arrayOf(GregorianCalendar(2012, 0, 1), \"Product 14\", \"Fabrikam, Inc.\", 1886, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 0, 3), \"Product 23\", \"Alpine Ski House\", 4022, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 0, 4), \"Product 18\", \"Coho Winery\", 8144, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 0, 7), \"Product 10\", \"Southridge Video\", 8002, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 0, 11), \"Product 7\", \"Coho Winery\", 6392, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 0, 25), \"Product 1\", \"Contoso, Ltd\", 6444, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 0, 30), \"Product 27\", \"Southridge Video\", 2772, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 1, 4), \"Product 30\", \"City Power & Light\", 8674, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 1, 5), \"Product 16\", \"A. Datum Corporation\", 2332, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 1, 8), \"Product 21\", \"Alpine Ski House\", 5370, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 1, 10), \"Product 6\", \"City Power & Light\", 1768, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 1, 17), \"Product 24\", \"Coho Winery\", 5474, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 1, 22), \"Product 28\", \"Fabrikam, Inc.\", 3494, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 1, 24), \"Product 22\", \"City Power & Light\", 1484, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 1, 29), \"Product 26\", \"Humongous Insurance\", 5454, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 2, 1), \"Product 15\", \"City Power & Light\", 2306, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 2, 8), \"Product 9\", \"A. Datum Corporation\", 8652, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 2, 14), \"Product 16\", \"Alpine Ski House\", 3594, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 2, 31), \"Product 28\", \"City Power & Light\", 9130, \"QUARTER 1\"), arrayOf(GregorianCalendar(2012, 3, 3), \"Product 28\", \"Southridge Video\", 9986, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 3, 9), \"Product 2\", \"Fabrikam, Inc.\", 8270, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 3, 10), \"Product 30\", \"A. Datum Corporation\", 5184, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 3, 11), \"Product 25\", \"Contoso, Ltd\", 9426, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 3, 11), \"Product 15\", \"Humongous Insurance\", 4012, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 3, 15), \"Product 28\", \"Coho Winery\", 7724, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 4, 3), \"Product 21\", \"Northwind Traders\", 2264, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 4, 4), \"Product 30\", \"Coho Winery\", 9374, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 4, 5), \"Product 17\", \"Humongous Insurance\", 3692, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 4, 5), \"Product 28\", \"Humongous Insurance\", 9124, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 4, 19), \"Product 22\", \"Humongous Insurance\", 4962, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 4, 22), \"Product 8\", \"A. Datum Corporation\", 9166, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 4, 31), \"Product 16\", \"Coho Winery\", 5610, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 5, 2), \"Product 8\", \"City Power & Light\", 3322, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 5, 2), \"Product 3\", \"Humongous Insurance\", 2592, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 5, 4), \"Product 13\", \"Contoso, Ltd\", 4444, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 5, 9), \"Product 10\", \"Southridge Video\", 7166, \"QUARTER 2\"), arrayOf(GregorianCalendar(2012, 5, 12), \"Product 13\", \"Fabrikam, Inc.\", 5008, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 5, 26), \"Product 2\", \"Contoso, Ltd\", 3578, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 5, 29), \"Product 22\", \"Southridge Video\", 1144, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 6, 2), \"Product 14\", \"Alpine Ski House\", 3696, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 6, 6), \"Product 14\", \"Coho Winery\", 7084, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 6, 6), \"Product 2\", \"City Power & Light\", 4642, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 6, 8), \"Product 5\", \"Fabrikam, Inc.\", 6078, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 6, 10), \"Product 9\", \"Alpine Ski House\", 2394, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 6, 15), \"Product 13\", \"Southridge Video\", 5516, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 6, 16), \"Product 8\", \"Fabrikam, Inc.\", 1948, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 6, 19), \"Product 28\", \"Contoso, Ltd\", 7280, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 6, 29), \"Product 26\", \"A. Datum Corporation\", 9292, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 7, 19), \"Product 26\", \"Fabrikam, Inc.\", 5868, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 7, 19), \"Product 6\", \"Northwind Traders\", 4098, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 7, 20), \"Product 13\", \"A. Datum Corporation\", 1270, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 7, 20), \"Product 23\", \"A. Datum Corporation\", 7744, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 7, 24), \"Product 2\", \"Humongous Insurance\", 5488, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 7, 24), \"Product 5\", \"Southridge Video\", 6944, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 7, 25), \"Product 20\", \"Fabrikam, Inc.\", 4454, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 7, 27), \"Product 13\", \"City Power & Light\", 7100, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 7, 30), \"Product 8\", \"Humongous Insurance\", 4346, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 8, 1), \"Product 25\", \"Alpine Ski House\", 2032, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 8, 17), \"Product 20\", \"Contoso, Ltd\", 2328, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 8, 22), \"Product 18\", \"Humongous Insurance\", 6090, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 8, 25), \"Product 19\", \"Coho Winery\", 8344, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 8, 29), \"Product 11\", \"Alpine Ski House\", 5872, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 8, 30), \"Product 25\", \"Humongous Insurance\", 1578, \"QUARTER 3\"), arrayOf(GregorianCalendar(2012, 9, 2), \"Product 29\", \"City Power & Light\", 1714, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 9, 5), \"Product 11\", \"Fabrikam, Inc.\", 5716, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 9, 6), \"Product 21\", \"Coho Winery\", 8244, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 9, 14), \"Product 11\", \"A. Datum Corporation\", 8888, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 9, 14), \"Product 23\", \"City Power & Light\", 9438, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 10, 9), \"Product 14\", \"Southridge Video\", 6230, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 10, 13), \"Product 17\", \"A. Datum Corporation\", 4278, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 10, 17), \"Product 6\", \"Alpine Ski House\", 5438, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 10, 22), \"Product 1\", \"Coho Winery\", 6728, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 10, 25), \"Product 30\", \"Fabrikam, Inc.\", 9992, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 10, 25), \"Product 26\", \"Northwind Traders\", 8462, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 10, 27), \"Product 11\", \"Contoso, Ltd\", 7930, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 10, 30), \"Product 30\", \"Northwind Traders\", 8136, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 11, 2), \"Product 13\", \"Humongous Insurance\", 6212, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 11, 5), \"Product 3\", \"Contoso, Ltd\", 4946, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 11, 5), \"Product 3\", \"Southridge Video\", 8554, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 11, 10), \"Product 24\", \"Northwind Traders\", 4508, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 11, 21), \"Product 7\", \"Humongous Insurance\", 7300, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 11, 24), \"Product 17\", \"Fabrikam, Inc.\", 8292, \"QUARTER 4\"), arrayOf(GregorianCalendar(2012, 11, 26), \"Product 26\", \"Alpine Ski House\", 9782, \"QUARTER 4\"), arrayOf(GregorianCalendar(2013, 0, 3), \"Product 19\", \"Fabrikam, Inc.\", 8024, \"QUARTER 1\"), arrayOf(GregorianCalendar(2013, 0, 4), \"Product 22\", \"A. Datum Corporation\", 3758, \"QUARTER 1\"))\n\n        val table_Data = worksheet.tables.add(worksheet.getRange(\"B2:F87\"), true)\n\n        //set built-in table style for table.\n        table_Data.tableStyle = workbook.tableStyles.get(\"TableStyleMedium2\")\n\n        //customize table header range's style.\n        table_Data.headerRange.horizontalAlignment = HorizontalAlignment.Left\n        table_Data.headerRange.indentLevel = 1\n        table_Data.headerRange.verticalAlignment = VerticalAlignment.Center\n        table_Data.headerRange.font.size = 11.0\n\n        //customize table each column's data body range's style.\n        table_Data.columns.get(0).dataBodyRange.horizontalAlignment = HorizontalAlignment.Left\n        table_Data.columns.get(0).dataBodyRange.indentLevel = 1\n        table_Data.columns.get(0).dataBodyRange.verticalAlignment = VerticalAlignment.Center\n        table_Data.columns.get(1).dataBodyRange.horizontalAlignment = HorizontalAlignment.Left\n        table_Data.columns.get(1).dataBodyRange.indentLevel = 1\n        table_Data.columns.get(1).dataBodyRange.verticalAlignment = VerticalAlignment.Center\n        table_Data.columns.get(2).dataBodyRange.horizontalAlignment = HorizontalAlignment.Left\n        table_Data.columns.get(2).dataBodyRange.indentLevel = 1\n        table_Data.columns.get(2).dataBodyRange.verticalAlignment = VerticalAlignment.Center\n        table_Data.columns.get(3).dataBodyRange.horizontalAlignment = HorizontalAlignment.Right\n        table_Data.columns.get(3).dataBodyRange.indentLevel = 1\n        table_Data.columns.get(3).dataBodyRange.verticalAlignment = VerticalAlignment.Bottom\n        table_Data.columns.get(3).dataBodyRange.numberFormat = \"$#,##0.00\"\n        table_Data.columns.get(4).dataBodyRange.horizontalAlignment = HorizontalAlignment.Left\n        table_Data.columns.get(4).dataBodyRange.indentLevel = 1\n        table_Data.columns.get(4).dataBodyRange.verticalAlignment = VerticalAlignment.Bottom\n\n\n        //Slicers\n        //create slicer caches.\n        val cache_customer = workbook.slicerCaches.add(table_Data, \"CUSTOMER\", \"CUSTOMER\")\n        val cache_product = workbook.slicerCaches.add(table_Data, \"PRODUCT\", \"PRODUCT\")\n\n        //create slicers.\n        val slicer_customer = cache_customer.slicers.add(worksheet, \"CUSTOMER\", \"CUSTOMER\", 51.914015748031495, 551.0, 144.0, 190.0)\n        val slicer_product = cache_product.slicers.add(worksheet, \"PRODUCT\", \"PRODUCT\", 51.914015748031495, 691.0, 144.0, 190.0)\n\n        //assign built-in slicer style for slicers.\n        slicer_customer.style = workbook.tableStyles.get(\"SlicerStyleDark1\")\n        slicer_product.style = workbook.tableStyles.get(\"SlicerStyleDark1\")\n\n\n        //Style\n        worksheet.getRange(\"1:1\").style = workbook.styles.get(\"Title\")\n        worksheet.getRange(\"1:1\").interior.themeColor = ThemeColor.Accent1\n        worksheet.getRange(\"1:1\").horizontalAlignment = HorizontalAlignment.Left\n        worksheet.getRange(\"1:1\").indentLevel = 1\n        worksheet.getRange(\"1:1\").verticalAlignment = VerticalAlignment.Center\n        worksheet.getRange(\"A1\").style = workbook.styles.get(\"Normal\")\n\n\n        //Worksheet_CustomizableReport\n        val worksheet2 = workbook.worksheets.add()\n        worksheet2.name = \"Customizable Report\"\n        worksheet2.sheetView.displayGridlines = false\n\n        //RowHeightColumnWidth\n        worksheet2.standardHeight = 16.5\n        worksheet2.standardWidth = 8.43\n        worksheet2.getRange(\"1:1\").rowHeight = 51.75\n        worksheet2.getRange(\"2:116\").rowHeight = 14.25\n        worksheet2.getRange(\"A:A\").columnWidth = 2.28515625\n        worksheet2.getRange(\"B:B\").columnWidth = 23.140625\n        worksheet2.getRange(\"C:C\").columnWidth = 15.5703125\n        worksheet2.getRange(\"D:F\").columnWidth = 11.42578125\n        worksheet2.getRange(\"G:H\").columnWidth = 13.42578125\n\n        //Values\n        worksheet2.getRange(\"B1\").value = \"SALES REPORT\"\n\n\n        //Style\n        worksheet2.getRange(\"1:1\").style = workbook.styles.get(\"Title\")\n        worksheet2.getRange(\"1:1\").interior.themeColor = ThemeColor.Accent1\n        worksheet2.getRange(\"1:1\").horizontalAlignment = HorizontalAlignment.Left\n        worksheet2.getRange(\"1:1\").indentLevel = 1\n        worksheet2.getRange(\"1:1\").verticalAlignment = VerticalAlignment.Center\n        worksheet2.getRange(\"A1\").style = workbook.styles.get(\"Normal\")\n\n        //Shape\n        //create a shape.\n        val shape = worksheet2.shapes.addShape(AutoShapeType.RectangularCallout, 472.0, 65.0, 300.0, 70.0)\n        //config shape's line and fill.\n        shape.line.dashStyle = LineDashStyle.Solid\n        shape.line.weight = 4.0\n        shape.line.color.rgb = Color.FromArgb(89, 89, 89)\n        shape.fill.solid()\n        shape.fill.color.colorType = SolidColorType.None\n\n        //config shape's rich text.\n        val shape_p1 = shape.textFrame.textRange.paragraphs.get(0)\n        shape_p1.text = \"TIP:\"\n        val shape_p2 = shape.textFrame.textRange.paragraphs.add()\n        shape_p2.text = \"Customize this PivotTable to fit your needs! Select a cell in the PivotTable to activate the PivotTable Field List pane. Then in the task pane, drag to add, remove, or reorder the fields.\" + \" For example, drag the Product field above the Customer field for a different view. To update PivotTable data, right-click in the PivotTable and then click Refresh.\"\n\n        //set first paragraph's font style.\n        shape_p1.font.themeFont = ThemeFont.Major\n        shape_p1.font.bold = true\n        shape_p1.font.size = 12.0\n        shape_p1.font.color.objectThemeColor = ThemeColor.Dark1\n        shape_p1.font.color.brightness = 0.25\n\n        //set second paragraph's font style.\n        shape_p2.font.themeFont = ThemeFont.Minor\n        shape_p2.font.size = 8.0\n        shape_p2.font.color.objectThemeColor = ThemeColor.Dark1\n        shape_p2.font.color.brightness = 0.25\n\n\n        //Worksheet_DataLists\n        val worksheet3 = workbook.worksheets.add()\n        worksheet3.name = \"Data Lists\"\n        worksheet3.sheetView.displayGridlines = false\n\n        //RowHeightColumnWidth\n        worksheet3.standardHeight = 18.75\n        worksheet3.standardWidth = 8.43\n        worksheet3.getRange(\"1:1\").rowHeight = 51.75\n        worksheet3.getRange(\"2:32\").rowHeight = 19.0\n        worksheet3.getRange(\"A:A, D:D\").columnWidth = 2.28515625\n        worksheet3.getRange(\"B:C\").columnWidth = 34.42578125\n\n        //Values\n        worksheet3.getRange(\"B1\").value = \"DATA LISTS\"\n\n        //Table\n        worksheet3.getRange(\"B2:B32\").value = arrayOf(arrayOf<Any?>(\"PRODUCTS\"), arrayOf<Any?>(\"Product 1\"), arrayOf<Any?>(\"Product 2\"), arrayOf<Any?>(\"Product 3\"), arrayOf<Any?>(\"Product 4\"), arrayOf<Any?>(\"Product 5\"), arrayOf<Any?>(\"Product 6\"), arrayOf<Any?>(\"Product 7\"), arrayOf<Any?>(\"Product 8\"), arrayOf<Any?>(\"Product 9\"), arrayOf<Any?>(\"Product 10\"), arrayOf<Any?>(\"Product 11\"), arrayOf<Any?>(\"Product 12\"), arrayOf<Any?>(\"Product 13\"), arrayOf<Any?>(\"Product 14\"), arrayOf<Any?>(\"Product 15\"), arrayOf<Any?>(\"Product 16\"), arrayOf<Any?>(\"Product 17\"), arrayOf<Any?>(\"Product 18\"), arrayOf<Any?>(\"Product 19\"), arrayOf<Any?>(\"Product 20\"), arrayOf<Any?>(\"Product 21\"), arrayOf<Any?>(\"Product 22\"), arrayOf<Any?>(\"Product 23\"), arrayOf<Any?>(\"Product 24\"), arrayOf<Any?>(\"Product 25\"), arrayOf<Any?>(\"Product 26\"), arrayOf<Any?>(\"Product 27\"), arrayOf<Any?>(\"Product 28\"), arrayOf<Any?>(\"Product 29\"), arrayOf<Any?>(\"Product 30\"))\n        val table_Products = worksheet3.tables.add(worksheet.getRange(\"B2:B32\"), true)\n        worksheet3.getRange(\"C2:C30\").value = arrayOf(arrayOf<Any?>(\"CUSTOMERS\"), arrayOf<Any?>(\"A. Datum Corporation\"), arrayOf<Any?>(\"Adventure Works\"), arrayOf<Any?>(\"Alpine Ski House\"), arrayOf<Any?>(\"Blue Yonder Airlines\"), arrayOf<Any?>(\"City Power & Light\"), arrayOf<Any?>(\"Coho Vineyard\"), arrayOf<Any?>(\"Coho Winery\"), arrayOf<Any?>(\"Coho Vineyard & Winery\"), arrayOf<Any?>(\"Contoso, Ltd\"), arrayOf<Any?>(\"Contoso Pharmaceuticals\"), arrayOf<Any?>(\"Consolidated Messenger\"), arrayOf<Any?>(\"Fabrikam, Inc.\"), arrayOf<Any?>(\"Fourth Coffee\"), arrayOf<Any?>(\"Graphic Design Institute\"), arrayOf<Any?>(\"Humongous Insurance\"), arrayOf<Any?>(\"Litware, Inc.\"), arrayOf<Any?>(\"Lucerne Publishing\"), arrayOf<Any?>(\"Margie's Travel\"), arrayOf<Any?>(\"Northwind Traders\"), arrayOf<Any?>(\"Proseware, Inc.\"), arrayOf<Any?>(\"School of Fine Art\"), arrayOf<Any?>(\"Southridge Video\"), arrayOf<Any?>(\"Tailspin Toys\"), arrayOf<Any?>(\"Trey Research\"), arrayOf<Any?>(\"The Phone Company\"), arrayOf<Any?>(\"Wide World Importers\"), arrayOf<Any?>(\"Wingtip Toys\"), arrayOf<Any?>(\"Woodgrove Bank\"))\n        val table_Customers = worksheet3.tables.add(worksheet.getRange(\"C2:C30\"), true)\n\n        table_Products.tableStyle = workbook.tableStyles.get(\"TableStyleMedium2\")\n        table_Products.columns.get(0).range.horizontalAlignment = HorizontalAlignment.Left\n        table_Products.columns.get(0).range.indentLevel = 1\n        table_Products.columns.get(0).range.verticalAlignment = VerticalAlignment.Center\n        table_Products.headerRange.font.size = 11.0\n\n        table_Customers.tableStyle = workbook.tableStyles.get(\"TableStyleMedium2\")\n        table_Customers.columns.get(0).range.horizontalAlignment = HorizontalAlignment.Left\n        table_Customers.columns.get(0).range.indentLevel = 1\n        table_Customers.columns.get(0).range.verticalAlignment = VerticalAlignment.Center\n        table_Customers.showTableStyleFirstColumn = true\n        table_Customers.headerRange.font.size = 11.0\n\n        //Style\n        worksheet3.getRange(\"1:1\").style = workbook.styles.get(\"Title\")\n        worksheet3.getRange(\"1:1\").interior.themeColor = ThemeColor.Accent1\n        worksheet3.getRange(\"1:1\").horizontalAlignment = HorizontalAlignment.Left\n        worksheet3.getRange(\"1:1\").indentLevel = 1\n        worksheet3.getRange(\"1:1\").verticalAlignment = VerticalAlignment.Center\n        worksheet3.getRange(\"A1\").style = workbook.styles.get(\"Normal\")\n\n        //Shape\n        val shape2 = worksheet3.shapes.addShape(AutoShapeType.RectangularCallout, 380.0, 65.0, 280.0, 50.0)\n        shape2.line.dashStyle = LineDashStyle.Solid\n        shape2.line.weight = 4.0\n        shape2.line.color.rgb = Color.FromArgb(89, 89, 89)\n        shape2.fill.solid()\n        shape2.fill.color.colorType = SolidColorType.None\n\n        val shape2_p1 = shape2.textFrame.textRange.paragraphs.get(0)\n        shape2_p1.text = \"TIP:\"\n        val shape2_p2 = shape2.textFrame.textRange.paragraphs.add()\n        shape2_p2.text = \"To add a new product or customer, start typing below the table and it will automatically expand when you press the Enter or Tab key.\"\n        shape2_p1.font.themeFont = ThemeFont.Major\n        shape2_p1.font.bold = true\n        shape2_p1.font.size = 12.0\n        shape2_p1.font.color.objectThemeColor = ThemeColor.Dark1\n        shape2_p1.font.color.brightness = 0.25\n\n        shape2_p2.font.themeFont = ThemeFont.Minor\n        shape2_p2.font.size = 8.0\n        shape2_p2.font.color.objectThemeColor = ThemeColor.Dark1\n        shape2_p2.font.color.brightness = 0.25\n\n    ",
  "com.grapecity.documents.excel.examples.exceltemplates.IncomeStatement": "\n\n        //Load template file Income statement.xlsx from resource\n        workbook.open(this.getResourceStream(\"xlsx/Income statement.xlsx\")!!)\n\n        val worksheet = workbook.activeSheet\n\n        //set values\n        val RevData = arrayOf(arrayOf<Any?>(454597, 687802, 469902, 335846, 776667, 806250, 552036, 346734, 787205, 720496, 686963, 835688), arrayOf<Any?>(821687, 679306, 568503, 715827, 627459, 822625, 271114, 797991, 823966, 304521, 758665, 322694), arrayOf<Any?>(426510, 767295, 799314, 408533, 353862, 261403, 344075, 277433, 289814, 386539, 625447, 489178))\n\n        val CostData = arrayOf(arrayOf<Any?>(113053, 134668, 192784, 199522, 163169, 109389, 187568, 170346, 130920, 180119, 184725, 162780), arrayOf<Any?>(42667, 14921, 42007, 10264, 48864, 10360, 42378, 31445, 15208, 34418, 37529, 22077))\n\n        val OpeData = arrayOf(arrayOf<Any?>(264290, 282301, 266021, 272333, 285359, 256072, 289430, 280307, 278656, 272674, 299784, 284062), arrayOf<Any?>(29536, 28709, 27579, 27862, 26750, 26970, 27847, 27680, 28375, 25474, 27514, 26753), arrayOf<Any?>(23473, 22902, 21680, 19232, 23077, 20839, 19461, 15504, 21117, 20102, 16322, 21160), arrayOf<Any?>(11340, 11514, 11207, 9186, 9243, 10003, 11092, 10761, 9032, 10366, 9571, 11774), arrayOf<Any?>(9562, 10787, 11809, 9949, 9559, 9753, 11761, 10702, 10545, 10347, 10593, 10719), arrayOf<Any?>(9410, 9646, 9969, 10758, 9183, 10777, 11249, 9763, 9445, 11218, 10579, 10203))\n\n        val EarnData = arrayOf(arrayOf<Any?>(1038, 1430, 627, 1352, 765, 1190, 1082, 1261, 1240, 645, 552, 669), arrayOf<Any?>(1227, 1372, 544, 1172, 1479, 821, 891, 1361, 1187, 760, 1126, 873), arrayOf<Any?>(661, 1342, 1119, 1085, 887, 1274, 883, 582, 601, 845, 948, 817))\n\n        worksheet.getRange(\"E10:P12\").value = RevData\n        worksheet.getRange(\"E15:P16\").value = CostData\n        worksheet.getRange(\"E21:P26\").value = OpeData\n        worksheet.getRange(\"E31:P33\").value = EarnData\n\n        //set formulars\n        worksheet.getRange(\"E13:P13\").formula = \"=SUM(E10:E12)\"\n        worksheet.getRange(\"E17:P17\").formula = \"=SUM(E15:E16)\"\n        worksheet.getRange(\"E19:P19\").formula = \"=E13-E17\"\n        worksheet.getRange(\"E27:P27\").formula = \"=SUM(E21:E26)\"\n        worksheet.getRange(\"E29:P29\").formula = \"=E19-E27\"\n        worksheet.getRange(\"E34:P34\").formula = \"=E29-E31+E32-E33\"\n        worksheet.getRange(\"E36:P36\").formula = \"=E34*0.17\"\n        worksheet.getRange(\"E38:P38\").formula = \"=E34-E36\"\n\n    ",
  "com.grapecity.documents.excel.examples.templates.TemplateWorkWithSparkline": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_WorkWithSparkline.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        \n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        \n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        \n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        \n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        \n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        \n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        \n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        \n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        \n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        \n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        \n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        \n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        \n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        \n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        \n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        \n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        \n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        \n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        \n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        \n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        \n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        \n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        \n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        \n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        \n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        \n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.TemplateWorkWithTable": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_WorkWithTable.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        \n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        \n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.TemplateWorkWithConditionalFormatting": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_WorkWithConditionalFormatting.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.TemplateWorkWithChart": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_WorkWithChart.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.pdfformbuildersamples.WageAndTaxStatement": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_fw2-USTaxForm.xlsx\")\n        workbook.open(templateFile)\n\n        //Invoke to process the template\n        workbook.processTemplate()\n    ",
  "com.grapecity.documents.excel.examples.templates.pdfformbuildersamples.ShipRegistration": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_ShipRegistration.xlsx\")\n        workbook.open(templateFile)\n\n        //Invoke to process the template\n        workbook.processTemplate()\n    ",
  "com.grapecity.documents.excel.examples.templates.pdfformbuildersamples.SendaiTaxForm": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_SendaiTaxForm.xlsx\")\n        workbook.open(templateFile)\n\n        //Invoke to process the template\n        workbook.processTemplate()\n    ",
  "com.grapecity.documents.excel.examples.templates.pdfformbuildersamples.USTaxForm_fw4": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_fw4-USTaxForm.xlsx\")\n        workbook.open(templateFile)\n\n        //Invoke to process the template\n        workbook.processTemplate()\n    ",
  "com.grapecity.documents.excel.examples.templates.globaloptions.InsertMode": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_InsertMode.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.InsertMode\", \"EntireRowColumn\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.globaloptions.KeepLineSize": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_KeepLineSize.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.globaloptions.EmbedFontForFormFields": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_EmbedFontForFormFields.xlsx\")\n        workbook.open(templateFile)\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.EmbedFontForFormFields\", \"false\")\n        \n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatesamples.SalesTracker": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_SalesTracker.xlsx\")\n        workbook.open(templateFile)\n        \n        //Here in the demo, we use a mock class to generate instance of java.sql.ResultSet.\n        //User who use template in product, must get instance of java.sql.ResultSet from the\n        //related database connection.\n        val datasource = GcMockResultSet(this.getResourceStream(\"data/sales tracker.csv\"))\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatesamples.ConstructionProposal": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_ConstructionProposal.xlsx\")\n        workbook.open(templateFile)\n        \n        //Here in the demo, we use a mock class to generate instance of java.sql.ResultSet.\n        //User who use template in product, must get instance of java.sql.ResultSet from the\n        //related database connection.\n        val datasource = GcMockResultSet(this.getResourceStream(\"data/construction proposal.csv\"))\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatesamples.DepartmentBudget": "\n        //Load template file Template_Score.xlsx from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_DepartmentBudget.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class Departments {\n        //\tvar dpt: List<Department>? = null\n        //}\n        \n        //class Department {\n        //\tvar name: String? = null\n        //\tvar mgr: String? = null\n        //\tvar bud: Double = 0.toDouble()\n        //\tvar emp: List<Employee>? = null\n        //}\n        \n        //class Employee {\n        //\tvar name: String? = null\n        //\tvar salary: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        //#region Init Data\n        val departments = Departments()\n        val dpts = ArrayList<Department>()\n        departments.dpt = dpts\n        \n        //Department 1\n        val department1 = Department()\n        department1.name = \"Marketing\"\n        department1.mgr = \"Carl Sommerset\"\n        department1.bud = 354586.0\n        val d1_emp = ArrayList<Employee>()\n        department1.emp = d1_emp\n        \n        val d1_e1 = Employee()\n        d1_e1.name = \"JoeKline\"\n        d1_e1.salary = 49402.0\n        d1_emp.add(d1_e1)\n        \n        val d1_e2 = Employee()\n        d1_e2.name = \"Lisa Crane\"\n        d1_e2.salary = 81337.0\n        d1_emp.add(d1_e2)\n        \n        val d1_e3 = Employee()\n        d1_e3.name = \"John Ryes\"\n        d1_e3.salary = 43503.0\n        d1_emp.add(d1_e3)\n        \n        val d1_e4 = Employee()\n        d1_e4.name = \"Elli Davidson\"\n        d1_e4.salary = 67334.0\n        d1_emp.add(d1_e4)\n        \n        val d1_e5 = Employee()\n        d1_e5.name = \"Jack Reaze\"\n        d1_e5.salary = 68314.0\n        d1_emp.add(d1_e5)\n        \n        val d1_e6 = Employee()\n        d1_e6.name = \"Ben Lam\"\n        d1_e6.salary = 44696.0\n        d1_emp.add(d1_e6)\n        dpts.add(department1)\n        \n        //Department 2\n        val department2 = Department()\n        department2.name = \"Sales\"\n        department2.mgr = \"Kelly Johnson\"\n        department2.bud = 237721.0\n        val d2_emp = ArrayList<Employee>()\n        department2.emp = d2_emp\n        \n        val d2_e1 = Employee()\n        d2_e1.name = \"Liam Elmerson\"\n        d2_e1.salary = 61892.0\n        d2_emp.add(d2_e1)\n        \n        val d2_e2 = Employee()\n        d2_e2.name = \"Angela Sanderson\"\n        d2_e2.salary = 38020.0\n        d2_emp.add(d2_e2)\n        \n        val d2_e3 = Employee()\n        d2_e3.name = \"Blake Schwarz\"\n        d2_e3.salary = 55701.0\n        d2_emp.add(d2_e3)\n        \n        val d2_e4 = Employee()\n        d2_e4.name = \"Linda Barataz\"\n        d2_e4.salary = 82108.0\n        d2_emp.add(d2_e4)\n        dpts.add(department2)\n        \n        //Department 3\n        val department3 = Department()\n        department3.name = \"Engineering\"\n        department3.mgr = \"Gina Davis\"\n        department3.bud = 624789.0\n        val d3_emp = ArrayList<Employee>()\n        department3.emp = d3_emp\n        \n        val d3_e1 = Employee()\n        d3_e1.name = \"Christopher Dean\"\n        d3_e1.salary = 58329.0\n        d3_emp.add(d3_e1)\n        \n        val d3_e2 = Employee()\n        d3_e2.name = \"Jack Linner\"\n        d3_e2.salary = 63684.0\n        d3_emp.add(d3_e2)\n        \n        val d3_e3 = Employee()\n        d3_e3.name = \"Cathy Raines\"\n        d3_e3.salary = 73147.0\n        d3_emp.add(d3_e3)\n        \n        val d3_e4 = Employee()\n        d3_e4.name = \"Scott Ashton\"\n        d3_e4.salary = 77213.0\n        d3_emp.add(d3_e4)\n        \n        val d3_e5 = Employee()\n        d3_e5.name = \"Larry Wisell\"\n        d3_e5.salary = 72796.0\n        d3_emp.add(d3_e5)\n        \n        val d3_e6 = Employee()\n        d3_e6.name = \"Bart Ingram\"\n        d3_e6.salary = 50009.0\n        d3_emp.add(d3_e6)\n        \n        val d3_e7 = Employee()\n        d3_e7.name = \"Wesley Page\"\n        d3_e7.salary = 82378.0\n        d3_emp.add(d3_e7)\n        \n        val d3_e8 = Employee()\n        d3_e8.name = \"Alan Keyes\"\n        d3_e8.salary = 67105.0\n        d3_emp.add(d3_e8)\n        \n        val d3_e9 = Employee()\n        d3_e9.name = \"Wilson Musk\"\n        d3_e9.salary = 80128.0\n        d3_emp.add(d3_e9)\n        dpts.add(department3)\n        \n        //Department 4\n        val department4 = Department()\n        department4.name = \"Customer Service\"\n        department4.mgr = \"Kenneth Smith\"\n        department4.bud = 127596.0\n        val d4_emp = ArrayList<Employee>()\n        department4.emp = d4_emp\n        \n        val d4_e1 = Employee()\n        d4_e1.name = \"Sherry Meeks\"\n        d4_e1.salary = 38919.0\n        d4_emp.add(d4_e1)\n        \n        val d4_e2 = Employee()\n        d4_e2.name = \"Sharon Reeves\"\n        d4_e2.salary = 40963.0\n        d4_emp.add(d4_e2)\n        \n        val d4_e3 = Employee()\n        d4_e3.name = \"Max Devillo\"\n        d4_e3.salary = 47714.0\n        d4_emp.add(d4_e3)\n        dpts.add(department4)\n        // #endregion\n        \n        //Add data source\n        workbook.addDataSource(\"ds\", departments)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatesamples.ExpenseTrendBudgetReport": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_ExpenseTrendBudgetReport.xlsx\")\n        workbook.open(templateFile)\n\n        //Here in the demo, we use a mock class to generate instance of java.sql.ResultSet.\n        //User who use template in product, must get instance of java.sql.ResultSet from the\n        //related database connection.\n        val datasource = GcMockResultSet(this.getResourceStream(\"data/expense trend budget report.csv\"))\n\n        \t//Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatesamples.PurchaseOrder": "\n        //Load template file Template_Score.xlsx from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_PurchaseOrder.xlsx\")\n        workbook.open(templateFile)\n        \n        /// #region Define custom classes\n        //class PurchaseOrderInfo {\n        //\tvar s_no: Int = 0\n        //\tvar itemnumber: String? = null\n        //\tvar itemdescription: String? = null\n        //\tvar quantity: Int = 0\n        //\tvar um: String? = null\n        //\tvar price: Int = 0\n        //}\n        \n        //class PurchaseOrderBasicInfo {\n        //\tvar iD: String? = null\n        //\tvar orderDate: Date? = Date(0)\n        //\tvar creditTerms: String? = null\n        //\tvar pONumber: String? = null\n        //\tvar ref: String? = null\n        //\tvar deliverToCompany: String? = null\n        //\tvar deliverToAddress: String? = null\n        //\tvar postalCode: String? = null\n        //\tvar country: String? = null\n        //}\n        /// #endregion\n        \n        ///#region Init Data\n        val purchaseOrderInfoList = ArrayList<PurchaseOrderInfo>()\n        \n        val purchaseOrderInfo1 = PurchaseOrderInfo()\n        purchaseOrderInfo1.s_no = 1\n        purchaseOrderInfo1.itemnumber = \"P1001\"\n        purchaseOrderInfo1.itemdescription = \"Pencils HB\"\n        purchaseOrderInfo1.quantity = 5\n        purchaseOrderInfo1.um = \"dozen\"\n        purchaseOrderInfo1.price = 10\n        purchaseOrderInfoList.add(purchaseOrderInfo1)\n        \n        val purchaseOrderInfo2 = PurchaseOrderInfo()\n        purchaseOrderInfo2.s_no = 2\n        purchaseOrderInfo2.itemnumber = \"P1003\"\n        purchaseOrderInfo2.itemdescription = \"Pencils 2B\"\n        purchaseOrderInfo2.quantity = 4\n        purchaseOrderInfo2.um = \"dozen\"\n        purchaseOrderInfo2.price = 10\n        purchaseOrderInfoList.add(purchaseOrderInfo2)\n        \n        val purchaseOrderInfo3 = PurchaseOrderInfo()\n        purchaseOrderInfo3.s_no = 3\n        purchaseOrderInfo3.itemnumber = \"P1003\"\n        purchaseOrderInfo3.itemdescription = \"Paper A4 - Photo Copier\"\n        purchaseOrderInfo3.quantity = 10\n        purchaseOrderInfo3.um = \"ream\"\n        purchaseOrderInfo3.price = 3\n        purchaseOrderInfoList.add(purchaseOrderInfo3)\n        \n        val purchaseOrderInfo4 = PurchaseOrderInfo()\n        purchaseOrderInfo4.s_no = 4\n        purchaseOrderInfo4.itemnumber = \"P1234\"\n        purchaseOrderInfo4.itemdescription = \"Pens - Ball point\"\n        purchaseOrderInfo4.quantity = 15\n        purchaseOrderInfo4.um = \"boxes\"\n        purchaseOrderInfo4.price = 2\n        purchaseOrderInfoList.add(purchaseOrderInfo4)\n        \n        val purchaseOrderInfo5 = PurchaseOrderInfo()\n        purchaseOrderInfo5.s_no = 5\n        purchaseOrderInfo5.itemnumber = \"P3221\"\n        purchaseOrderInfo5.itemdescription = \"Highligter\"\n        purchaseOrderInfo5.quantity = 8\n        purchaseOrderInfo5.um = \"sets\"\n        purchaseOrderInfo5.price = 10\n        purchaseOrderInfoList.add(purchaseOrderInfo5)\n        \n        val orderbasicInfo = PurchaseOrderBasicInfo()\n        orderbasicInfo.iD = \"US120499\"\n        orderbasicInfo.orderDate = GregorianCalendar(2019, 7, 7).getTime()\n        orderbasicInfo.creditTerms = \"30\"\n        orderbasicInfo.pONumber = \"PO1011\"\n        orderbasicInfo.ref = \"QT1231\"\n        orderbasicInfo.deliverToCompany = \"Sanfort Pvt. Ltd.\"\n        orderbasicInfo.deliverToAddress = \"1322, High Street, Geln Waverlay\"\n        orderbasicInfo.postalCode = \"Victoria 3456\"\n        orderbasicInfo.country = \"Australia\"\n        ///#endregion\n        \n        //Add data source\n        workbook.addDataSource(\"po\", purchaseOrderInfoList)\n        workbook.addDataSource(\"tax\", 5)\n        workbook.addDataSource(\"ds\", orderbasicInfo)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatesamples.TablixReport": "\n        //Load template file Template_Score.xlsx from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_TablixReport.xlsx\")\n        workbook.open(templateFile)\n        \n        /// #region Define custom classes\n        //class TablixInfo {\n        //\tvar orderID: Int = 0\n        //\tvar product: String? = null\n        //\tvar sales: Double = 0.toDouble()\n        //\tvar productType: String? = null\n        //\tvar year: String? = null\n        //\tvar season: String? = null\n        //}\n        /// #endregion\n        \n        ///#region Init Data\n        val tablixInfos = ArrayList<TablixInfo>()\n        \n        val tablixInfo1 = TablixInfo()\n        tablixInfo1.orderID = 1\n        tablixInfo1.product = \"Röd Kaviar\"\n        tablixInfo1.sales = 300.0\n        tablixInfo1.productType = \"Seafood\"\n        tablixInfo1.year = \"2017\"\n        tablixInfo1.season = \"Q3\"\n        tablixInfos.add(tablixInfo1)\n        \n        val tablixInfo2 = TablixInfo()\n        tablixInfo2.orderID = 2\n        tablixInfo2.product = \"Spegesild\"\n        tablixInfo2.sales = 144.0\n        tablixInfo2.productType = \"Seafood\"\n        tablixInfo2.year = \"2017\"\n        tablixInfo2.season = \"Q3\"\n        tablixInfos.add(tablixInfo2)\n        \n        val tablixInfo3 = TablixInfo()\n        tablixInfo3.orderID = 3\n        tablixInfo3.product = \"Carnarvon Tigers\"\n        tablixInfo3.sales = 600.0\n        tablixInfo3.productType = \"Seafood\"\n        tablixInfo3.year = \"2017\"\n        tablixInfo3.season = \"Q3\"\n        tablixInfos.add(tablixInfo3)\n        \n        val tablixInfo4 = TablixInfo()\n        tablixInfo4.orderID = 4\n        tablixInfo4.product = \"Spegesild\"\n        tablixInfo4.sales = 288.0\n        tablixInfo4.productType = \"Seafood\"\n        tablixInfo4.year = \"2017\"\n        tablixInfo4.season = \"Q4\"\n        tablixInfos.add(tablixInfo4)\n        \n        val tablixInfo5 = TablixInfo()\n        tablixInfo5.orderID = 5\n        tablixInfo5.product = \"Carnarvon Tigers\"\n        tablixInfo5.sales = 4250.0\n        tablixInfo5.productType = \"Seafood\"\n        tablixInfo5.year = \"2017\"\n        tablixInfo5.season = \"Q4\"\n        tablixInfos.add(tablixInfo5)\n        \n        val tablixInfo6 = TablixInfo()\n        tablixInfo6.orderID = 6\n        tablixInfo6.product = \"Escargots de Bourgogne\"\n        tablixInfo6.sales = 636.0\n        tablixInfo6.productType = \"Seafood\"\n        tablixInfo6.year = \"2017\"\n        tablixInfo6.season = \"Q4\"\n        tablixInfos.add(tablixInfo6)\n        \n        val tablixInfo7 = TablixInfo()\n        tablixInfo7.orderID = 7\n        tablixInfo7.product = \"Röd Kaviar\"\n        tablixInfo7.sales = 240.0\n        tablixInfo7.productType = \"Seafood\"\n        tablixInfo7.year = \"2018\"\n        tablixInfo7.season = \"Q1\"\n        tablixInfos.add(tablixInfo7)\n        \n        val tablixInfo8 = TablixInfo()\n        tablixInfo8.orderID = 8\n        tablixInfo8.product = \"Carnarvon Tigers\"\n        tablixInfo8.sales = 450.0\n        tablixInfo8.productType = \"Seafood\"\n        tablixInfo8.year = \"2018\"\n        tablixInfo8.season = \"Q1\"\n        tablixInfos.add(tablixInfo8)\n        \n        val tablixInfo9 = TablixInfo()\n        tablixInfo9.orderID = 9\n        tablixInfo9.product = \"Röd Kaviar\"\n        tablixInfo9.sales = 735.0\n        tablixInfo9.productType = \"Seafood\"\n        tablixInfo9.year = \"2018\"\n        tablixInfo9.season = \"Q2\"\n        tablixInfos.add(tablixInfo9)\n        \n        val tablixInfo10 = TablixInfo()\n        tablixInfo10.orderID = 10\n        tablixInfo10.product = \"Røgede sild\"\n        tablixInfo10.sales = 1377.0\n        tablixInfo10.productType = \"Seafood\"\n        tablixInfo10.year = \"2018\"\n        tablixInfo10.season = \"Q2\"\n        tablixInfos.add(tablixInfo10)\n        \n        val tablixInfo11 = TablixInfo()\n        tablixInfo11.orderID = 11\n        tablixInfo11.product = \"Röd Kaviar\"\n        tablixInfo11.sales = 1020.0\n        tablixInfo11.productType = \"Seafood\"\n        tablixInfo11.year = \"2018\"\n        tablixInfo11.season = \"Q3\"\n        tablixInfos.add(tablixInfo11)\n        \n        val tablixInfo12 = TablixInfo()\n        tablixInfo12.orderID = 12\n        tablixInfo12.product = \"Røgede sild\"\n        tablixInfo12.sales = 190.0\n        tablixInfo12.productType = \"Seafood\"\n        tablixInfo12.year = \"2018\"\n        tablixInfo12.season = \"Q3\"\n        tablixInfos.add(tablixInfo12)\n        \n        val tablixInfo13 = TablixInfo()\n        tablixInfo13.orderID = 13\n        tablixInfo13.product = \"Röd Kaviar\"\n        tablixInfo13.sales = 1725.0\n        tablixInfo13.productType = \"Seafood\"\n        tablixInfo13.year = \"2018\"\n        tablixInfo13.season = \"Q4\"\n        tablixInfos.add(tablixInfo13)\n        \n        val tablixInfo14 = TablixInfo()\n        tablixInfo14.orderID = 14\n        tablixInfo14.product = \"Carnarvon Tigers\"\n        tablixInfo14.sales = 3562.0\n        tablixInfo14.productType = \"Seafood\"\n        tablixInfo14.year = \"2018\"\n        tablixInfo14.season = \"Q4\"\n        tablixInfos.add(tablixInfo14)\n        \n        val tablixInfo15 = TablixInfo()\n        tablixInfo15.orderID = 15\n        tablixInfo15.product = \"Sir Rodney's Marmalade\"\n        tablixInfo15.sales = 4276.0\n        tablixInfo15.productType = \"Confections\"\n        tablixInfo15.year = \"2017\"\n        tablixInfo15.season = \"Q3\"\n        tablixInfos.add(tablixInfo15)\n        \n        val tablixInfo16 = TablixInfo()\n        tablixInfo16.orderID = 16\n        tablixInfo16.product = \"Maxilaku\"\n        tablixInfo16.sales = 880.0\n        tablixInfo16.productType = \"Confections\"\n        tablixInfo16.year = \"2017\"\n        tablixInfo16.season = \"Q3\"\n        tablixInfos.add(tablixInfo16)\n        \n        val tablixInfo17 = TablixInfo()\n        tablixInfo17.orderID = 17\n        tablixInfo17.product = \"Maxilaku\"\n        tablixInfo17.sales = 1040.0\n        tablixInfo17.productType = \"Confections\"\n        tablixInfo17.year = \"2017\"\n        tablixInfo17.season = \"Q4\"\n        tablixInfos.add(tablixInfo17)\n        \n        val tablixInfo18 = TablixInfo()\n        tablixInfo18.orderID = 18\n        tablixInfo18.product = \"NuNuCa Nuß-Nougat-Creme\"\n        tablixInfo18.sales = 716.8\n        tablixInfo18.productType = \"Confections\"\n        tablixInfo18.year = \"2017\"\n        tablixInfo18.season = \"Q4\"\n        tablixInfos.add(tablixInfo18)\n        \n        val tablixInfo19 = TablixInfo()\n        tablixInfo19.orderID = 1\n        tablixInfo19.product = \"Sir Rodney's Marmalade\"\n        tablixInfo19.sales = 2592.0\n        tablixInfo19.productType = \"Confections\"\n        tablixInfo19.year = \"2018\"\n        tablixInfo19.season = \"Q1\"\n        tablixInfos.add(tablixInfo19)\n        \n        val tablixInfo20 = TablixInfo()\n        tablixInfo20.orderID = 20\n        tablixInfo20.product = \"Maxilaku\"\n        tablixInfo20.sales = 1296.0\n        tablixInfo20.productType = \"Confections\"\n        tablixInfo20.year = \"2018\"\n        tablixInfo20.season = \"Q1\"\n        tablixInfos.add(tablixInfo20)\n        \n        val tablixInfo21 = TablixInfo()\n        tablixInfo21.orderID = 21\n        tablixInfo21.product = \"Pavlova\"\n        tablixInfo21.sales = 1473.4\n        tablixInfo21.productType = \"Confections\"\n        tablixInfo21.year = \"2018\"\n        tablixInfo21.season = \"Q1\"\n        tablixInfos.add(tablixInfo21)\n        \n        val tablixInfo22 = TablixInfo()\n        tablixInfo22.orderID = 22\n        tablixInfo22.product = \"Sir Rodney's Marmalade\"\n        tablixInfo22.sales = 4374.0\n        tablixInfo22.productType = \"Confections\"\n        tablixInfo22.year = \"2018\"\n        tablixInfo22.season = \"Q2\"\n        tablixInfos.add(tablixInfo22)\n        \n        val tablixInfo23 = TablixInfo()\n        tablixInfo23.orderID = 23\n        tablixInfo23.product = \"Maxilaku\"\n        tablixInfo23.sales = 1004.0\n        tablixInfo23.productType = \"Confections\"\n        tablixInfo23.year = \"2018\"\n        tablixInfo23.season = \"Q2\"\n        tablixInfos.add(tablixInfo1)\n        \n        val tablixInfo24 = TablixInfo()\n        tablixInfo24.orderID = 24\n        tablixInfo24.product = \"Pavlova\"\n        tablixInfo24.sales = 3075.0\n        tablixInfo24.productType = \"Confections\"\n        tablixInfo24.year = \"2018\"\n        tablixInfo24.season = \"Q2\"\n        tablixInfos.add(tablixInfo24)\n        \n        val tablixInfo25 = TablixInfo()\n        tablixInfo25.orderID = 25\n        tablixInfo25.product = \"Sir Rodney's Marmalade\"\n        tablixInfo25.sales = 1071.0\n        tablixInfo25.productType = \"Confections\"\n        tablixInfo25.year = \"2018\"\n        tablixInfo25.season = \"Q3\"\n        tablixInfos.add(tablixInfo25)\n        \n        val tablixInfo26 = TablixInfo()\n        tablixInfo26.orderID = 1\n        tablixInfo26.product = \"Maxilaku\"\n        tablixInfo26.sales = 860.0\n        tablixInfo26.productType = \"Confections\"\n        tablixInfo26.year = \"2018\"\n        tablixInfo26.season = \"Q3\"\n        tablixInfos.add(tablixInfo26)\n        \n        val tablixInfo27 = TablixInfo()\n        tablixInfo27.orderID = 27\n        tablixInfo27.product = \"Pavlova\"\n        tablixInfo27.sales = 732.0\n        tablixInfo27.productType = \"Confections\"\n        tablixInfo27.year = \"2018\"\n        tablixInfo27.season = \"Q3\"\n        tablixInfos.add(tablixInfo27)\n        \n        val tablixInfo28 = TablixInfo()\n        tablixInfo28.orderID = 28\n        tablixInfo28.product = \"Sir Rodney's Marmalade\"\n        tablixInfo28.sales = 1071.0\n        tablixInfo28.productType = \"Confections\"\n        tablixInfo28.year = \"2018\"\n        tablixInfo28.season = \"Q4\"\n        tablixInfos.add(tablixInfo28)\n        \n        val tablixInfo29 = TablixInfo()\n        tablixInfo29.orderID = 29\n        tablixInfo29.product = \"Pavlova\"\n        tablixInfo29.sales = 2634.0\n        tablixInfo29.productType = \"Confections\"\n        tablixInfo29.year = \"2018\"\n        tablixInfo29.season = \"Q4\"\n        tablixInfos.add(tablixInfo29)\n        \n        val tablixInfo30 = TablixInfo()\n        tablixInfo30.orderID = 30\n        tablixInfo30.product = \"Sir Rodney's Scones\"\n        tablixInfo30.sales = 1790.0\n        tablixInfo30.productType = \"Confections\"\n        tablixInfo30.year = \"2018\"\n        tablixInfo30.season = \"Q4\"\n        tablixInfos.add(tablixInfo30)\n        ///#endregion\n        \n        //Add data source\n        workbook.addDataSource(\"ds\", tablixInfos)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatesamples.Travel": "\n        //Load template file Template_Score.xlsx from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_Travel.xlsx\")\n        workbook.open(templateFile)\n        \n        /// #region Define custom classes\n        //class FlightInfo {\n        //\tvar carrier: String? = null\n        //\tvar flightNo: Int = 0\n        //\tvar date: Date? = Date(0)\n        //\tvar from: String? = null\n        //\tvar departureTime: Calendar? = null\n        //\tvar to: String? = null\n        //\tvar arrivalTime: Calendar? = null\n        //\tvar reservationNo: String? = null\n        //}\n        \n        //class LoadingInfo {\n        //\tvar accommodations: String? = null\n        //\tvar date: Date? = Date(0)\n        //\tvar concierge: String? = null\n        //\tvar phone: String? = null\n        //\tvar email: String? = null\n        //\tvar addressPart1: String? = null\n        //\tvar addressPart2: String? = null\n        //\tvar confirmNo: String? = null\n        //\tvar days: Int = 0\n        //\tvar totalCost: Double = 0.toDouble()\n        //}\n        \n        //class ContactInfo {\n        //\tvar contact: String? = null\n        //\tvar phone: String? = null\n        //\tvar notes: String? = null\n        //}\n        /// #endregion\n        \n        ///#region Init Data\n        val flightInfos = ArrayList<FlightInfo>()\n        \n        val flightInfo1 = FlightInfo()\n        flightInfo1.carrier = \"Trenz Airlines\"\n        flightInfo1.flightNo = 1623\n        flightInfo1.date = GregorianCalendar(2018, 10, 25).getTime()\n        flightInfo1.from = \"Lorem International\"\n        \n        val departureTime1 = GregorianCalendar()\n        departureTime1.clear()\n        departureTime1.set(0, 0, 0, 7, 56, 0)\n        flightInfo1.departureTime = departureTime1\n        flightInfo1.to = \"Dolor Airport\"\n        \n        val arrivalTime1 = GregorianCalendar()\n        arrivalTime1.clear()\n        arrivalTime1.set(0, 0, 0, 9, 15, 0)\n        flightInfo1.arrivalTime = arrivalTime1\n        flightInfo1.reservationNo = \"AG4567997\"\n        flightInfos.add(flightInfo1)\n        \n        val flightInfo2 = FlightInfo()\n        flightInfo2.carrier = \"Trenz Airlines\"\n        flightInfo2.flightNo = 1323\n        flightInfo2.date = GregorianCalendar(2018, 10, 30).getTime()\n        flightInfo2.from = \"Lorem International\"\n        \n        val departureTime2 = GregorianCalendar()\n        departureTime2.clear()\n        departureTime2.set(0, 0, 0, 20, 25, 0)\n        flightInfo2.departureTime = departureTime2\n        flightInfo2.to = \"Dolor Airport\"\n        \n        val arrivalTime2 = GregorianCalendar()\n        arrivalTime2.clear()\n        arrivalTime2.set(0, 0, 0, 21, 45, 0)\n        flightInfo2.arrivalTime = arrivalTime2\n        flightInfo2.reservationNo = \"AG4567998\"\n        flightInfos.add(flightInfo2)\n        \n        val loadingInfos = ArrayList<LoadingInfo>()\n        \n        val loadingInfo1 = LoadingInfo()\n        loadingInfo1.accommodations = \"Lorem Hotel\"\n        loadingInfo1.date = GregorianCalendar(2018, 10, 25).getTime()\n        loadingInfo1.concierge = \"Charles\"\n        loadingInfo1.phone = \"01234 567 890\"\n        loadingInfo1.email = \"charles@lorem.com\"\n        loadingInfo1.addressPart1 = \"123 High Street, \"\n        loadingInfo1.addressPart2 = \"Anytown, County, Postcode\"\n        loadingInfo1.confirmNo = \"A4567\"\n        loadingInfo1.days = 2\n        loadingInfo1.totalCost = 800.0\n        loadingInfos.add(loadingInfo1)\n        \n        val loadingInfo2 = LoadingInfo()\n        loadingInfo2.accommodations = \"Deloz Hotel\"\n        loadingInfo2.date = GregorianCalendar(2018, 10, 27).getTime()\n        loadingInfo2.concierge = \"James\"\n        loadingInfo2.phone = \"01234 567 890\"\n        loadingInfo2.email = \"no_reply@example.com\"\n        loadingInfo2.addressPart1 = \"202 Halford Street, \"\n        loadingInfo2.addressPart2 = \"Anytown, County, Postcode\"\n        loadingInfo2.confirmNo = \"A4568\"\n        loadingInfo2.days = 3\n        loadingInfo2.totalCost = 900.0\n        loadingInfos.add(loadingInfo2)\n        \n        val emergencyContactInfos = ArrayList<ContactInfo>()\n        \n        val emergencyContactInfo1 = ContactInfo()\n        emergencyContactInfo1.contact = \"Airline Reservations\"\n        emergencyContactInfo1.phone = \"01234 567 890\"\n        emergencyContactInfos.add(emergencyContactInfo1)\n        \n        val emergencyContactInfo2 = ContactInfo()\n        emergencyContactInfo2.contact = \"Hotel Reservations\"\n        emergencyContactInfo2.phone = \"12342322232\"\n        emergencyContactInfos.add(emergencyContactInfo2)\n        \n        val contactInfos = ArrayList<ContactInfo>()\n        \n        val contactInfo1 = ContactInfo()\n        contactInfo1.contact = \"Tom Jenkins\"\n        contactInfo1.phone = \"01234 567 890\"\n        contactInfo1.notes = \"tom.jerkins@trenz.com\"\n        contactInfos.add(contactInfo1)\n        \n        val contactInfo2 = ContactInfo()\n        contactInfo2.contact = \"Rayna James\"\n        contactInfo2.phone = \"19234222456\"\n        contactInfo1.notes = \"ratna.james@deloz.com\"\n        contactInfos.add(contactInfo2)\n        \n        ///#endregion\n        //Add data source\n        workbook.addDataSource(\"ds1\", flightInfos)\n        workbook.addDataSource(\"ds2\", loadingInfos)\n        workbook.addDataSource(\"ds3\", emergencyContactInfos)\n        workbook.addDataSource(\"ds4\", contactInfos)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatesamples.MedicalReport": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_MedicalReport.xlsx\")\n        workbook.open(templateFile)\n        \n        //Here in the demo, we use a mock class to generate instance of java.sql.ResultSet.\n        //User who use template in product, must get instance of java.sql.ResultSet from the\n        //related database connection.\n        val datasource = GcMockResultSet(this.getResourceStream(\"data/medical report.csv\"))\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        workbook.getNames().add(\"TemplateOptions.InsertMode\", \"EntireRowColumn\")\n        \n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatesamples.FinancialDashboard": "\n        //Load template file Template_Score.xlsx from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_FinancialDashboard.xlsx\")\n        workbook.open(templateFile)\n        \n        ///#region Define custom classes\n        //class FinancialRecord {\n        //\tvar season: String? = null\n        //\tvar country: String? = null\n        //\tvar expect: Double = 0.toDouble()\n        //\tvar actual: Double = 0.toDouble()\n        //}\n        ///#endregion\n        \n        ///#region Init Data\n        val financialRecords = ArrayList<FinancialRecord>()\n        \n        val financialRecord1 = FinancialRecord()\n        financialRecord1.season = \"2016 Q1\"\n        financialRecord1.country = \"USA\"\n        financialRecord1.expect = 236047.0\n        financialRecord1.actual = 328554.0\n        financialRecords.add(financialRecord1)\n        \n        val financialRecord2 = FinancialRecord()\n        financialRecord2.season = \"2016 Q2\"\n        financialRecord2.country = \"USA\"\n        financialRecord2.expect = 373060.0\n        financialRecord2.actual = 238136.0\n        financialRecords.add(financialRecord2)\n        \n        val financialRecord3 = FinancialRecord()\n        financialRecord3.season = \"2016 Q3\"\n        financialRecord3.country = \"USA\"\n        financialRecord3.expect = 224132.0\n        financialRecord3.actual = 300822.0\n        financialRecords.add(financialRecord3)\n        \n        val financialRecord4 = FinancialRecord()\n        financialRecord4.season = \"2016 Q4\"\n        financialRecord4.country = \"USA\"\n        financialRecord4.expect = 269305.0\n        financialRecord4.actual = 315337.0\n        financialRecords.add(financialRecord4)\n        \n        val financialRecord5 = FinancialRecord()\n        financialRecord5.season = \"2017 Q1\"\n        financialRecord5.country = \"USA\"\n        financialRecord5.expect = 265397.0\n        financialRecord5.actual = 279008.0\n        financialRecords.add(financialRecord5)\n        \n        val financialRecord6 = FinancialRecord()\n        financialRecord6.season = \"2017 Q2\"\n        financialRecord6.country = \"USA\"\n        financialRecord6.expect = 214079.0\n        financialRecord6.actual = 206019.0\n        financialRecords.add(financialRecord6)\n        \n        val financialRecord7 = FinancialRecord()\n        financialRecord7.season = \"2017 Q3\"\n        financialRecord7.country = \"USA\"\n        financialRecord7.expect = 370191.0\n        financialRecord7.actual = 238294.0\n        financialRecords.add(financialRecord7)\n        \n        val financialRecord8 = FinancialRecord()\n        financialRecord8.season = \"2017 Q4\"\n        financialRecord8.country = \"USA\"\n        financialRecord8.expect = 266843.0\n        financialRecord8.actual = 242323.0\n        financialRecords.add(financialRecord8)\n        \n        val financialRecord9 = FinancialRecord()\n        financialRecord9.season = \"2016 Q1\"\n        financialRecord9.country = \"Japan\"\n        financialRecord9.expect = 350156.0\n        financialRecord9.actual = 370834.0\n        financialRecords.add(financialRecord9)\n        \n        val financialRecord10 = FinancialRecord()\n        financialRecord10.season = \"2016 Q2\"\n        financialRecord10.country = \"Japan\"\n        financialRecord10.expect = 369399.0\n        financialRecord10.actual = 247324.0\n        financialRecords.add(financialRecord10)\n        \n        val financialRecord11 = FinancialRecord()\n        financialRecord11.season = \"2016 Q3\"\n        financialRecord11.country = \"Japan\"\n        financialRecord11.expect = 278834.0\n        financialRecord11.actual = 237385.0\n        financialRecords.add(financialRecord11)\n        \n        val financialRecord12 = FinancialRecord()\n        financialRecord12.season = \"2016 Q4\"\n        financialRecord12.country = \"Japan\"\n        financialRecord12.expect = 264277.0\n        financialRecord12.actual = 245048.0\n        financialRecords.add(financialRecord12)\n        \n        val financialRecord13 = FinancialRecord()\n        financialRecord13.season = \"2017 Q1\"\n        financialRecord13.country = \"Japan\"\n        financialRecord13.expect = 203006.0\n        financialRecord13.actual = 295389.0\n        financialRecords.add(financialRecord13)\n        \n        val financialRecord14 = FinancialRecord()\n        financialRecord14.season = \"2017 Q2\"\n        financialRecord14.country = \"Japan\"\n        financialRecord14.expect = 276987.0\n        financialRecord14.actual = 215804.0\n        financialRecords.add(financialRecord14)\n        \n        val financialRecord15 = FinancialRecord()\n        financialRecord15.season = \"2017 Q3\"\n        financialRecord15.country = \"Japan\"\n        financialRecord15.expect = 330315.0\n        financialRecord15.actual = 330443.0\n        financialRecords.add(financialRecord15)\n        \n        val financialRecord16 = FinancialRecord()\n        financialRecord16.season = \"2017 Q4\"\n        financialRecord16.country = \"Japan\"\n        financialRecord16.expect = 307477.0\n        financialRecord16.actual = 262512.0\n        financialRecords.add(financialRecord16)\n        \n        val financialRecord17 = FinancialRecord()\n        financialRecord17.season = \"2016 Q1\"\n        financialRecord17.country = \"Korea\"\n        financialRecord17.expect = 229432.0\n        financialRecord17.actual = 330368.0\n        financialRecords.add(financialRecord17)\n        \n        val financialRecord18 = FinancialRecord()\n        financialRecord18.season = \"2016 Q2\"\n        financialRecord18.country = \"Korea\"\n        financialRecord18.expect = 321904.0\n        financialRecord18.actual = 279114.0\n        financialRecords.add(financialRecord18)\n        \n        val financialRecord19 = FinancialRecord()\n        financialRecord19.season = \"2016 Q3\"\n        financialRecord19.country = \"Korea\"\n        financialRecord19.expect = 230496.0\n        financialRecord19.actual = 219257.0\n        financialRecords.add(financialRecord19)\n        \n        val financialRecord20 = FinancialRecord()\n        financialRecord20.season = \"2016 Q4\"\n        financialRecord20.country = \"Korea\"\n        financialRecord20.expect = 254328.0\n        financialRecord20.actual = 361880.0\n        financialRecords.add(financialRecord20)\n        \n        val financialRecord21 = FinancialRecord()\n        financialRecord21.season = \"2017 Q1\"\n        financialRecord21.country = \"Korea\"\n        financialRecord21.expect = 272263.0\n        financialRecord21.actual = 355419.0\n        financialRecords.add(financialRecord21)\n        \n        val financialRecord22 = FinancialRecord()\n        financialRecord22.season = \"2017 Q2\"\n        financialRecord22.country = \"Korea\"\n        financialRecord22.expect = 214079.0\n        financialRecord22.actual = 231510.0\n        financialRecords.add(financialRecord22)\n        \n        val financialRecord23 = FinancialRecord()\n        financialRecord23.season = \"2017 Q3\"\n        financialRecord23.country = \"Korea\"\n        financialRecord23.expect = 238392.0\n        financialRecord23.actual = 237430.0\n        financialRecords.add(financialRecord23)\n        \n        val financialRecord24 = FinancialRecord()\n        financialRecord24.season = \"2017 Q4\"\n        financialRecord24.country = \"Korea\"\n        financialRecord24.expect = 294097.0\n        financialRecord24.actual = 257680.0\n        financialRecords.add(financialRecord24)\n        \n        val financialRecord25 = FinancialRecord()\n        financialRecord25.season = \"2016 Q1\"\n        financialRecord25.country = \"China\"\n        financialRecord25.expect = 238175.0\n        financialRecord25.actual = 266070.0\n        financialRecords.add(financialRecord25)\n        \n        val financialRecord26 = FinancialRecord()\n        financialRecord26.season = \"2016 Q2\"\n        financialRecord26.country = \"China\"\n        financialRecord26.expect = 202721.0\n        financialRecord26.actual = 353563.0\n        financialRecords.add(financialRecord26)\n        \n        val financialRecord27 = FinancialRecord()\n        financialRecord27.season = \"2016 Q3\"\n        financialRecord27.country = \"China\"\n        financialRecord27.expect = 253279.0\n        financialRecord27.actual = 312586.0\n        financialRecords.add(financialRecord27)\n        \n        val financialRecord28 = FinancialRecord()\n        financialRecord28.season = \"2016 Q4\"\n        financialRecord28.country = \"China\"\n        financialRecord28.expect = 211847.0\n        financialRecord28.actual = 306970.0\n        financialRecords.add(financialRecord28)\n        \n        val financialRecord29 = FinancialRecord()\n        financialRecord29.season = \"2017 Q1\"\n        financialRecord29.country = \"China\"\n        financialRecord29.expect = 369314.0\n        financialRecord29.actual = 315718.0\n        financialRecords.add(financialRecord2)\n        \n        val financialRecord30 = FinancialRecord()\n        financialRecord30.season = \"2017 Q2\"\n        financialRecord30.country = \"China\"\n        financialRecord30.expect = 201224.0\n        financialRecord30.actual = 368630.0\n        financialRecords.add(financialRecord30)\n        \n        val financialRecord31 = FinancialRecord()\n        financialRecord31.season = \"2017 Q3\"\n        financialRecord31.country = \"China\"\n        financialRecord31.expect = 239792.0\n        financialRecord31.actual = 255108.0\n        financialRecords.add(financialRecord31)\n        \n        val financialRecord32 = FinancialRecord()\n        financialRecord32.season = \"2017 Q4\"\n        financialRecord32.country = \"China\"\n        financialRecord32.expect = 271096.0\n        financialRecord32.actual = 297354.0\n        financialRecords.add(financialRecord32)\n        \n        val financialRecord33 = FinancialRecord()\n        financialRecord33.season = \"2016 Q1\"\n        financialRecord33.country = \"India\"\n        financialRecord33.expect = 236047.0\n        financialRecord33.actual = 328554.0\n        financialRecords.add(financialRecord33)\n        \n        val financialRecord34 = FinancialRecord()\n        financialRecord34.season = \"2016 Q2\"\n        financialRecord34.country = \"India\"\n        financialRecord34.expect = 373060.0\n        financialRecord34.actual = 238136.0\n        financialRecords.add(financialRecord34)\n        \n        val financialRecord35 = FinancialRecord()\n        financialRecord35.season = \"2016 Q3\"\n        financialRecord35.country = \"India\"\n        financialRecord35.expect = 224132.0\n        financialRecord35.actual = 300822.0\n        financialRecords.add(financialRecord35)\n        \n        val financialRecord36 = FinancialRecord()\n        financialRecord36.season = \"2016 Q4\"\n        financialRecord36.country = \"India\"\n        financialRecord36.expect = 269305.0\n        financialRecord36.actual = 315337.0\n        financialRecords.add(financialRecord36)\n        \n        val financialRecord37 = FinancialRecord()\n        financialRecord37.season = \"2017 Q1\"\n        financialRecord37.country = \"India\"\n        financialRecord37.expect = 265397.0\n        financialRecord37.actual = 279008.0\n        financialRecords.add(financialRecord37)\n        \n        val financialRecord38 = FinancialRecord()\n        financialRecord38.season = \"2017 Q2\"\n        financialRecord38.country = \"India\"\n        financialRecord38.expect = 214079.0\n        financialRecord38.actual = 206019.0\n        financialRecords.add(financialRecord38)\n        \n        val financialRecord39 = FinancialRecord()\n        financialRecord39.season = \"2017 Q3\"\n        financialRecord39.country = \"India\"\n        financialRecord39.expect = 370191.0\n        financialRecord39.actual = 238294.0\n        financialRecords.add(financialRecord39)\n        \n        val financialRecord40 = FinancialRecord()\n        financialRecord40.season = \"2017 Q4\"\n        financialRecord40.country = \"India\"\n        financialRecord40.expect = 266843.0\n        financialRecord40.actual = 242323.0\n        financialRecords.add(financialRecord40)\n        ///#endregion\n        \n        //Add data source\n        workbook.addDataSource(\"ds\", financialRecords)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatesamples.ShippingAndDeliveryOrder": "\n        //Load template file Template_Score.xlsx from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_ShippingAndDeliveryOrder.xlsx\")\n        workbook.open(templateFile)\n        \n        ///#region Define custom classes\n        //class PackingList {\n        //\tvar exporter: String? = null\n        //\tvar address_exporter: String? = null\n        //\tvar country_exporter: String? = null\n        //\tvar phonenumber_shipper: String? = null\n        //\tvar shipper: String? = null\n        //\tvar imports: String? = null\n        //\tvar address_consignee: String? = null\n        //\tvar country_consignee: String? = null\n        //\tvar phonenumber_consignee: String? = null\n        //\tvar consignee: String? = null\n        //\tvar invoice_No: Int = 0\n        //\tvar date: Date? = Date(0)\n        //\tvar reference: Int = 0\n        //\tvar dispatchMethod: String? = null\n        //\tvar shipmentType: String? = null\n        //\tvar vA: String? = null\n        //\tvar voyageNo: String? = null\n        //\tvar portofLanding: String? = null\n        //\tvar departureDate: Date? = Date(0)\n        //\tvar dischargePort: String? = null\n        //\tvar finalDestination: String? = null\n        //\tvar goodsOriginCountry: String? = null\n        //\tvar destinationCountry: String? = null\n        //\tvar item: ArrayList<Product>? = null\n        //\tvar issuePlace: String? = null\n        //\tvar issueDate: Date? = Date(0)\n        //\tvar signatoryCompany: String? = null\n        //\tvar signatoryName: String? = null\n        //}\n        \n        //class Product {\n        //\tvar productcode: String? = null\n        //\tvar goods: String? = null\n        //\tvar quantity: Double = 0.toDouble()\n        //\tvar netweight: Double = 0.toDouble()\n        //\tvar kindAndPackagesCount: String? = null\n        //\tvar grossweight: Double = 0.toDouble()\n        //\tvar measurements: Double = 0.toDouble()\n        //}\n        ///#endregion\n        \n        ///#region Init Data\n        val packinginfo = PackingList()\n        packinginfo.exporter = \"DEL Exports\"\n        packinginfo.address_exporter = \"4243 Longline Vlvd Longline, CA - 98020\"\n        packinginfo.country_exporter = \"United States\"\n        packinginfo.phonenumber_shipper = \"010-510-22424\"\n        packinginfo.shipper = \"Diana Thompson\"\n        packinginfo.imports = \"Deanna Imports\"\n        packinginfo.address_consignee = \"113/23, Lombard Street Halford Townsville, Melbourne, 4323\"\n        packinginfo.country_consignee = \"Australia\"\n        packinginfo.phonenumber_consignee = \"010-510-33232\"\n        packinginfo.consignee = \"James Williams\"\n        packinginfo.invoice_No = 1934\n        packinginfo.date = GregorianCalendar(2019, 1, 30).getTime()\n        packinginfo.reference = 1934\n        packinginfo.dispatchMethod = \"Sea\"\n        packinginfo.shipmentType = \"FCL\"\n        packinginfo.goodsOriginCountry = \"United States\"\n        packinginfo.destinationCountry = \"Australia\"\n        packinginfo.vA = \"MAKERS DYER\"\n        packinginfo.voyageNo = \"6E\"\n        packinginfo.portofLanding = \"Longline - California\"\n        packinginfo.departureDate = GregorianCalendar(2019, 2, 1).getTime()\n        packinginfo.dischargePort = \"Melbourne - Australia\"\n        packinginfo.finalDestination = \"Australia\"\n        \n        val product1 = Product()\n        product1.productcode = \"P1001\"\n        product1.goods = \"Pencils - HB\"\n        product1.quantity = 5.0\n        product1.netweight = 0.1\n        product1.kindAndPackagesCount = \"PALLET X 1\"\n        product1.grossweight = 750.0\n        product1.measurements = 1.7\n        \n        val product2 = Product()\n        product2.productcode = \"P1002\"\n        product2.goods = \"Paper - A4\"\n        product2.quantity = 3.0\n        product2.netweight = 2.0\n        product2.kindAndPackagesCount = \"PALLET X 2\"\n        product2.grossweight = 250.0\n        product2.measurements = 1.4\n        packinginfo.item = ArrayList<Product>(Arrays.asList(product1, product2))\n        packinginfo.issuePlace = \"Longline\"\n        packinginfo.issueDate = GregorianCalendar(2019, 1, 30).getTime()\n        packinginfo.signatoryCompany = \"DEL Exports\"\n        packinginfo.signatoryName = \"Rayna Johnson\"\n        ///#endregion\n        \n        //Add data source\n        workbook.addDataSource(\"ds\", packinginfo)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatesamples.Sales": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_KeepLineSize.xlsx\")\n        workbook.open(templateFile)\n\n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n\n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatesamples.EmployeeAbsenceSchedule": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_EmployeeAbsenceSchedule.xlsx\")\n        workbook.open(templateFile)\n        \n        //Here in the demo, we use a mock class to generate instance of java.sql.ResultSet.\n        //User who use template in product, must get instance of java.sql.ResultSet from the\n        //related database connection.\n        val datasource = GcMockResultSet(this.getResourceStream(\"data/employee absence schedule.csv\"))\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.pdfformbuilder.RadiobuttonFields": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_RadiobuttonField.xlsx\")\n        workbook.open(templateFile)\n\n        //#region Init Data\n        val choice = ArrayList<String>()\n\n        choice.add(\"Yes\")\n        choice.add(\"No\")\n        choice.add(\"Not sure\")\n        //#endregion\n\n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        workbook.getNames().add(\"TemplateOptions.InsertMode\", \"EntireRowColumn\")\n\n        //Add data source\n        workbook.addDataSource(\"choice\", choice)\n\n        //Invoke to process the template\n        workbook.processTemplate()\n    ",
  "com.grapecity.documents.excel.examples.templates.pdfformbuilder.CheckBoxFields": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_CheckBoxField.xlsx\")\n        workbook.open(templateFile)\n\n        //#region Init Data\n        val hobbies = ArrayList<String>()\n\n        hobbies.add(\"Cooking\")\n        hobbies.add(\"Music\")\n        hobbies.add(\"Reading\")\n        hobbies.add(\"Sports\")\n        hobbies.add(\"Travelling\")\n        //#endregion\n\n        //Add data source\n        workbook.addDataSource(\"hobbies\", hobbies)\n\n        //Invoke to process the template\n        workbook.processTemplate()\n    ",
  "com.grapecity.documents.excel.examples.templates.pdfformbuilder.PushbuttonFields": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_PushbuttonField.xlsx\")\n        workbook.open(templateFile)\n\n        //Invoke to process the template\n        workbook.processTemplate()\n    ",
  "com.grapecity.documents.excel.examples.templates.pdfformbuilder.ComboboxFields": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_ComboBoxField.xlsx\")\n        workbook.open(templateFile)\n\n        //#region Init Data\n        val names = ArrayList<String>()\n\n        names.add(\"Emma\")\n        names.add(\"Ava\")\n        names.add(\"William\")\n        names.add(\"Liam\")\n        names.add(\"Noah\")\n        //#endregion\n\n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n\n        //Add data source\n        workbook.addDataSource(\"name\", names)\n\n        //Invoke to process the template\n        workbook.processTemplate()\n    ",
  "com.grapecity.documents.excel.examples.templates.pdfformbuilder.TextFields": "\n        // Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_TextFields.xlsx\")\n        workbook.open(templateFile)\n\n        // #region Init Data\n        val addressBooks = ArrayList<AddressBook>()\n\n        val addressBook1 = AddressBook()\n        addressBook1.name = \"Kim Abercrombie\"\n        addressBook1.work = \"1235550123\"\n        addressBook1.cell = \"1235550123\"\n        addressBook1.home = \"1235550123\"\n        addressBook1.email = \"Kim@example.com\"\n        addressBook1.birthday = \"4/13/1991\"\n        addressBook1.address = \"123 N. Maple\"\n        addressBook1.city = \"Cherryville\"\n        addressBook1.state = \"WA\"\n        addressBook1.zip = \"98031\"\n        addressBooks.add(addressBook1)\n\n        val addressBook2 = AddressBook()\n        addressBook2.name = \"John Smith\"\n        addressBook2.work = \"3215230123\"\n        addressBook2.cell = \"3215230123\"\n        addressBook2.home = \"3215230123\"\n        addressBook2.email = \"John@example.com\"\n        addressBook2.birthday = \"5/20/1990\"\n        addressBook2.address = \"4456 E. Aspen\"\n        addressBook2.city = \"Montgomery\"\n        addressBook2.state = \"AL\"\n        addressBook2.zip = \"36136\"\n        addressBooks.add(addressBook2)\n\n        val addressBook3 = AddressBook()\n        addressBook3.name = \"James Williams\"\n        addressBook3.work = \"5235550879\"\n        addressBook3.cell = \"5235550879\"\n        addressBook3.home = \"5235550879\"\n        addressBook3.email = \"James@example.com\"\n        addressBook3.birthday = \"4/5/1995\"\n        addressBook3.address = \"123 N. Maple\"\n        addressBook3.city = \"Denver\"\n        addressBook3.state = \"CO\"\n        addressBook3.zip = \"80214\"\n        addressBooks.add(addressBook3)\n\n        val addressBook4 = AddressBook()\n        addressBook4.name = \"Mark Jordan\"\n        addressBook4.work = \"1238640185\"\n        addressBook4.cell = \"1238640185\"\n        addressBook4.home = \"1238640185\"\n        addressBook4.email = \"Mark@example.com\"\n        addressBook4.birthday = \"12/13/1988\"\n        addressBook4.address = \"123 N. Maple\"\n        addressBook4.city = \"Boise\"\n        addressBook4.state = \"ID\"\n        addressBook4.zip = \"83706\"\n        addressBooks.add(addressBook4)\n\n        val addressBook5 = AddressBook()\n        addressBook5.name = \"Andrew Lepp\"\n        addressBook5.work = \"6235320178\"\n        addressBook5.cell = \"6235320178\"\n        addressBook5.home = \"6235320178\"\n        addressBook5.email = \"Andrew@example.com\"\n        addressBook5.birthday = \"10/9/1996\"\n        addressBook5.address = \"123 N. Maple\"\n        addressBook5.city = \"Augusta\"\n        addressBook5.state = \"ME\"\n        addressBook5.zip = \"04336\"\n        addressBooks.add(addressBook5)\n        // #endregion\n\n        // Add data source\n        workbook.addDataSource(\"ds\", addressBooks)\n\n        // Invoke to process the template\n        workbook.processTemplate()\n    ",
  "com.grapecity.documents.excel.examples.templates.pdfformbuilder.SignatureFields": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_SignatureFields.xlsx\")\n        workbook.open(templateFile)\n\n        //Invoke to process the template\n        workbook.processTemplate()\n    ",
  "com.grapecity.documents.excel.examples.templates.pdfformbuilder.ListboxFields": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_ListBoxField.xlsx\")\n        workbook.open(templateFile)\n\n        //#region Init Data\n        val names = ArrayList<String>()\n\n        names.add(\"Emma\")\n        names.add(\"Ava\")\n        names.add(\"William\")\n        names.add(\"Liam\")\n        names.add(\"Noah\")\n        //#endregion\n\n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n\n        //Add data source\n        workbook.addDataSource(\"name\", names)\n\n        //Invoke to process the template\n        workbook.processTemplate()\n    ",
  "com.grapecity.documents.excel.examples.templates.properties.SetPagebreak": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_SetPagebreak.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.properties.SetExpansionType": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_SetExpansionType.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.properties.SetGroupType": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_SetGroupType.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.properties.SetRange": "\n        //Load template file Template_Score.xlsx from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_SetRange.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.properties.SetSortType": "\n        //Load template file Template_Score.xlsx from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_SetSortType.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.properties.SetContext": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_SetContext.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        \n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.properties.fillmode.SetFillMode": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_SetFillModeDefault.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        \n        //#region Init Data\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        \n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        \n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        \n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        \n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        \n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        \n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        \n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.properties.fillmode.SetFillModeOverwrite": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_SetFillModeOverwrite.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        \n        //#region Init Data\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        \n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        \n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        \n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        \n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        \n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        \n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        \n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.properties.fillmode.SetFillModeOverflow": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_SetFillModeOverflow.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        \n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        \n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        \n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        \n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        \n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        \n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        \n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        \n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        \n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        \n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        \n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        \n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        \n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        \n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        \n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        \n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        \n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        \n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        \n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        \n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        \n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        \n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        \n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        \n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        \n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        \n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.style.CellStyle": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_CellStyle.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.style.MergeCell": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_MergeCell.xlsx\")\n        workbook.open(templateFile)\n\n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.datasource.Variable": "\n        //Load template file Template_StudentInfo.xlsx from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_StudentInfo.xlsx\")\n        workbook.open(templateFile)\n        \n        ///#region Define custom classes\n        //class StudentInfo {\n        //\tvar name: String? = null\n        //\tvar address: String? = null\n        //\tvar family: ArrayList<Family>? = null\n        //}\n        ///#region Init Data\n        \n        val studentInfos = ArrayList<StudentInfo>()\n        \n        val student1 = StudentInfo()\n        student1.name = \"Jane\"\n        student1.address = \"101, Halford Avenue, Fremont, CA\"\n        studentInfos.add(student1)\n        \n        val student2 = StudentInfo()\n        student2.name = \"Mark\"\n        student2.address = \"2005 Klamath Ave APT, Santa Clara, CA\"\n        studentInfos.add(student2)\n        \n        val student3 = StudentInfo()\n        student3.name = \"Carol\"\n        student3.address = \"1063 E EI Camino Real, Sunnyvale, CA 94087, USA\"\n        studentInfos.add(student3)\n        \n        val student4 = StudentInfo()\n        student4.name = \"Liano\"\n        student4.address = \"1977 St Lawrence Dr, Santa Clara, CA 95051, USA\"\n        studentInfos.add(student4)\n        \n        val student5 = StudentInfo()\n        student5.name = \"Hellen\"\n        student5.address = \"3661 Peacock Ct, Santa Clara, CA 95051, USA\"\n        studentInfos.add(student5)\n        \n        val className = \"Class 3\"\n        ///#endregion\n        \n        //Add data source\n        workbook.addDataSource(\"className\", className)\n        workbook.addDataSource(\"s\", studentInfos)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.datasource.CustomObject": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_SalesDataGroup.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = SalesData()\n        datasource.sales = ArrayList<SalesRecord>()\n        \n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.sales!!.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.sales!!.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.sales!!.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.sales!!.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.sales!!.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.sales!!.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.sales!!.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.sales!!.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.sales!!.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.sales!!.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.sales!!.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.sales!!.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.sales!!.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.sales!!.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.sales!!.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.sales!!.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.sales!!.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.sales!!.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.sales!!.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.sales!!.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.sales!!.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.sales!!.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.sales!!.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.sales!!.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.sales!!.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.sales!!.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.datasource.JsonFile": "\n        //Load template file Template_FamilyInfo.xlsx from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_FamilyInfo.xlsx\")\n        workbook.open(templateFile)\n        \n        ///#region Define custom classes\n        //class StudentInfos {\n        //\tvar student: ArrayList<StudentInfo>? = null\n        //}\n        \n        //class StudentInfo {\n        //\tvar name: String? = null\n        //\tvar address: String? = null\n        //\tvar family: ArrayList<Family>? = null\n        //}\n        \n        //class Family {\n        //\tvar father: Guardian? = null\n        //\tvar mother: Guardian? = null\n        //}\n        \n        //class Guardian {\n        //\tvar name: String? = null\n        //\tvar occupation: String? = null\n        //}\n        ///#endregion\n        \n        //Get data from json file\n        val reader = InputStreamReader(this.getResourceStream(\"Template_FamilyInfo.json\"))\n        val gson = Gson()\n        val datasource = gson.fromJson(reader, StudentInfos::class.java)\n        \n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.datasource.ResultSet": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_SalesDataGroup_ResultSet.xlsx\")\n        workbook.open(templateFile)\n        \n        //Here in the demo, we use a mock class to generate instance of java.sql.ResultSet.\n        //User who use template in product, must get instance of java.sql.ResultSet from the\n        //related database connection.\n        val datasource = GcMockResultSet(this.getResourceStream(\"data/sales.csv\"))\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        \n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatecell.ExpressionTemplate": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_ExpressionTemplate.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatecell.DataTemplate": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_DataTemplate.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatecell.FormulaTemplate": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_FormulaTemplate.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatecell.FunctionTemplate": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_FunctionTemplate.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatecell.ImageTemplate": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_ImageTemplate.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class BikeInfo {\n        //\tvar bikeType: String? = null\n        //\tvar bikeSeries: ArrayList<BikeSeries>? = null\n        //}\n                \n        //class BikeSeries {\n        //\tvar name: String? = null\n        //\tvar description: String? = null\n        //\tvar bikeImage: ByteArray? = null\n        //\tvar items: ArrayList<Bike>? = null\n        //}\n                \n        //class Bike {\n        //\tvar productNo: String? = null\n        //\tvar productName: String? = null\n        //\tvar color: String? = null\n        //\tvar size: Int = 0\n        //\tvar weight: Double = 0.toDouble()\n        //\tvar dealer: Double = 0.toDouble()\n        //\tvar listPrice: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        ///#region Init Data\n        var image1: ByteArray? = null\n        var image2: ByteArray? = null\n        var image3: ByteArray? = null\n        var image4: ByteArray? = null\n        var image5: ByteArray? = null\n        var image6: ByteArray? = null\n        var image7: ByteArray? = null\n        var image8: ByteArray? = null\n        var image9: ByteArray? = null\n        try {\n        \tval image1Stream = this.getResourceStream(\"image/Mountain-100.jpg\")\n        \timage1 = IOUtils.toByteArray(image1Stream)\n        \tval image2Stream = this.getResourceStream(\"image/Mountain-200.jpg\")\n        \timage2 = IOUtils.toByteArray(image2Stream)\n        \tval image3Stream = this.getResourceStream(\"image/Mountain-300.jpg\")\n        \timage3 = IOUtils.toByteArray(image3Stream)\n        \tval image4Stream = this.getResourceStream(\"image/Mountain-400-W.jpg\")\n        \timage4 = IOUtils.toByteArray(image4Stream)\n        \tval image5Stream = this.getResourceStream(\"image/Mountain-500.jpg\")\n        \timage5 = IOUtils.toByteArray(image5Stream)\n        \tval image6Stream = this.getResourceStream(\"image/Road-150.jpg\")\n        \timage6 = IOUtils.toByteArray(image6Stream)\n        \tval image7Stream = this.getResourceStream(\"image/Road-350-W.jpg\")\n        \timage7 = IOUtils.toByteArray(image7Stream)\n        \tval image8Stream = this.getResourceStream(\"image/Touring-1000.jpg\")\n        \timage8 = IOUtils.toByteArray(image8Stream)\n        \tval image9Stream = this.getResourceStream(\"image/Touring-2000.jpg\")\n        \timage9 = IOUtils.toByteArray(image9Stream)\n        } catch (e: IOException) {\n        \te.printStackTrace()\n        }\n        val datasource = ArrayList<BikeInfo>()\n        val bike1 = BikeInfo()\n        datasource.add(bike1)\n        bike1.bikeType = \"Mountain Bikes\"\n        bike1.bikeSeries = ArrayList<BikeSeries>()\n        val bs1 = BikeSeries()\n        bike1.bikeSeries!!.add(bs1)\n        bs1.name = \"Mountain-100\"\n        bs1.bikeImage = image1\n        bs1.description =\n        \t\"Top-of-the-line competition mountain bike. Performance-enhancing options include the innovative HL Frame, super-smooth front suspension, and traction for all terrain.\"\n        bs1.items = ArrayList<Bike>()\n        val bItem1 = Bike()\n        bItem1.productNo = \"BK-M82S-38\"\n        bItem1.productName = \"Mountain-100 Silver, 38\"\n        bItem1.color = \"Silver\"\n        bItem1.size = 38\n        bItem1.weight = 20.35\n        bItem1.dealer = 1912.1544\n        bItem1.listPrice = 3399.99\n        bs1.items!!.add(bItem1)\n        val bItem2 = Bike()\n        bItem2.productNo = \"BK-M82B-38\"\n        bItem2.productName = \"Mountain-100 Black, 38\"\n        bItem2.color = \"Black\"\n        bItem2.size = 38\n        bItem2.weight = 20.35\n        bItem2.dealer = 1898.0944\n        bItem2.listPrice = 3374.99\n        bs1.items!!.add(bItem2)\n        val bs2 = BikeSeries()\n        bike1.bikeSeries!!.add(bs2)\n        bs2.name = \"Mountain-200\"\n        bs2.bikeImage = image2\n        bs2.description =\n        \t\"Serious back-country riding. Perfect for all levels of competition. Uses the same HL Frame as the Mountain-100.\"\n        bs2.items = ArrayList<Bike>()\n        val bItem3 = Bike()\n        bItem3.productNo = \"BK-M68S-42\"\n        bItem3.productName = \"Mountain-200 Silver, 42\"\n        bItem3.color = \"Silver\"\n        bItem3.size = 42\n        bItem3.weight = 23.77\n        bItem3.dealer = 1265.6195\n        bItem3.listPrice = 2319.99\n        bs2.items!!.add(bItem3)\n        val bItem4 = Bike()\n        bItem4.productNo = \"BK-M68B-38\"\n        bItem4.productName = \"Mountain-200 Black, 38\"\n        bItem4.color = \"Black\"\n        bItem4.size = 38\n        bItem4.weight = 23.35\n        bItem4.dealer = 1251.9813\n        bItem4.listPrice = 2294.99\n        bs2.items!!.add(bItem4)\n        val bs3 = BikeSeries()\n        bike1.bikeSeries!!.add(bs3)\n        bs3.name = \"Mountain-300\"\n        bs3.bikeImage = image3\n        bs3.description =\n        \t\"For true trail addicts. An extremely durable bike that will go anywhere and keep you in control on challenging terrain - without breaking your budget.\"\n        bs3.items = ArrayList<Bike>()\n        val bItem5 = Bike()\n        bItem5.productNo = \"BK-M47B-38\"\n        bItem5.productName = \"Mountain-300 Black, 38\"\n        bItem5.color = \"Black\"\n        bItem5.size = 38\n        bItem5.weight = 25.35\n        bItem5.dealer = 598.4354\n        bItem5.listPrice = 1079.99\n        bs3.items!!.add(bItem5)\n        val bItem6 = Bike()\n        bItem6.productNo = \"BK-M47B-40\"\n        bItem6.productName = \"Mountain-300 Black, 40\"\n        bItem6.color = \"Black\"\n        bItem6.size = 40\n        bItem6.weight = 25.77\n        bItem6.dealer = 598.4354\n        bItem6.listPrice = 1079.99\n        bs3.items!!.add(bItem6)\n        val bs4 = BikeSeries()\n        bike1.bikeSeries!!.add(bs4)\n        bs4.name = \"Mountain-400-W\"\n        bs4.bikeImage = image4\n        bs4.description =\n        \t\"This bike delivers a high-level of performance on a budget. It is responsive and maneuverable, and offers peace-of-mind when you decide to go off-road.\"\n        bs4.items = ArrayList<Bike>()\n        val bItem7 = Bike()\n        bItem7.productNo = \"BKBK-M38S-38\"\n        bItem7.productName = \"Mountain-400-W Silver, 38\"\n        bItem7.color = \"Silver\"\n        bItem7.size = 38\n        bItem7.weight = 26.35\n        bItem7.dealer = 419.7784\n        bItem7.listPrice = 769.49\n        bs4.items!!.add(bItem7)\n        val bItem8 = Bike()\n        bItem8.productNo = \"BK-M38S-40\"\n        bItem8.productName = \"Mountain-400-W Silver, 40\"\n        bItem8.color = \"Silver\"\n        bItem8.size = 40\n        bItem8.weight = 26.77\n        bItem8.dealer = 419.7784\n        bItem8.listPrice = 769.49\n        bs4.items!!.add(bItem8)\n        val bs5 = BikeSeries()\n        bike1.bikeSeries!!.add(bs5)\n        bs5.name = \"Mountain-500\"\n        bs5.bikeImage = image5\n        bs5.description =\n        \t\"Suitable for any type of riding, on or off-road. Fits any budget. Smooth-shifting with a comfortable ride.\"\n        bs5.items = ArrayList<Bike>()\n        val bItem9 = Bike()\n        bItem9.productNo = \"BK-M18S-40\"\n        bItem9.productName = \"Mountain-500 Silver, 40\"\n        bItem9.color = \"Silver\"\n        bItem9.size = 40\n        bItem9.weight = 27.35\n        bItem9.dealer = 308.2179\n        bItem9.listPrice = 564.99\n        bs5.items!!.add(bItem9)\n        val bItem10 = Bike()\n        bItem10.productNo = \"BK-M18B-40\"\n        bItem10.productName = \"Mountain-500 Black, 40\"\n        bItem10.color = \"Black\"\n        bItem10.size = 40\n        bItem10.weight = 27.35\n        bItem10.dealer = 294.5797\n        bItem10.listPrice = 539.99\n        bs5.items!!.add(bItem10)\n        val bike2 = BikeInfo()\n        datasource.add(bike2)\n        bike2.bikeType = \"Road Bikes\"\n        bike2.bikeSeries = ArrayList<BikeSeries>()\n        val bs6 = BikeSeries()\n        bike2.bikeSeries!!.add(bs6)\n        bs6.name = \"Road-150\"\n        bs6.bikeImage = image6\n        bs6.description =\n        \t\"This bike is ridden by race winners. Developed with the Adventure Works Cycles professional race team, it has a extremely light heat-treated aluminum frame, and steering that allows precision control.\"\n        bs6.items = ArrayList<Bike>()\n        val bItem11 = Bike()\n        bItem11.productNo = \"BK-R93R-62\"\n        bItem11.productName = \"Road-150 Red, 62\"\n        bItem11.color = \"Red\"\n        bItem11.size = 62\n        bItem11.weight = 15.0\n        bItem11.dealer = 2171.2942\n        bItem11.listPrice = 3578.27\n        bs6.items!!.add(bItem11)\n        val bItem12 = Bike()\n        bItem12.productNo = \"BK-R93R-44\"\n        bItem12.productName = \"Road-150 Red, 44\"\n        bItem12.color = \"Red\"\n        bItem12.size = 44\n        bItem12.weight = 13.77\n        bItem12.dealer = 2171.2942\n        bItem12.listPrice = 3578.27\n        bs6.items!!.add(bItem12)\n        val bs7 = BikeSeries()\n        bike2.bikeSeries!!.add(bs7)\n        bs7.name = \"Road-350-W\"\n        bs7.bikeImage = image7\n        bs7.description =\n        \t\"Cross-train, race, or just socialize on a sleek, aerodynamic bike designed for a woman. Advanced seat technology provides comfort all day.\"\n        bs7.items = ArrayList<Bike>()\n        val bItem13 = Bike()\n        bItem13.productNo = \"BK-R79Y-40\"\n        bItem13.productName = \"Road-350-W Yellow, 40\"\n        bItem13.color = \"Yellow\"\n        bItem13.size = 40\n        bItem13.weight = 15.35\n        bItem13.dealer = 1082.51\n        bItem13.listPrice = 1700.99\n        bs7.items!!.add(bItem13)\n        val bItem14 = Bike()\n        bItem14.productNo = \"BK-R79Y-42\"\n        bItem14.productName = \"Road-350-W Yellow, 42\"\n        bItem14.color = \"Yellow\"\n        bItem14.size = 42\n        bItem14.weight = 15.77\n        bItem14.dealer = 1082.51\n        bItem14.listPrice = 1700.99\n        bs7.items!!.add(bItem14)\n        val bike3 = BikeInfo()\n        datasource.add(bike3)\n        bike3.bikeType = \"Touring Bikes\"\n        bike3.bikeSeries = ArrayList<BikeSeries>()\n        val bs8 = BikeSeries()\n        bike3.bikeSeries!!.add(bs8)\n        bs8.name = \"Touring-1000\"\n        bs8.bikeImage = image8\n        bs8.description =\n        \t\"Travel in style and comfort. Designed for maximum comfort and safety. Wide gear range takes on all hills. High-tech aluminum alloy construction provides durability without added weight.\"\n        bs8.items = ArrayList<Bike>()\n        val bItem15 = Bike()\n        bItem15.productNo = \"BK-T79Y-46\"\n        bItem15.productName = \"Touring-1000 Yellow, 46\"\n        bItem15.color = \"Yellow\"\n        bItem15.size = 46\n        bItem15.weight = 25.13\n        bItem15.dealer = 1481.9379\n        bItem15.listPrice = 2384.07\n        bs8.items!!.add(bItem15)\n        val bItem16 = Bike()\n        bItem16.productNo = \"BK-T79U-46\"\n        bItem16.productName = \"Touring-1000 Blue, 46\"\n        bItem16.color = \"Blue\"\n        bItem16.size = 46\n        bItem16.weight = 25.13\n        bItem16.dealer = 1481.9379\n        bItem16.listPrice = 2384.07\n        bs8.items!!.add(bItem16)\n        val bs9 = BikeSeries()\n        bike3.bikeSeries!!.add(bs9)\n        bs9.name = \"Touring-2000\"\n        bs9.bikeImage = image9\n        bs9.description =\n        \t\"The plush custom saddle keeps you riding all day, and there's plenty of space to add panniers and bike bags to the newly-redesigned carrier. This bike has stability when fully-loaded.\"\n        bs9.items = ArrayList<Bike>()\n        val bItem17 = Bike()\n        bItem17.productNo = \"BK-T44U-60\"\n        bItem17.productName = \"Touring-2000 Blue, 60\"\n        bItem17.color = \"Blue\"\n        bItem17.size = 60\n        bItem17.weight = 27.9\n        bItem17.dealer = 755.1508\n        bItem17.listPrice = 1214.85\n        bs9.items!!.add(bItem17)\n        ///#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatecell.SheetTemplate": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_SheetTemplate.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.templates.templatecell.InlineTemplate": "\n        //Load template file from resource\n        val templateFile = this.getResourceStream(\"xlsx/Template_InlineTemplate.xlsx\")\n        workbook.open(templateFile)\n        \n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n        \n        val datasource = ArrayList<SalesRecord>()\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.add(record3)\n        val record4 = SalesRecord()\n        record4.area = \"North America\"\n        record4.city = \"Chicago\"\n        record4.category = \"Consumer Electronics\"\n        record4.name = \"Canon EOS 1500D\"\n        record4.revenue = 98650.0\n        datasource.add(record4)\n        val record5 = SalesRecord()\n        record5.area = \"North America\"\n        record5.city = \"Minnesota\"\n        record5.category = \"Consumer Electronics\"\n        record5.name = \"Canon EOS 1500D\"\n        record5.revenue = 89110.0\n        datasource.add(record5)\n        val record6 = SalesRecord()\n        record6.area = \"South America\"\n        record6.city = \"Santiago\"\n        record6.category = \"Consumer Electronics\"\n        record6.name = \"Canon EOS 1500D\"\n        record6.revenue = 459000.0\n        datasource.add(record6)\n        val record7 = SalesRecord()\n        record7.area = \"North America\"\n        record7.city = \"Chicago\"\n        record7.category = \"Consumer Electronics\"\n        record7.name = \"Haier 394L 4Star\"\n        record7.revenue = 367050.0\n        datasource.add(record7)\n        val record8 = SalesRecord()\n        record8.area = \"South America\"\n        record8.city = \"Quito\"\n        record8.category = \"Consumer Electronics\"\n        record8.name = \"Haier 394L 4Star\"\n        record8.revenue = 729100.0\n        datasource.add(record8)\n        val record9 = SalesRecord()\n        record9.area = \"South America\"\n        record9.city = \"Santiago\"\n        record9.category = \"Consumer Electronics\"\n        record9.name = \"Haier 394L 4Star\"\n        record9.revenue = 578900.0\n        datasource.add(record9)\n        val record10 = SalesRecord()\n        record10.area = \"North America\"\n        record10.city = \"Fremont\"\n        record10.category = \"Consumer Electronics\"\n        record10.name = \"IFB 6.5 Kg FullyAuto\"\n        record10.revenue = 904930.0\n        datasource.add(record10)\n        val record11 = SalesRecord()\n        record11.area = \"South America\"\n        record11.city = \"Buenos Aires\"\n        record11.category = \"Consumer Electronics\"\n        record11.name = \"IFB 6.5 Kg FullyAuto\"\n        record11.revenue = 673800.0\n        datasource.add(record11)\n        val record12 = SalesRecord()\n        record12.area = \"South America\"\n        record12.city = \"Medillin\"\n        record12.category = \"Consumer Electronics\"\n        record12.name = \"IFB 6.5 Kg FullyAuto\"\n        record12.revenue = 82910.0\n        datasource.add(record12)\n        val record13 = SalesRecord()\n        record13.area = \"North America\"\n        record13.city = \"Chicago\"\n        record13.category = \"Consumer Electronics\"\n        record13.name = \"Mi LED 40inch\"\n        record13.revenue = 550010.0\n        datasource.add(record13)\n        val record14 = SalesRecord()\n        record14.area = \"North America\"\n        record14.city = \"Minnesota\"\n        record14.category = \"Consumer Electronics\"\n        record14.name = \"Mi LED 40inch\"\n        record14.revenue = 1784702.0\n        datasource.add(record14)\n        val record15 = SalesRecord()\n        record15.area = \"South America\"\n        record15.city = \"Santiago\"\n        record15.category = \"Consumer Electronics\"\n        record15.name = \"Mi LED 40inch\"\n        record15.revenue = 102905.0\n        datasource.add(record15)\n        val record16 = SalesRecord()\n        record16.area = \"North America\"\n        record16.city = \"Chicago\"\n        record16.category = \"Consumer Electronics\"\n        record16.name = \"Sennheiser HD 4.40-BT\"\n        record16.revenue = 178100.0\n        datasource.add(record16)\n        val record17 = SalesRecord()\n        record17.area = \"South America\"\n        record17.city = \"Quito\"\n        record17.category = \"Consumer Electronics\"\n        record17.name = \"Sennheiser HD 4.40-BT\"\n        record17.revenue = 234459.0\n        datasource.add(record17)\n        val record18 = SalesRecord()\n        record18.area = \"North America\"\n        record18.city = \"Minnesota\"\n        record18.category = \"Mobile\"\n        record18.name = \"Iphone XR\"\n        record18.revenue = 1734621.0\n        datasource.add(record18)\n        val record19 = SalesRecord()\n        record19.area = \"South America\"\n        record19.city = \"Santiago\"\n        record19.category = \"Mobile\"\n        record19.name = \"Iphone XR\"\n        record19.revenue = 109300.0\n        datasource.add(record19)\n        val record20 = SalesRecord()\n        record20.area = \"North America\"\n        record20.city = \"Chicago\"\n        record20.category = \"Mobile\"\n        record20.name = \"OnePlus 7Pro\"\n        record20.revenue = 499100.0\n        datasource.add(record20)\n        val record21 = SalesRecord()\n        record21.area = \"South America\"\n        record21.city = \"Quito\"\n        record21.category = \"Mobile\"\n        record21.name = \"OnePlus 7Pro\"\n        record21.revenue = 215000.0\n        datasource.add(record21)\n        val record22 = SalesRecord()\n        record22.area = \"North America\"\n        record22.city = \"Minnesota\"\n        record22.category = \"Mobile\"\n        record22.name = \"Redmi 7\"\n        record22.revenue = 81650.0\n        datasource.add(record22)\n        val record23 = SalesRecord()\n        record23.area = \"South America\"\n        record23.city = \"Quito\"\n        record23.category = \"Mobile\"\n        record23.name = \"Redmi 7\"\n        record23.revenue = 276390.0\n        datasource.add(record23)\n        val record24 = SalesRecord()\n        record24.area = \"North America\"\n        record24.city = \"Minnesota\"\n        record24.category = \"Mobile\"\n        record24.name = \"Samsung S9\"\n        record24.revenue = 896250.0\n        datasource.add(record24)\n        val record25 = SalesRecord()\n        record25.area = \"South America\"\n        record25.city = \"Buenos Aires\"\n        record25.category = \"Mobile\"\n        record25.name = \"Samsung S9\"\n        record25.revenue = 896250.0\n        datasource.add(record25)\n        val record26 = SalesRecord()\n        record26.area = \"South America\"\n        record26.city = \"Quito\"\n        record26.category = \"Mobile\"\n        record26.name = \"Samsung S9\"\n        record26.revenue = 716520.0\n        datasource.add(record26)\n        //#endregion\n        \n        //Init template global settings\n        workbook.getNames().add(\"TemplateOptions.KeepLineSize\", \"true\")\n        //Add data source\n        workbook.addDataSource(\"ds\", datasource)\n        //Invoke to process the template\n        workbook.processTemplate()\n\t",
  "com.grapecity.documents.excel.examples.features.formulas.UseArrayFormula": "\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"E4:J5\").value = arrayOf(arrayOf<Any?>(1, 2, 3), arrayOf<Any?>(4, 5, 6))\n\n        worksheet.getRange(\"I6:J8\").value = arrayOf(\n\n                arrayOf<Any?>(2, 2), arrayOf<Any?>(3, 3), arrayOf<Any?>(4, 4))\n\n        //O     P      Q\n        //2     4      #N/A\n        //12    15     #N/A\n        //#N/A  #N/A   #N/A\n        worksheet.getRange(\"O9:Q11\").formulaArray = \"=E4:G5*I6:J8\"\n\n        //judge if Range O9 has array formula.\n        if (worksheet.getRange(\"O9\").hasArray) {\n            //set O9's entire array's interior color.\n            val currentarray = worksheet.getRange(\"O9\").currentArray\n            currentarray.interior.color = Color.GetGreen()\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.formulas.DirtyAndCalculation": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1\").value = 1\n        worksheet.getRange(\"A2\").formula = \"=A1\"\n        worksheet.getRange(\"A3\").formula = \"=SUM(A1, A2)\"\n\n        //when get value, calc engine will first calculate and cache the result, then returns the cached result.\n        val value_A2 = worksheet.getRange(\"A2\").value\n        val value_A3 = worksheet.getRange(\"A3\").value\n\n        //disable calc engine.\n        workbook.enableCalculation = false\n\n        //Dirty() method will clear the cached value of the workbook.\n        workbook.dirty()\n        //Calculate() will not work, because of workbook.EnablCalculation is false.\n        workbook.calculate()\n        //it returns 0 because of no cache value exist.\n        val value_A2_1 = worksheet.getRange(\"A2\").value\n        val value_A3_1 = worksheet.getRange(\"A3\").value\n\n        worksheet.getRange(\"A1\").value = 2\n        //enable calc engine.\n        workbook.enableCalculation = true\n        //Dirty() method will clear the cached value of Range A2:A3.\n        //    worksheet.get(\"A2:A3\").Dirty();\n        //Calculate() method will calculate and cache the result, it will return the cache value directly when get value later.\n        //   worksheet.get(\"A2:A3\").Calculate();\n\n        //it returns cache value directly, does not calculate again.\n        val value_A2_2 = worksheet.getRange(\"A2\").value\n        val value_A3_2 = worksheet.getRange(\"A3\").value\n\n    ",
  "com.grapecity.documents.excel.examples.features.formulas.AddCustomName": "\n\n        val worksheet1 = workbook.worksheets.get(0)\n        val worksheet2 = workbook.worksheets.add()\n\n        worksheet1.getRange(\"C8\").numberFormat = \"0.0000\"\n\n        worksheet1.names.add(\"test1\", \"=Sheet1!\\$A$1\")\n        worksheet1.names.add(\"test2\", \"=Sheet1!test1*2\")\n        workbook.names.add(\"test3\", \"=Sheet1!\\$A$1\")\n\n        worksheet1.getRange(\"A1\").value = 1\n\n        // C6's value is 1.\n        worksheet1.getRange(\"C6\").formula = \"=test1\"\n        // C7's value is 3.\n        worksheet1.getRange(\"C7\").formula = \"=test1 + test2\"\n        // C8's value is 6.283185307\n        worksheet1.getRange(\"C8\").formula = \"=test2*PI()\"\n\n        // judge if Range C6:C8 have formula.\n        for (i in 5..7) {\n            if (worksheet1.getRange(i, 2).hasFormula) {\n                worksheet1.getRange(i, 2).interior.color = Color.GetLightBlue()\n            }\n        }\n\n        // worksheet1 range A2's value is 1.\n        worksheet2.getRange(\"A2\").formula = \"=test3\"\n        // judge if Range A2 has formula.\n        if (worksheet2.getRange(\"A2\").hasFormula) {\n            worksheet2.getRange(\"A2\").interior.color = Color.GetLightBlue()\n        }\n\n        // set r1c1 formula.\n        worksheet2.getRange(\"A3\").formulaR1C1 = \"=R[-1]C\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.formulas.UseTableFormula": "\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:E\").columnWidth = 15.0\n        worksheet.getRange(\"A1:E3\").value = arrayOf(arrayOf<Any?>(\"SalesPerson\", \"Region\", \"SalesAmount\", \"ComPct\", \"ComAmt\"), arrayOf<Any?>(\"Joe\", \"North\", 260, 0.10, null), arrayOf<Any?>(\"Nia\", \"South\", 660, 0.15, null))\n\n        worksheet.tables.add(worksheet.getRange(\"A1:E3\"), true)\n        worksheet.tables.get(0).name = \"DeptSales\"\n        worksheet.tables.get(0).columns.get(\"ComPct\").dataBodyRange.numberFormat = \"0%\"\n\n        //Use table formula in table range.\n        worksheet.tables.get(0).columns.get(\"ComAmt\").dataBodyRange.formula = \"=[@ComPct]*[@SalesAmount]\"\n\n        //Use table formula out of table range.\n        worksheet.getRange(\"F2\").formula = \"=SUM(DeptSales[@SalesAmount])\"\n        worksheet.getRange(\"G2\").formula = \"=SUM(DeptSales[[#Data],[SalesAmount]])\"\n        worksheet.getRange(\"H2\").formula = \"=SUM(DeptSales[SalesAmount])\"\n        worksheet.getRange(\"I2\").formula = \"=SUM(DeptSales[@ComPct], DeptSales[@ComAmt])\"\n\n        //judge if Range F2:I2 have formula.\n        for (i in 5..8) {\n            if (worksheet.getRange(1, i).hasFormula) {\n                worksheet.getRange(1, i).interior.color = Color.GetLightBlue()\n            }\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.formulas.ConfigWorkbookReferenceStyle": "\n        //set workbook's reference style to R1C1. exported xlsx file will be R1C1 style.\n        workbook.referenceStyle = ReferenceStyle.R1C1\n    ",
  "com.grapecity.documents.excel.examples.features.formulas.precedentsanddependents.Precedents": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1\").setValue(100)\n        worksheet.getRange(\"C1\").setFormula(\"=\\$A$1\")\n        worksheet.getRange(\"E1:E5\").setFormula(\"=\\$A$1\")\n\n        worksheet.getRange(\"E2\").setFormula(\"=sum(A1:A2, B4,C1:C3)\")\n        worksheet.getRange(\"A1\").setValue(1)\n        worksheet.getRange(\"A2\").setValue(2)\n        worksheet.getRange(\"B4\").setValue(3)\n        worksheet.getRange(\"C1\").setValue(4)\n        worksheet.getRange(\"C2\").setValue(5)\n        worksheet.getRange(\"C3\").setValue(6)\n\n        for (item in worksheet.getRange(\"E2\").precedents) {\n            item.getInterior().setColor(Color.GetPink())\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.formulas.precedentsanddependents.Dependents": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1\").setValue(100)\n        worksheet.getRange(\"C1\").setFormula(\"=\\$A$1\")\n        worksheet.getRange(\"E1:E5\").setFormula(\"=\\$A$1\")\n        for (item in worksheet.getRange(\"A1\").dependents) {\n            item.getInterior().setColor(Color.GetAzure())\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.formulas.precedentsanddependents.GetAllPrecedents": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"E2\").setFormula(\"=sum(C1:C2)\")\n        worksheet.getRange(\"C1\").setFormula(\"=B1\")\n        worksheet.getRange(\"B1\").setFormula(\"=sum(A1:A2)\")\n        worksheet.getRange(\"A1\").setValue(1)\n        worksheet.getRange(\"A2\").setValue(2)\n        worksheet.getRange(\"C2\").setValue(3)\n\n        var list = ArrayList<IRange>()\n        for (item in worksheet.getRange(\"E2\").precedents) {\n            list.add(item)\n        }\n\n        while (list.size > 0) {\n            val temp = list\n            list = ArrayList<IRange>()\n            for (item in temp) {\n                for (i in 0 until item.getRowCount()) {\n                    for (j in 0 until item.getColumnCount()) {\n                        val dependents = item.getCells().get(i, j).getPrecedents()\n                        if (dependents.size === 0) {\n                            item.getCells().get(i, j).getInterior().setColor(Color.GetSkyBlue())\n                        } else {\n                            item.getCells().get(i, j).getInterior().setColor(Color.GetGray())\n                            list.addAll(dependents)\n                        }\n                    }\n                }\n            }\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.ToJsonFromJson": "\n\n        // /ToJson&FromJson can be used in combination with spread.sheets product:http://spread.grapecity.com/spreadjs/sheets/\n\n        //GrapeCity Documents for Excel import an excel file.\n        //change the path to real source file path.\n        val source = \"source.xlsx\"\n        workbook.open(source)\n        //GrapeCity Documents for Excel export to a json string.\n        val jsonstr = workbook.toJson()\n        //use the json string to initialize spread.sheets product.\n        //spread.sheets will show the excel file contents.\n\n        //spread.sheets product export a json string.\n        //GrapeCity Documents for Excel use the json string to initialize.\n        workbook.fromJson(jsonstr)\n        //GrapeCity Documents for Excel export workbook to an excel file.\n        //change the path to real export file path.\n        val export = \"export.xlsx\"\n        workbook.save(export)\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.ProtectWorkbook": "\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/Medical office start-up expenses 1.xlsx\")\n        workbook.open(fileStream)\n\n        //Protects the workbook with a password so that other users cannot view hidden worksheets, add, move, delete, hide, or rename worksheets.\n        //The protection only happens when you open it with an Excel application.\n        workbook.protect(\"Y6dh!et5\")\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.SaveWorkbookToExcelFile": "\n\n        //change the path to real export path when save.\n        workbook.save(\"dest.xlsx\")\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.UnprotectWorkbook": "\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/Medical office start-up expenses 1.xlsx\")\n        workbook.open(fileStream)\n\n        //Protects the workbook with a password so that other users cannot view hidden worksheets, add, move, delete, hide, or rename worksheets.\n        //The protection only happens when you open it with an Excel application.\n        workbook.protect(\"Y6dh!et5\")\n\n        //Removes the above protection from the workbook.\n        workbook.unprotect(\"Y6dh!et5\")\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.ImportXlsmToWorkbook": "\n        // GcExcel supports open xlsm file\n        workbook.open(\"macros.xlsm\")\n\n        // Macros can be preserved after saving\n        workbook.save(\"macros-exported.xlsm\")\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.ConfigureWorkbookView": "\n\n        // Workbook view settings.\n        val bookView = workbook.bookView\n        bookView.displayVerticalScrollBar = false\n        bookView.displayWorkbookTabs = true\n        bookView.tabRatio = 0.5\n\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.SaveWorkbookToCsvFileWithOptions": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Sex\", \"Weight\", \"Height\"), arrayOf(\"Bob\", \"NewYork\", GregorianCalendar(1968, 5, 8), \"male\", 80, 180), arrayOf(\"Betty\", \"NewYork\", GregorianCalendar(1972, 6, 3), \"female\", 72, 168), arrayOf(\"Gary\", \"NewYork\", GregorianCalendar(1964, 2, 2), \"male\", 71, 179), arrayOf(\"Hunk\", \"Washington\", GregorianCalendar(1972, 7, 8), \"male\", 80, 171), arrayOf(\"Cherry\", \"Washington\", GregorianCalendar(1986, 1, 2), \"female\", 58, 161), arrayOf(\"Eva\", \"Washington\", GregorianCalendar(1993, 2, 5), \"female\", 71, 180))\n\n        // Set data.\n        val sheet = workbook.worksheets.get(0)\n        sheet.getRange(\"A1:F7\").value = data\n        sheet.tables.add(sheet.getRange(\"A1:F7\"), true)\n\n        //Save csv options\n        val options = CsvSaveOptions()\n        options.columnSeparator = \"-\"\n        options.rowSeparator = \"\\r\\n\"\n        options.cellSeparator = '\"'\n\n        //Change the path to real export path when save.\n        workbook.save(\"dest.csv\", options)\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.SaveWorkbookToCsvFile": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Sex\", \"Weight\", \"Height\"), arrayOf(\"Bob\", \"NewYork\", GregorianCalendar(1968, 5, 8), \"male\", 80, 180), arrayOf(\"Betty\", \"NewYork\", GregorianCalendar(1972, 6, 3), \"female\", 72, 168), arrayOf(\"Gary\", \"NewYork\", GregorianCalendar(1964, 2, 2), \"male\", 71, 179), arrayOf(\"Hunk\", \"Washington\", GregorianCalendar(1972, 7, 8), \"male\", 80, 171), arrayOf(\"Cherry\", \"Washington\", GregorianCalendar(1986, 1, 2), \"female\", 58, 161), arrayOf(\"Eva\", \"Washington\", GregorianCalendar(1993, 2, 5), \"female\", 71, 180))\n\n        // Set data.\n        val sheet = workbook.worksheets.get(0)\n        sheet.getRange(\"A1:F7\").value = data\n        sheet.tables.add(sheet.getRange(\"A1:F7\"), true)\n\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.ImportCsvFileToWorkbookWithOptions": " //Open csv with more settings.\n\n        val options = CsvOpenOptions()\n        options.columnSeparator = \",\"\n        options.rowSeparator = \"\\r\\n\"\n        options.cellSeparator = '\"'\n\n        //Change the path to the real file path when open.\n        workbook.open(\"source.csv\", options)\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.ImportOleObjectsToWorkbookAndExport": "\n        workbook.open(getResourceStream(\"xlsx/OleTemplates.xlsx\")!!)\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.ImportExcelFileWithoutCalculation": "\n\n        //When XlsxOpenOptions.DoNotRecalculateAfterOpened means GrapeCity Documents for Excel will just read all the cached values without calculating again after\n        //opening an Excel file.\n        //Change the path to the real file path when open.\n        val options = XlsxOpenOptions()\n        options.doNotRecalculateAfterOpened = true\n\n        workbook.open(\"source.xlsx\", options)\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.LoadAndSaveJsonWithShapes": "\n        val workbookWithShape = Workbook()\n        val worksheet = workbookWithShape.worksheets.get(0)\n\n        // Add a shape in worksheet\n        val shape = worksheet.shapes.addShape(AutoShapeType.Parallelogram, 1.0, 1.0, 200.0, 100.0)\n        shape.line.dashStyle = LineDashStyle.Dash\n        shape.line.style = LineStyle.Single\n        shape.line.weight = 2.0\n        shape.line.color.objectThemeColor = ThemeColor.Accent6\n        shape.line.transparency = 0.3\n\n        // jsongString contains shapes\n        val jsonString = workbookWithShape.toJson()\n\n        // GcExcel can load json strig contains shapes now\n        workbook.fromJson(jsonString)\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.ImportExcelFileToWorkbook": "\n\n        //Change the path to the real file path when open.\n        workbook.open(\"source.xlsx\")\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.CreateNewWorkbook": "\n\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.ImportExcelFileWithPassword": "\n        //Change the path to the real file path when open.\n        val options = XlsxOpenOptions()\n        options.password = \"123456\"\n\n        workbook.open(\"source.xlsx\", options)\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.ImportCsvFileToWorkbook": "\n        workbook.open(this.getResourceStream(\"xlsx/Information.csv\"), OpenFileFormat.Csv)\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.SaveWorkbookWithPassword": "\n\n        //Change the path to real export path when save.\n        val options = XlsxSaveOptions()\n        options.password = \"123456\"\n\n        workbook.save(\"dest.xlsx\", options)\n    ",
  "com.grapecity.documents.excel.examples.features.workbook.ImportExcelFileDataOnly": "\n\n        //Use XlsxOpenOptions.ImportFlags to control what you want to import from excel, ImportFlags.Data means only the data will be imported\n        //Change the path to the real file path when open.\n        val options = XlsxOpenOptions()\n        options.importFlags = EnumSet.of(ImportFlags.Data)\n\n        workbook.open(\"source.xlsx\", options)\n    ",
  "com.grapecity.documents.excel.examples.features.datavalidation.CreateDecimalValidation": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"C2:E4\").value = arrayOf(arrayOf(1, 3.0, 3.4), arrayOf(7, 9, 102.7), arrayOf(102.8, 110, 120))\n\n        //add decimal validation.\n        worksheet.getRange(\"C2:E4\").validation.add(ValidationType.Decimal, ValidationAlertStyle.Stop, ValidationOperator.Between, 3.4, 102.8)\n        val validation = worksheet.getRange(\"C2:E4\").validation\n        validation.ignoreBlank = true\n        validation.inputTitle = \"Tips\"\n        validation.inputMessage = \"Input a decimal value between 3.4 and 102.8, please.\"\n        validation.errorTitle = \"Error\"\n        validation.errorMessage = \"input value does not between 3.4 and 102.8.\"\n        validation.showInputMessage = true\n        validation.showError = true\n\n        //judge if Range[\"C2:E4\"] has validation.\n        for (i in 1..3) {\n            for (j in 2..4) {\n                if (worksheet.getRange(i, j).hasValidation) {\n                    //set the range[i, j]'s interior color.\n                    worksheet.getRange(i, j).interior.color = Color.GetLightBlue()\n                }\n            }\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.datavalidation.CreateListValidation": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A1\").value = \"aaa\"\n        worksheet.getRange(\"A2\").value = \"bbb\"\n        worksheet.getRange(\"A3\").value = \"ccc\"\n\n        worksheet.getRange(\"C2:E4\").value = arrayOf(arrayOf<Any?>(\"aaa\", \"bbb\", \"ccc\"), arrayOf<Any?>(\"aaa1\", \"bbb1\", \"ccc1\"), arrayOf<Any?>(\"aaa2\", \"bbb2\", \"ccc2\"))\n\n        //create list validation.\n        worksheet.getRange(\"C2:E4\").validation.add(ValidationType.List, ValidationAlertStyle.Stop, ValidationOperator.Between, \"=\\$a$1:\\$a$3\", null)\n        val validation = worksheet.getRange(\"C2:E4\").validation\n        validation.inCellDropdown = true\n\n        //judge if Range[\"C2:E4\"] has validation.\n        for (i in 1..3) {\n            for (j in 2..4) {\n                if (worksheet.getRange(i, j).hasValidation) {\n                    //set the range[i, j]'s interior color.\n                    worksheet.getRange(i, j).interior.color = Color.GetLightBlue()\n                }\n            }\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.datavalidation.CreateCustomValidation": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A2\").value = 1\n        worksheet.getRange(\"A3\").value = 2\n\n        worksheet.getRange(\"C2\").value = 0\n\n        //create custom validation, if the expression \"=$C$2\" result is true, the cell's validation will be true, otherwise, it is false.\n        //when use custom validation, validationOperator and formula2 parameters will be ignored even if you have given.\n        worksheet.getRange(\"A2:A3\").validation.add(ValidationType.Custom, ValidationAlertStyle.Information, ValidationOperator.Between, \"=\\$C$2\", null)\n\n        //judge if Range[\"A2:A3\"] has validation.\n        for (i in 1..2) {\n            if (worksheet.getRange(i, 0).hasValidation) {\n                //set the range[i, 0]'s interior color.\n                worksheet.getRange(i, 0).interior.color = Color.GetLightBlue()\n            }\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.datavalidation.CreateWholeNumberValidation": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"C2:E4\").value = arrayOf(arrayOf<Any?>(1, 3, 5), arrayOf<Any?>(7, 9, 11), arrayOf<Any?>(13, 15, 17))\n\n        //add whole number validation.\n        worksheet.getRange(\"C2:E4\").validation.add(ValidationType.Whole, ValidationAlertStyle.Stop, ValidationOperator.Between, 1, 8)\n        val validation = worksheet.getRange(\"C2:E4\").validation\n        validation.ignoreBlank = true\n        validation.inputTitle = \"Tips\"\n        validation.inputMessage = \"Input a value between 1 and 8, please\"\n        validation.errorTitle = \"Error\"\n        validation.errorMessage = \"input value does not between 1 and 8\"\n        validation.showInputMessage = true\n        validation.showError = true\n\n        //judge if Range[\"C2:E4\"] has validation.\n        for (i in 1..3) {\n            for (j in 2..4) {\n                if (worksheet.getRange(i, j).hasValidation) {\n                    //set the range[i, j]'s interior color.\n                    worksheet.getRange(i, j).interior.color = Color.GetLightBlue()\n                }\n\n            }\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.datavalidation.CreateTextLength": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"C2:E4\").value = arrayOf(arrayOf<Any?>(\"aa\", \"bb\", \"aa1\"), arrayOf<Any?>(\"ccc\", \"dddd\", \"dddd1\"), arrayOf<Any?>(\"ff\", \"ffff\", \"ffff1\"))\n\n        //create text length validation, text length between 2 and 3.\n        worksheet.getRange(\"C2:E4\").validation.add(ValidationType.TextLength, ValidationAlertStyle.Stop, ValidationOperator.Between, 2, 3)\n        //judge if Range[\"C2:E4\"] has validation.\n        for (i in 1..3) {\n            for (j in 2..4) {\n                if (worksheet.getRange(i, j).hasValidation) {\n                    //set the range[i, j]'s interior color.\n                    worksheet.getRange(i, j).interior.color = Color.GetLightBlue()\n                }\n            }\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.datavalidation.DeleteValidation": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"C2:E4\").value = arrayOf(arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 13, 0, 0), GregorianCalendar(1899, 11, 30, 13, 29, 59), GregorianCalendar(1899, 11, 30, 13, 30, 0)), arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 14, 0, 0), GregorianCalendar(1899, 11, 30, 15, 0, 0), GregorianCalendar(1899, 11, 30, 16, 30, 0)), arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 19, 0, 0), GregorianCalendar(1899, 11, 30, 18, 29, 59), GregorianCalendar(1899, 11, 30, 18, 30, 0)))\n\n        //create time validation.\n        worksheet.getRange(\"C2:E4\").validation.add(ValidationType.Time, ValidationAlertStyle.Stop, ValidationOperator.Between, GregorianCalendar(1899, 11, 30, 13, 30, 0), GregorianCalendar(1899, 11, 30, 18, 30, 0))\n\n        //delete validation.\n        worksheet.getRange(\"C2:E4\").validation.delete()\n\n        //judge if Range[\"C2:E4\"] has validation.\n        for (i in 1..3) {\n            for (j in 2..4) {\n                if (worksheet.getRange(i, j).hasValidation) {\n                    //set the range[i, j]'s interior color.\n                    worksheet.getRange(i, j).interior.color = Color.GetLightBlue()\n                }\n            }\n        }\n\n\n    ",
  "com.grapecity.documents.excel.examples.features.datavalidation.CreateDateValidation": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"C2:E4\").value = arrayOf(arrayOf<Any?>(GregorianCalendar(2020, 11, 1), GregorianCalendar(2020, 11, 14), GregorianCalendar(2020, 11, 15)), arrayOf<Any?>(GregorianCalendar(2020, 11, 18), GregorianCalendar(2020, 11, 19), GregorianCalendar(2020, 11, 30)), arrayOf<Any?>(GregorianCalendar(2020, 11, 31), GregorianCalendar(2019, 11, 13), GregorianCalendar(2019, 11, 15)))\n\n        //create date validation.\n        worksheet.getRange(\"C2:E4\").validation.add(ValidationType.Date, ValidationAlertStyle.Stop, ValidationOperator.Between, GregorianCalendar(2020, 11, 13), GregorianCalendar(2020, 11, 18))\n\n        //set column width just for export shown.\n        worksheet.getRange(\"C:E\").entireColumn.columnWidthInPixel = 120.0\n\n        //judge if Range[\"C2:E4\"] has validation.\n        for (i in 1..3) {\n            for (j in 2..4) {\n                if (worksheet.getRange(i, j).hasValidation) {\n                    //set the range[i, j]'s interior color.\n                    worksheet.getRange(i, j).interior.color = Color.GetLightBlue()\n                }\n            }\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.datavalidation.ModifyValidation": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"C2:E4\").value = arrayOf(arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 13, 0, 0), GregorianCalendar(1899, 11, 30, 13, 29, 59), GregorianCalendar(1899, 11, 30, 13, 30, 0)), arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 14, 0, 0), GregorianCalendar(1899, 11, 30, 15, 0, 0), GregorianCalendar(1899, 11, 30, 16, 30, 0)), arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 19, 0, 0), GregorianCalendar(1899, 11, 30, 18, 29, 59), GregorianCalendar(1899, 11, 30, 18, 30, 0)))\n\n        //create time validation.\n        worksheet.getRange(\"C2:E4\").validation.add(ValidationType.Time, ValidationAlertStyle.Stop, ValidationOperator.Between, GregorianCalendar(1899, 11, 30, 13, 30, 0), GregorianCalendar(1899, 11, 30, 18, 30, 0))\n\n        //Modify validation.\n        worksheet.getRange(\"C2:E4\").validation.formula1 = GregorianCalendar(1899, 11, 30, 14, 30, 0)\n        worksheet.getRange(\"C2:E4\").validation.formula2 = GregorianCalendar(1899, 11, 30, 19, 0, 0)\n\n        //judge if Range[\"C2:E4\"] has validation.\n        for (i in 1..3) {\n            for (j in 2..4) {\n                if (worksheet.getRange(i, j).hasValidation) {\n                    //set the range[i, j]'s interior color.\n                    worksheet.getRange(i, j).interior.color = Color.GetLightBlue()\n                }\n            }\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.datavalidation.CreateTimeValidation": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"C2:E4\").value = arrayOf(arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 13, 0, 0), GregorianCalendar(1899, 11, 30, 13, 29, 59), GregorianCalendar(1899, 11, 30, 13, 30, 0)), arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 14, 0, 0), GregorianCalendar(1899, 11, 30, 15, 0, 0), GregorianCalendar(1899, 11, 30, 16, 30, 0)), arrayOf<Any?>(GregorianCalendar(1899, 11, 30, 19, 0, 0), GregorianCalendar(1899, 11, 30, 18, 29, 59), GregorianCalendar(1899, 11, 30, 18, 30, 0)))\n\n        //create time validation.\n        worksheet.getRange(\"C2:E4\").validation.add(ValidationType.Time, ValidationAlertStyle.Stop, ValidationOperator.Between, GregorianCalendar(1899, 11, 30, 13, 30, 0), GregorianCalendar(1899, 11, 30, 18, 30, 0))\n\n        //judge if Range[\"C2:E4\"] has validation.\n        for (i in 1..3) {\n            for (j in 2..4) {\n                if (worksheet.getRange(i, j).hasValidation) {\n                    //set the range[i, j]'s interior color.\n                    worksheet.getRange(i, j).interior.color = Color.GetLightBlue()\n                }\n            }\n        }\n\n\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.LayoutAndFormatOptions": "\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"G1:L16\").value = sourceData\n        worksheet.getRange(\"G:L\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"G1:L16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"J1:J16\").numberFormat = \"$#,##0.00\"\n\n        //config pivot table's fields\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.ColumnField\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n        val field_Country = pivottable.pivotFields[\"Country\"]\n        field_Country.orientation = PivotFieldOrientation.PageField\n        val field_Order = pivottable.pivotFields[\"Order ID\"]\n        field_Order.orientation = PivotFieldOrientation.PageField\n\n        // set layout and format options.\n        pivottable.pageFieldOrder = Order.OverThenDown\n        pivottable.pageFieldWrapCount = 1\n        pivottable.errorString = \"Error\"\n        pivottable.nullString = \"Empty\"\n        pivottable.displayErrorString = true\n        pivottable.displayNullString = true\n        worksheet.getRange(\"A:D\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.CreatePivotTable": "\n\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"G1:L16\").value = sourceData\n        worksheet.getRange(\"G:L\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"G1:L16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"J1:J16\").numberFormat = \"$#,##0.00\"\n\n        //config pivot table's fields\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.ColumnField\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n        val field_Country = pivottable.pivotFields[\"Country\"]\n        field_Country.orientation = PivotFieldOrientation.PageField\n\n        worksheet.getRange(\"A:D\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.SetPivotFieldNameInPivotTable": "\n\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"G1:L16\").value = sourceData\n        worksheet.getRange(\"G:L\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"G1:L16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"J1:J16\").numberFormat = \"$#,##0.00\"\n\n        //config pivot table's fields\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.RowField\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n        val field_Country = pivottable.pivotFields[\"Country\"]\n        field_Country.orientation = PivotFieldOrientation.PageField\n\n        // Rename a pivot field\n        field_Category.name = \"Type\"\n\n        // Set row axis layout to view field names\n        pivottable.setRowAxisLayout(LayoutRowType.OutlineRow)\n        worksheet.getRange(\"A:C\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.SetCustomPivotStyle": "\n\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"J1:O16\").value = sourceData\n        worksheet.getRange(\"J:O\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"J1:O16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"L1:L16\").numberFormat = \"$#,##0.00\"\n\n        // config pivot table's fields\n        val field_Date = pivottable.pivotFields[\"Date\"]\n        field_Date.orientation = PivotFieldOrientation.PageField\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.RowField\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n        val field_Country = pivottable.pivotFields[\"Country\"]\n        field_Country.orientation = PivotFieldOrientation.ColumnField\n\n        // Create pivot style \"test\"\n        val pivotStyle = workbook.tableStyles.add(\"test\")\n\n        // Set table style as pivot table style\n        pivotStyle.showAsAvailablePivotStyle = true\n        pivotStyle.tableStyleElements[TableStyleElementType.PageFieldLabels].interior.color = Color.GetLightBlue()\n        pivotStyle.tableStyleElements[TableStyleElementType.PageFieldValues].interior.color = Color.GetLightBlue()\n        pivotStyle.tableStyleElements[TableStyleElementType.GrandTotalColumn].interior.color = Color.GetLightGreen()\n        pivotStyle.tableStyleElements[TableStyleElementType.GrandTotalRow].interior.color = Color.GetLightGreen()\n        pivotStyle.tableStyleElements[TableStyleElementType.HeaderRow].interior.color = Color.GetCyan()\n        pivotStyle.tableStyleElements[TableStyleElementType.FirstColumn].interior.color = Color.GetTomato()\n        pivotStyle.tableStyleElements[TableStyleElementType.FirstRowStripe].interior.color = Color.GetYellow()\n        pivotStyle.tableStyleElements[TableStyleElementType.SecondRowStripe].interior.color = Color.GetLightYellow()\n\n        // Set ShowTableStyleRowStripes as true\n        pivottable.showTableStyleRowStripes = true\n\n        // Set pivot table style\n        pivottable.style = pivotStyle\n        worksheet.getRange(\"A:I\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.RowAxisLayoutInPivotTable": "\n\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"A20:F35\").value = sourceData\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"A20:F35\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"D21:D35\").numberFormat = \"$#,##0.00\"\n\n        // config pivot table's fields\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.RowField\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n        val field_Country = pivottable.pivotFields[\"Country\"]\n        field_Country.orientation = PivotFieldOrientation.ColumnField\n\n        // Set row axis layout to tabular\n        pivottable.setRowAxisLayout(LayoutRowType.TabularRow)\n        worksheet.getRange(\"A:J\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.MultipleDataFields": "\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"G1:L16\").value = sourceData\n        worksheet.getRange(\"G:L\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"G1:L16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"J1:J16\").numberFormat = \"$#,##0.00\"\n\n        //config pivot table's fields\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.RowField\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n\n        // add multiple data fields from one field.\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        val sumDataField = pivottable.addDataField(field_Amount, \"sum amount\", ConsolidationFunction.Sum)\n        sumDataField.numberFormat = \"$#,##0.00\"\n        val field_Amount2 = pivottable.pivotFields[\"Amount\"]\n        pivottable.addDataField(field_Amount2, \"count amount\", ConsolidationFunction.Count)\n        worksheet.getRange(\"A:C\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.ChangeDataFieldSummarizeFunction": "\n\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"G1:L16\").value = sourceData\n        worksheet.getRange(\"G:L\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"G1:L16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"J1:J16\").numberFormat = \"$#,##0.00\"\n\n        //config pivot table's fields\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.ColumnField\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n        val field_Country = pivottable.pivotFields[\"Country\"]\n        field_Country.orientation = PivotFieldOrientation.PageField\n\n        //Change data field's summarize function.\n        field_Amount.function = ConsolidationFunction.Average\n        worksheet.getRange(\"A:D\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.SetBuiltinStyle": "\n\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"J1:O16\").value = sourceData\n        worksheet.getRange(\"J:O\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"J1:O16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"L1:L16\").numberFormat = \"$#,##0.00\"\n\n        // config pivot table's fields\n        val field_Date = pivottable.pivotFields[\"Date\"]\n        field_Date.orientation = PivotFieldOrientation.PageField\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.RowField\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n        val field_Country = pivottable.pivotFields[\"Country\"]\n        field_Country.orientation = PivotFieldOrientation.ColumnField\n\n        // Set pivot style\n        pivottable.tableStyle = \"PivotStyleMedium28\"\n        worksheet.getRange(\"A:I\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.ModifySubtotalsForPivotField": "\n\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"G1:L16\").value = sourceData\n        worksheet.getRange(\"G:L\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"G1:L16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"J1:J16\").numberFormat = \"$#,##0.00\"\n\n        //config pivot table's fields\n        val field_Category = pivottable.pivotFields[2]\n        field_Category.orientation = PivotFieldOrientation.RowField\n        val field_Product = pivottable.pivotFields[1]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[3]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n\n        //modify subtotals for pivot field.\n        field_Category.subtotals = EnumSet.of(SubtotalType.Sum, SubtotalType.Count, SubtotalType.Average, SubtotalType.Max,\n                SubtotalType.Min, SubtotalType.CountNums, SubtotalType.StdDev,\n                SubtotalType.StdDevP, SubtotalType.Var, SubtotalType.VarP)\n        worksheet.getRange(\"A:B\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.RefreshPivotTable": "\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"G1:L16\").value = sourceData\n        worksheet.getRange(\"G:L\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"G1:L16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"J1:J16\").numberFormat = \"$#,##0.00\"\n\n        //config pivot table's fields\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[3]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n\n        //change pivot cache's source data.\n        worksheet.getRange(\"J8\").value = 3000\n\n        //sync cache's data to pivot table.\n        worksheet.pivotTables[0].refresh()\n        worksheet.getRange(\"A:B\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.SetConditionalFormat": "\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"J1:O16\").value = sourceData\n        worksheet.getRange(\"J:O\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"J1:O16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"L1:L16\").numberFormat = \"$#,##0.00\"\n\n        //config pivot table's fields\n        val field_Date = pivottable.pivotFields[\"Date\"]\n        field_Date.orientation = PivotFieldOrientation.PageField\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.RowField\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n        val field_Country = pivottable.pivotFields[\"Country\"]\n        field_Country.orientation = PivotFieldOrientation.ColumnField\n\n        // set not to show grand totals\n        pivottable.rowGrand = false\n\n        // set condional format to the last row.\n        val rowCount = pivottable.dataBodyRange.rowCount\n        val averageCondition = pivottable.dataBodyRange.rows[rowCount - 1].formatConditions.addAboveAverage()\n        averageCondition.aboveBelow = AboveBelow.AboveAverage\n        averageCondition.interior.color = Color.GetTeal()\n        averageCondition.font.color = Color.GetWhite()\n\n        worksheet.getRange(\"A:H\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.GetDetailRange": "\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"J1:O16\").value = sourceData\n        worksheet.getRange(\"J:O\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"J1:O16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"L1:L16\").numberFormat = \"$#,##0.00\"\n\n        //config pivot table's fields\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.RowField\n        field_Category.layoutSubtotalLocation = SubtotalLocationType.Bottom\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Country = pivottable.pivotFields[\"Country\"]\n        field_Country.orientation = PivotFieldOrientation.ColumnField\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n\n        // Get detail range and set style.\n        for (item in pivottable.pivotRowAxis.pivotLines) {\n            if (item.lineType == PivotLineType.Subtotal) {\n                item.pivotLineCells[0].range.interior.color = Color.GetTeal()\n                item.pivotLineCells[0].range.font.color = Color.GetWhite()\n            }\n        }\n        worksheet.getRange(\"A:I\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.SetStyle": "\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"A20:F35\").value = sourceData\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"A20:F35\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"D21:D35\").numberFormat = \"$#,##0.00\"\n\n        //set pivot table report layout as Tabular\n        pivottable.setRowAxisLayout(LayoutRowType.TabularRow)\n\n        //config pivot table's fields\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.RowField\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        val field_Country = pivottable.pivotFields[\"Country\"]\n        field_Country.orientation = PivotFieldOrientation.ColumnField\n\n        // find rows which contains \"Mobile\"\n        var rowStart = Int.MAX_VALUE\n        var rowCount = 0\n        for (row in pivottable.pivotRowAxis.pivotLines) {\n            if (row.pivotLineCells[0].pivotItem != null && row.pivotLineCells[0].pivotItem.name == \"Mobile\") {\n                if (rowStart > row.position) {\n                    rowStart = row.position\n                }\n                rowCount++\n            }\n        }\n\n        // iterate all pivot lines in PivotColumnAxis\n        for (item in pivottable.pivotColumnAxis.pivotLines) {\n            // find lines which pivot item is \"Germany\"\n            if (item.lineType == PivotLineType.Regular && item.pivotLineCells[0].pivotItem.name == \"Germany\") {\n                val row = pivottable.dataBodyRange.row + rowStart\n                val column = pivottable.dataBodyRange.column + item.position\n                // Set style for range of German mobile.\n                worksheet.getRange(row, column, rowCount, 1).interior.color = Color.GetTeal()\n                worksheet.getRange(row, column, rowCount, 1).font.color = Color.GetWhite()\n            }\n        }\n        worksheet.getRange(\"A:J\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.SetNumberFormatForField": "\n\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"G1:L16\").value = sourceData\n        worksheet.getRange(\"G:L\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"G1:L16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"J1:J16\").numberFormat = \"$#,##0.00\"\n\n        //config pivot table's fields\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.ColumnField\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        val field_Country = pivottable.pivotFields[\"Country\"]\n        field_Country.orientation = PivotFieldOrientation.PageField\n\n        // Set number format for amount field\n        field_Amount.numberFormat = \"$#,##0.00\"\n        worksheet.getRange(\"A:D\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.SetShowTableStyles": "\n\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"J1:O16\").value = sourceData\n        worksheet.getRange(\"J:O\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"J1:O16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"L1:L16\").numberFormat = \"$#,##0.00\"\n\n        // config pivot table's fields\n        val field_Date = pivottable.pivotFields[\"Date\"]\n        field_Date.orientation = PivotFieldOrientation.PageField\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.RowField\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n        val field_Country = pivottable.pivotFields[\"Country\"]\n        field_Country.orientation = PivotFieldOrientation.ColumnField\n\n        // Create pivot style \"test\"\n        val pivotStyle = workbook.tableStyles.add(\"test\")\n\n        // Set table style as pivot table style\n        pivotStyle.showAsAvailablePivotStyle = true\n        pivotStyle.tableStyleElements[TableStyleElementType.PageFieldLabels].interior.color = Color.GetLightBlue()\n        pivotStyle.tableStyleElements[TableStyleElementType.PageFieldValues].interior.color = Color.GetLightBlue()\n        pivotStyle.tableStyleElements[TableStyleElementType.GrandTotalColumn].interior.color = Color.GetLightGreen()\n        pivotStyle.tableStyleElements[TableStyleElementType.GrandTotalRow].interior.color = Color.GetLightGreen()\n        pivotStyle.tableStyleElements[TableStyleElementType.HeaderRow].interior.color = Color.GetCyan()\n        pivotStyle.tableStyleElements[TableStyleElementType.FirstColumn].interior.color = Color.GetTomato()\n        pivotStyle.tableStyleElements[TableStyleElementType.FirstRowStripe].interior.color = Color.GetYellow()\n        pivotStyle.tableStyleElements[TableStyleElementType.SecondRowStripe].interior.color = Color.GetLightYellow()\n\n        // Set pivot table style\n        pivottable.style = pivotStyle\n\n        // Set if some table style would be shown\n        pivottable.showTableStyleRowStripes = true\n        pivottable.showTableStyleColumnHeaders = true\n        pivottable.showTableStyleRowHeaders = false\n        pivottable.showTableStyleLastColumn = false\n        worksheet.getRange(\"A:I\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.Sort": "\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"G1:L16\").value = sourceData\n        worksheet.getRange(\"G:L\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"G1:L16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"J1:J16\").numberFormat = \"$#,##0.00\"\n\n        //config pivot table's fields\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.RowField\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Country = pivottable.pivotFields[\"Country\"]\n        field_Country.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n\n        // sort the product items.\n        field_Product.autoSort(SortOrder.Descending)\n        worksheet.getRange(\"A:B\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.FieldLayoutSettings": "\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"G1:L16\").value = sourceData\n        worksheet.getRange(\"G:L\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"G1:L16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"J1:J16\").numberFormat = \"$#,##0.00\"\n\n        //config pivot table's fields\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.RowField\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Country = pivottable.pivotFields[\"Country\"]\n        field_Country.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n\n        // tablular row\n        field_Category.layoutForm = LayoutFormType.Tabular\n        // insert blank row\n        field_Category.layoutBlankLine = true\n\n        // outline row\n        field_Country.layoutForm = LayoutFormType.Outline\n        field_Country.layoutCompactRow = false\n        // show subtotallocation on bottom\n        field_Country.layoutSubtotalLocation = SubtotalLocationType.Bottom\n        worksheet.getRange(\"A:C\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.DeferLayoutUpdate": "\n\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"G1:L16\").value = sourceData\n        worksheet.getRange(\"G:L\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"G1:L16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"J1:J16\").numberFormat = \"$#,##0.00\"\n\n        // defer layout update\n        pivottable.deferLayoutUpdate = true\n\n        //config pivot table's fields\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.ColumnField\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n\n        // update the pivottable.\n        pivottable.update()\n\n        worksheet.getRange(\"A:D\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.FilterItemsInPivotTable": "\n\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"G1:L16\").value = sourceData\n        worksheet.getRange(\"G:L\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"G1:L16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"J1:J16\").numberFormat = \"$#,##0.00\"\n\n        //config pivot table's fields\n        val field_Product = pivottable.pivotFields[1]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[3]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n        val field_Country = pivottable.pivotFields[5]\n        field_Country.orientation = PivotFieldOrientation.PageField\n\n        //row field filter.\n        field_Product.pivotItems[\"Bose 785593-0050\"].visible = false\n        field_Product.pivotItems[\"Haier 394L 4Star\"].visible = false\n        field_Product.pivotItems[\"Iphone XR\"].visible = false\n\n        //page filter.\n        field_Country.pivotItems[\"United States\"].visible = false\n        field_Country.pivotItems[\"Canada\"].visible = false\n        worksheet.getRange(\"A:B\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.pivottable.HideGrandTotalsInPivotTable": "\n\n        val sourceData: Any = arrayOf(\n                arrayOf<Any>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"),\n                arrayOf<Any>(1, \"Bose 785593-0050\", \"Consumer Electronics\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"),\n                arrayOf<Any>(2, \"Canon EOS 1500D\", \"Consumer Electronics\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"),\n                arrayOf<Any>(3, \"Haier 394L 4Star\", \"Consumer Electronics\", 617, GregorianCalendar(2018, 0, 8), \"United States\"),\n                arrayOf<Any>(4, \"IFB 6.5 Kg FullyAuto\", \"Consumer Electronics\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"),\n                arrayOf<Any>(5, \"Mi LED 40inch\", \"Consumer Electronics\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"),\n                arrayOf<Any>(6, \"Sennheiser HD 4.40-BT\", \"Consumer Electronics\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"),\n                arrayOf<Any>(7, \"Iphone XR\", \"Mobile\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"),\n                arrayOf<Any>(8, \"OnePlus 7Pro\", \"Mobile\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"),\n                arrayOf<Any>(9, \"Redmi 7\", \"Mobile\", 2417, GregorianCalendar(2018, 0, 16), \"France\"),\n                arrayOf<Any>(10, \"Samsung S9\", \"Mobile\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"),\n                arrayOf<Any>(11, \"OnePlus 7Pro\", \"Mobile\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"),\n                arrayOf<Any>(12, \"Redmi 7\", \"Mobile\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"),\n                arrayOf<Any>(13, \"Bose 785593-0050\", \"Consumer Electronics\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"),\n                arrayOf<Any>(14, \"Canon EOS 1500D\", \"Consumer Electronics\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"),\n                arrayOf<Any>(15, \"Haier 394L 4Star\", \"Consumer Electronics\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets[0]\n        worksheet.getRange(\"G1:L16\").value = sourceData\n        worksheet.getRange(\"G:L\").columnWidth = 15.0\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"G1:L16\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"J1:J16\").numberFormat = \"$#,##0.00\"\n\n        // config pivot table's fields\n        val field_Category = pivottable.pivotFields[\"Category\"]\n        field_Category.orientation = PivotFieldOrientation.ColumnField\n        val field_Product = pivottable.pivotFields[\"Product\"]\n        field_Product.orientation = PivotFieldOrientation.RowField\n        val field_Amount = pivottable.pivotFields[\"Amount\"]\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n        val field_Country = pivottable.pivotFields[\"Country\"]\n        field_Country.orientation = PivotFieldOrientation.PageField\n\n        // Hide all grand totals\n        pivottable.columnGrand = false\n        pivottable.rowGrand = false\n        worksheet.getRange(\"A:C\").entireColumn.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.SetJava8DateValue": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val a1 = worksheet.getRange(\"A1\")\n\n        //Java 8 introduces a new package java.time which contains lots of new date/time types and sub-packages to support JSR310.\n        //GcExcel can handle these new types when working with Java 8 or upper.\n        a1.value = java.time.LocalDateTime.now()\n        val java8Date = a1.value as java.time.LocalDateTime\n\n        a1.numberFormat = \"m/d/yyyy h:mm\"\n        a1.columnWidth = 20.0\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.GetWorksheetUsedRange": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"H6:M7\").value = 1\n        worksheet.getRange(\"J9:J10\").merge()\n\n        // set interior color for worksheet usedRange \"H6:M10\".\n        val usedrange = worksheet.usedRange\n        usedrange.interior.color = Color.GetLightBlue()\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.CellInfo": "\n        val worksheet = workbook.getWorksheets().get(0)\n\n        // cell's value B2\n        val cell = com.grapecity.documents.excel.CellInfo.CellIndexToName(1, 1)\n        worksheet.getRange(cell).getInterior().setColor(Color.GetLightBlue())\n\n        // rowIndex is 3 and columnIndex is 2\n        val index = com.grapecity.documents.excel.CellInfo.CellNameToIndex(\"C4\")\n        var rowIndex = index[0]\n        var columnIndex = index[1]\n        worksheet.getRange(rowIndex, columnIndex).getInterior().setColor(Color.GetLightCoral())\n\n        // column is D\n        val column = com.grapecity.documents.excel.CellInfo.ColumnIndexToName(3)\n        worksheet.getRange(String.format(\"%s:%s\", column, column)).getInterior().setColor(Color.GetLightGreen())\n\n        // columnIndex is 4\n        columnIndex = com.grapecity.documents.excel.CellInfo.ColumnNameToIndex(\"E\")\n        worksheet.getColumns().get(columnIndex).getInterior().setColor(Color.GetLightSalmon())\n\n        // row is 3\n        val row = com.grapecity.documents.excel.CellInfo.RowIndexToName(2)\n        worksheet.getRange(String.format(\"%s:%s\", row, row)).getInterior().setColor(Color.GetLightSteelBlue())\n\n        // rowIndex is 4\n        rowIndex = com.grapecity.documents.excel.CellInfo.RowNameToIndex(\"5\")\n        worksheet.getRows().get(rowIndex).getInterior().setColor(Color.GetLightSkyBlue())\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.CopyPasteOptions": "\n        val worksheet = workbook.worksheets.get(0)\n\n        //Set data of PC\n        worksheet.getRange(\"A2\").value = \"PC\"\n        worksheet.getRange(\"A4:C4\").value = arrayOf(\"Device\", \"Quantity\", \"Unit Price\")\n        worksheet.getRange(\"A5:C10\").value = arrayOf(arrayOf(\"T540p\", 12, 9850), arrayOf(\"T570\", 5, 7460), arrayOf(\"Y460\", 6, 5400), arrayOf(\"Y460F\", 8, 6240))\n\n        //Set style\n        worksheet.getRange(\"A2\").rowHeight = 30.0\n        worksheet.getRange(\"A2\").font.size = 20.0\n        worksheet.getRange(\"A2\").font.bold = true\n        worksheet.getRange(\"A4:C4\").font.bold = true\n        worksheet.getRange(\"A4:C4\").font.color = Color.GetWhite()\n        worksheet.getRange(\"A4:C4\").interior.color = Color.GetLightBlue()\n        worksheet.getRange(\"A5:C10\").borders.get(BordersIndex.InsideHorizontal).color = Color.GetOrange()\n        worksheet.getRange(\"A5:C10\").borders.get(BordersIndex.InsideHorizontal).lineStyle = BorderLineStyle.DashDot\n\n        //Copy only style and row height\n        worksheet.getRange(\"H1\").value = \"Copy style and row height from previous cells.\"\n        worksheet.getRange(\"H1\").font.color = Color.GetRed()\n        worksheet.getRange(\"H1\").font.bold = true\n        worksheet.getRange(\"A2:C10\").copy(worksheet.getRange(\"H2\"), EnumSet.of(PasteType.Formats))\n\n        //Set data of mobile devices\n        worksheet.getRange(\"H2\").value = \"Mobile\"\n        worksheet.getRange(\"H4:J4\").value = arrayOf(\"Device\", \"Quantity\", \"Unit Price\")\n        worksheet.getRange(\"H5:J10\").value = arrayOf(arrayOf(\"HW-P30\", 20, 4200), arrayOf(\"IPhone-X\", 5, 9888), arrayOf(\"IPhone-6s plus\", 15, 6880))\n\n        //Add new sheet\n        val worksheet2 = workbook.worksheets.add()\n\n        //Copy only style to new sheet\n        worksheet.getRange(\"A2:C10\").copy(worksheet2.getRange(\"A2\"), EnumSet.of(PasteType.Formats))\n        worksheet2.getRange(\"A3\").value = \"Copy style from sheet1.\"\n        worksheet2.getRange(\"A3\").font.color = Color.GetRed()\n        worksheet2.getRange(\"A3\").font.bold = true\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.AccessRange": "\n        val worksheet = workbook.worksheets.get(0)\n\n        //use index to access cell A1.\n        worksheet.getRange(0, 0).interior.color = Color.GetLightGreen()\n\n        //use index to access range A1:B2\n        worksheet.getRange(0, 0, 2, 2).value = 5\n\n        //use string to access range.\n        worksheet.getRange(\"A2\").interior.color = Color.GetLightYellow()\n        worksheet.getRange(\"C3:D4\").interior.color = Color.GetTomato()\n        worksheet.getRange(\"A5:B7, C3, H5:N6\").value = 2\n\n        //use index to access rows\n        worksheet.rows.get(2).interior.color = Color.GetLightSalmon()\n\n        //use string to access rows\n        worksheet.getRange(\"4:4\").interior.color = Color.GetLightSkyBlue()\n\n        //use index to access columns\n        worksheet.columns.get(2).interior.color = Color.GetLightSalmon()\n\n        //use string to access columns\n        worksheet.getRange(\"D:D\").interior.color = Color.GetLightSkyBlue()\n\n        //use Cells to access range.\n        worksheet.cells.get(5).interior.color = Color.GetLightBlue()\n        worksheet.cells.get(5, 5).interior.color = Color.GetLightYellow()\n\n        //access all rows in worksheet\n        val allRows = worksheet.rows.toString()\n\n        //access all columns in worksheet\n        val allColumns = worksheet.columns.toString()\n\n        //access the entire sheet range\n        val entireSheet = worksheet.cells.toString()\n\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.GetRangeRowCountColumnCount": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val range = worksheet.getRange(\"A5:B7\")\n\n        // cell count is 6.\n        val cellcount = range.count\n        // cell count is 6.\n        val cellcount1 = range.cells.count\n        // row count is 3.\n        val rowcount = range.rows.count\n        // column count is 2.\n        val columncount = range.columns.count\n\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.InsertCellsDeleteCells": "\n\n        val worksheet1 = workbook.worksheets.get(0)\n        val worksheet2 = workbook.worksheets.add()\n\n        val data = arrayOf(arrayOf<Any?>(1, 2, 3), arrayOf<Any?>(4, 5, 6), arrayOf<Any?>(7, 8, 9))\n\n        worksheet1.getRange(\"A1:C3\").value = data\n        worksheet2.getRange(\"A1:C3\").value = data\n\n        //Insert cells\n        worksheet1.getRange(\"A2\").insert()//Auto\n        worksheet1.getRange(\"B2\").insert(InsertShiftDirection.Down)\n        worksheet1.getRange(\"C2\").insert(InsertShiftDirection.Right)\n\n        //Delete cells\n        worksheet2.getRange(\"A2\").delete()//Auto\n        worksheet2.getRange(\"B2\").delete(DeleteShiftDirection.Left)\n        worksheet2.getRange(\"C2\").delete(DeleteShiftDirection.Up)\n\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.InsertDeleteRowsColumns": "\n\n        val worksheet1 = workbook.worksheets.get(0)\n        val worksheet2 = workbook.worksheets.add()\n\n        val data = arrayOf(arrayOf<Any?>(1, 2, 3), arrayOf<Any?>(4, 5, 6), arrayOf<Any?>(7, 8, 9))\n\n        worksheet1.getRange(\"A1:C3\").value = data\n        worksheet2.getRange(\"A1:C3\").value = data\n\n        //Insert rows\n        worksheet1.getRange(\"A2:B2\").entireRow.insert()\n        worksheet1.getRange(\"3:5\").insert()\n\n        //Insert columns\n        worksheet1.getRange(\"B3:B5\").entireColumn.insert()\n        worksheet1.getRange(\"A:A\").insert()\n\n        //Delete rows\n        worksheet2.getRange(\"A3:A5\").entireRow.delete()\n        worksheet2.getRange(\"2:4\").delete()\n\n        //Delete columns\n        worksheet2.getRange(\"B3:B5\").entireColumn.delete()\n        worksheet2.getRange(\"A:A\").delete()\n\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.SetRowHeightColumnWidth": "\n        val worksheet = workbook.worksheets.get(0)\n\n        //set row height for row 1:2.\n        worksheet.getRange(\"1:2\").rowHeight = 50.0\n\n        //set column width for column C:D.\n        worksheet.getRange(\"C:D\").columnWidth = 20.0\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.SetRangeValue": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        //set two-dimension array value to range A1:F7\n        worksheet.getRange(\"A1:F7\").value = data\n\n        //return a two-dimension array when get range A1:B7's value.\n        val result = worksheet.getRange(\"A1:B7\").value\n\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.CutCopyRange": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val worksheet2 = workbook.worksheets.add()\n\n        worksheet.getRange(\"B3:D12\").value = 5\n        worksheet.getRange(\"B3:D12\").interior.color = Color.GetLightGreen()\n\n        //Copy\n        worksheet.getRange(\"B3:D12\").copy(worksheet.getRange(\"E5\"))\n\n        //Cut\n        worksheet.getRange(\"B3:D12\").cut(worksheet.getRange(\"I5:K14\"))\n\n        worksheet.getRange(\"I1:K2\").value = 2\n        worksheet.getRange(\"I1:K2\").interior.color = Color.GetPink()\n\n        //cross sheet cut copy.\n        worksheet.getRange(\"I1:K2\").cut(worksheet2.getRange(\"H5\"))\n        worksheet.getRange(\"G4:H5\").copy(worksheet2.getRange(\"A1\"))\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.AccessEachAreaOfRange": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        // set interior color for area1 A5:B7.\n        val area1 = worksheet.getRange(\"A5:B7, C3, H5:N6\").areas.getArea(0)\n        area1.interior.color = Color.GetPink()\n\n        // set interior color for area2 C3.\n        val area2 = worksheet.getRange(\"A5:B7, C3, H5:N6\").areas.getArea(1)\n        area2.interior.color = Color.GetLightGreen()\n\n        // set interior color for area3 H5:N6.\n        val area3 = worksheet.getRange(\"A5:B7, C3, H5:N6\").areas.getArea(2)\n        area3.interior.color = Color.GetLightBlue()\n\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.CutCopyRangeBetweenWorkbooks": "\n        //Load template file Home inventory.xlsx from resource\n        val source_workbook = Workbook()\n        val source_fileStream = this.getResourceStream(\"xlsx/Home inventory.xlsx\")\n        source_workbook.open(source_fileStream!!)\n\n        //Hide gridline\n        workbook.activeSheet.sheetView.displayGridlines = false\n\n        workbook.activeSheet.getRange(\"A1\").value = \"Copy content from the first sheet of source workbook\"\n        workbook.activeSheet.getRange(\"A1\").font.color = Color.GetRed()\n        workbook.activeSheet.getRange(\"A1\").font.bold = true\n\n        //Copy content of active sheet from source workbook to the current sheet at A2\n        source_workbook.activeSheet.getUsedRange(EnumSet.allOf(UsedRangeType::class.java)).copy(workbook.activeSheet.getRange(\"A2\"),\n                EnumSet.of(PasteType.Formulas, PasteType.Formats, PasteType.RowHeights, PasteType.ColumnWidths))\n\n        workbook.activeSheet.getRange(\"C21\").value = \"Cut content from the second sheet of source workbook\"\n        workbook.activeSheet.getRange(\"C21\").font.color = Color.GetRed()\n        workbook.activeSheet.getRange(\"C21\").font.bold = true\n\n        //Cut content of second sheet from source workbook to the current sheet at C22\n        source_workbook.worksheets.get(1).getRange(\"2:15\").cut(workbook.activeSheet.getRange(\"C22\"))\n\n        //Make the theme of two workbooks same\n        workbook.theme = source_workbook.theme\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.HiddenRowColumn": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"E1\").value = 1\n\n        //Hidden row 2:6.\n        worksheet.getRange(\"2:6\").hidden = true\n\n        //Hidden column A:D.\n        worksheet.getRange(\"A:D\").hidden = true\n\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.AccessCellsRowsColumns": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val range = worksheet.getRange(\"A5:B7\")\n\n        //set value for cell A7.\n        range.cells.get(4).value = \"A7\"\n\n        //cell is B6\n        range.cells.get(1, 1).value = \"B6\"\n\n        //row count is 3 and range is A6:B6.\n        val rowCount = range.rows.count\n        val row = range.rows.get(1).toString()\n\n        //set interior color for row range A6:B6.\n        range.rows.get(1).interior.color = Color.GetLightBlue()\n\n        //column count is 2 and range is B5:B7.\n        val columnCount = range.columns.count\n        val column = range.columns.get(1).toString()\n\n        //set values for column range B5:B7.\n        range.columns.get(1).interior.color = Color.GetLightSkyBlue()\n\n        //entire rows are from row 5 to row 7\n        val entirerow = range.entireRow.toString()\n\n        //entire columns are from column A to column B\n        val entireColumn = range.entireColumn.toString()\n\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.GetRangeBoundary": "\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/Sport sign-up sheet.xlsx\")\n        workbook.open(fileStream)\n\n        val worksheet = workbook.getWorksheets().get(0)\n\n        // Get the absolute location and size of the Range[\"G1\"] in the worksheet.\n        val range = worksheet.getRange(\"G1\")\n        val rect = com.grapecity.documents.excel.CellInfo.GetRangeBoundary(range)\n        // Add the image to the Range[\"G1\"]\n        val stream = this.getResourceStream(\"logo.png\")\n        try {\n            worksheet.getShapes().addPictureInPixel(stream, ImageType.PNG, rect.getX(), rect.getY(), rect.getWidth(), rect.getHeight())\n        } catch (e: IOException) {\n            // TODO Auto-generated catch block\n            e.printStackTrace()\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.GetFeatureRelatedUsedRange": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A1:B2\").value = arrayOf(arrayOf<Any?>(1, 2), arrayOf<Any?>(\"aaa\", \"bbb\"))\n        worksheet.getRange(\"A2:C3\").interior.color = Color.GetGreen()\n\n        //style used range is A2:C3.\n        val usedRange_style = worksheet.getUsedRange(EnumSet.of(UsedRangeType.Style))\n        usedRange_style.interior.color = Color.GetLightBlue()\n\n    ",
  "com.grapecity.documents.excel.examples.features.rangeoperations.MergeCells": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //A1:C4 is a single merged cell.\n        worksheet.getRange(\"A1:C4\").merge()\n        //H5:J5 is a single merged cell.\n        //H6:J6 is a single merged cell.\n        worksheet.getRange(\"H5:J6\").merge(true)\n\n        //select A1:H5's entire merge area A1:J5, entire merge area is a bounding rectangle.\n        val entireMergeArea = worksheet.getRange(\"A1:H5\").entireMergeArea\n        entireMergeArea.select()\n\n        //judge if H5 is a merged cell.\n        if (worksheet.getRange(\"J5\").mergeCells) {\n            //set value to the top left cell of the merge area.\n            worksheet.getRange(\"J5\").entireMergeArea.get(0, 0).value = 1\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.databinding.CellBinding": "\n        //#region Define custom classes\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n\n        //#region Init data\n        val record = SalesRecord()\n        record.area = \"North America\"\n        record.city = \"Chicago\"\n        record.category = \"Consumer Electronics\"\n        record.name = \"Bose 785593-0050\"\n        record.revenue = 92800.0\n        //#endregion\n\n        val worksheet = workbook.getWorksheets().get(0)\n\n        // Set binding path for cell.\n        worksheet.getRange(\"A1\").setBindingPath(\"area\")\n        worksheet.getRange(\"B2\").setBindingPath(\"city\")\n        worksheet.getRange(\"C2\").setBindingPath(\"name\")\n        worksheet.getRange(\"D3\").setBindingPath(\"revenue\")\n\n        // Set data source.\n        worksheet.setDataSource(record)\n    ",
  "com.grapecity.documents.excel.examples.features.databinding.sheetbinding.BindManually": "\n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n\n        val datasource = SalesData()\n        datasource.sales = ArrayList<SalesRecord>()\n\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.sales!!.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.sales!!.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.sales!!.add(record3)\n        //#endregion\n\n        val worksheet = workbook.getWorksheets().get(0)\n\n        // Set AutoGenerateColumns as false\n        worksheet.setAutoGenerateColumns(false)\n\n        // Bind columns manually.\n        worksheet.getRange(\"A:A\").getEntireColumn().setBindingPath(\"area\")\n        worksheet.getRange(\"B:B\").getEntireColumn().setBindingPath(\"city\")\n        worksheet.getRange(\"C:C\").getEntireColumn().setBindingPath(\"category\")\n        worksheet.getRange(\"D:D\").getEntireColumn().setBindingPath(\"name\")\n\n        // Set data source\n        worksheet.setDataSource(datasource.sales)\n    ",
  "com.grapecity.documents.excel.examples.features.databinding.sheetbinding.BindAutomatically": "\n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n\n        val datasource = SalesData()\n        datasource.sales = ArrayList<SalesRecord>()\n\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.sales!!.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.sales!!.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.sales!!.add(record3)\n        //#endregion\n\n        val worksheet = workbook.getWorksheets().get(0)\n\n        // Data source would be bound to columns automatically.\n        worksheet.setDataSource(datasource.sales)\n    ",
  "com.grapecity.documents.excel.examples.features.databinding.sheetbinding.BindResultSet": "\n        //Here in the demo, we use a mock class to generate instance of java.sql.ResultSet.\n        //User who use data binding in product, must get instance of java.sql.ResultSet from the\n        //related database connection.\n        val datasource = GcMockResultSet(this.getResourceStream(\"score.csv\"))\n\n        val worksheet = workbook.getWorksheets().get(0)\n\n        // Set AutoGenerateColumns as false\n        worksheet.setAutoGenerateColumns(false)\n\n        // Bind columns manually.\n        worksheet.getRange(\"A:A\").getEntireColumn().setBindingPath(\"ID\")\n        worksheet.getRange(\"B:B\").getEntireColumn().setBindingPath(\"Name\")\n        worksheet.getRange(\"C:C\").getEntireColumn().setBindingPath(\"Score\")\n        worksheet.getRange(\"D:D\").getEntireColumn().setBindingPath(\"Team\")\n\n        // Set data source\n        worksheet.setDataSource(datasource)\n    ",
  "com.grapecity.documents.excel.examples.features.databinding.tablebinding.BindCustomObject": "\n        //#region Define custom classes\n        //class SalesData {\n        //\tvar sales: ArrayList<SalesRecord>? = null\n        //}\n\n        //class SalesRecord {\n        //\tvar area: String? = null\n        //\tvar city: String? = null\n        //\tvar category: String? = null\n        //\tvar name: String? = null\n        //\tvar revenue: Double = 0.toDouble()\n        //}\n        //#endregion\n\n        val datasource = SalesData()\n        datasource.sales = ArrayList<SalesRecord>()\n\n        //#region Init Data\n        val record1 = SalesRecord()\n        record1.area = \"North America\"\n        record1.city = \"Chicago\"\n        record1.category = \"Consumer Electronics\"\n        record1.name = \"Bose 785593-0050\"\n        record1.revenue = 92800.0\n        datasource.sales!!.add(record1)\n        val record2 = SalesRecord()\n        record2.area = \"North America\"\n        record2.city = \"New York\"\n        record2.category = \"Consumer Electronics\"\n        record2.name = \"Bose 785593-0050\"\n        record2.revenue = 92800.0\n        datasource.sales!!.add(record2)\n        val record3 = SalesRecord()\n        record3.area = \"South America\"\n        record3.city = \"Santiago\"\n        record3.category = \"Consumer Electronics\"\n        record3.name = \"Bose 785593-0050\"\n        record3.revenue = 19550.0\n        datasource.sales!!.add(record3)\n        //#endregion\n\n        val worksheet = workbook.getWorksheets().get(0)\n\n        // Add a table\n        val table = worksheet.getTables().add(worksheet.getRange(\"B2:F5\"), true)\n\n        // Set not to auto generate table columns\n        table.setAutoGenerateColumns(false)\n\n        // Set table binding path\n        table.setBindingPath(\"sales\")\n\n        // Set table column data field\n        table.getColumns().get(0).setDataField(\"area\")\n        table.getColumns().get(1).setDataField(\"city\")\n        table.getColumns().get(2).setDataField(\"category\")\n        table.getColumns().get(3).setDataField(\"name\")\n        table.getColumns().get(4).setDataField(\"revenue\")\n\n        //Set custom object as data source\n        worksheet.setDataSource(datasource)\n    ",
  "com.grapecity.documents.excel.examples.features.sorting.SortRangeByIcon": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        val iconset = worksheet.getRange(\"F2:F7\").formatConditions.addIconSetCondition()\n        iconset.iconSet = workbook.iconSets.get(IconSetType.Icon3TrafficLights1)\n\n        //green traffic light will in the top.\n        worksheet.sort.sortFields.add(IconSortField(worksheet.getRange(\"F2:F7\"), workbook.iconSets.get(IconSetType.Icon3TrafficLights1).get(2), SortOrder.Ascending))\n        worksheet.sort.range = worksheet.getRange(\"A2:F7\")\n        worksheet.sort.orientation = SortOrientation.Columns\n        worksheet.sort.apply()\n\n    ",
  "com.grapecity.documents.excel.examples.features.sorting.SortRangeByInterior": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        worksheet.getRange(\"F2\").interior.color = Color.GetLightPink()\n        worksheet.getRange(\"F3\").interior.color = Color.GetLightGreen()\n        worksheet.getRange(\"F4\").interior.color = Color.GetLightPink()\n        worksheet.getRange(\"F5\").interior.color = Color.GetLightGreen()\n        worksheet.getRange(\"F6\").interior.color = Color.GetLightBlue()\n        worksheet.getRange(\"F7\").interior.color = Color.GetLightPink()\n\n        //\"F4\" will in the top.\n        worksheet.sort.sortFields.add(CellColorSortField(worksheet.getRange(\"F2:F7\"), worksheet.getRange(\"F4\").displayFormat.interior, SortOrder.Ascending))\n        worksheet.sort.range = worksheet.getRange(\"A2:F7\")\n        worksheet.sort.orientation = SortOrientation.Columns\n        worksheet.sort.apply()\n\n    ",
  "com.grapecity.documents.excel.examples.features.sorting.SortRangeByFontColor": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        worksheet.getRange(\"F2\").font.color = Color.GetRed()\n        worksheet.getRange(\"F3\").font.color = Color.GetGainsboro()\n        worksheet.getRange(\"F4\").font.color = Color.GetGreen()\n        worksheet.getRange(\"F5\").font.color = Color.GetGainsboro()\n        worksheet.getRange(\"F6\").font.color = Color.GetGainsboro()\n        worksheet.getRange(\"F7\").font.color = Color.GetGainsboro()\n\n        //The font colors which are same to \"F7\" cell's color will in the top.\n        worksheet.sort.sortFields.add(FontColorSortField(worksheet.getRange(\"F2:F7\"), worksheet.getRange(\"F7\").font.color, SortOrder.Ascending))\n        worksheet.sort.range = worksheet.getRange(\"A2:F7\")\n        worksheet.sort.orientation = SortOrientation.Columns\n        worksheet.sort.apply()\n\n    ",
  "com.grapecity.documents.excel.examples.features.sorting.CustomSort": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        //give a custom sort values string. \"Angela\" and \"Damon\" should be the top1 and top2.\n        val sortkey = ValueSortField(worksheet.getRange(\"A2:A7\"), \"\\\"Angela\\\", \\\"Damon\\\"\")\n        worksheet.getRange(\"A2:F7\").sort(SortOrientation.Columns, false, sortkey)\n\n    ",
  "com.grapecity.documents.excel.examples.features.sorting.SortRangeByValue": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        //Sort by column F, ascending.\n        worksheet.getRange(\"A2:F7\").sort(worksheet.getRange(\"F2:F7\"), SortOrder.Ascending, SortOrientation.Columns)\n\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.GetDisplayFormat": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //Range A1's displaying color is table style\n        worksheet.tables.add(worksheet.getRange(\"A1:E5\"), true)\n        val color_A1 = worksheet.getRange(\"A1\").displayFormat.interior.color\n\n        //Range A1's displaying color will be cell style, yellow.\n        worksheet.getRange(\"A1\").interior.color = Color.GetYellow()\n        val color_A1_1 = worksheet.getRange(\"A1\").displayFormat.interior.color\n\n        //Range A1's displaying color will be conditional format style, green.\n        val condition = worksheet.getRange(\"A1\").formatConditions.add(FormatConditionType.NoBlanksCondition) as IFormatCondition\n        condition.interior.color = Color.GetGreen()\n        val color_A1_2 = worksheet.getRange(\"A1\").displayFormat.interior.color\n\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.ApplyStyle": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        // Change to build in name style.\n        worksheet.getRange(\"A1\").value = \"Bad\"\n        worksheet.getRange(\"A1\").style = workbook.styles.get(\"Bad\")\n\n        // Change to custom name style.\n        // Add custom name style.\n        val style = workbook.styles.add(\"testStyle\")\n\n        // Config custom name style settings begin.\n        // Border\n        style.borders.get(BordersIndex.EdgeLeft).lineStyle = BorderLineStyle.Thin\n        style.borders.get(BordersIndex.EdgeTop).lineStyle = BorderLineStyle.Thick\n        style.borders.get(BordersIndex.EdgeRight).lineStyle = BorderLineStyle.Double\n        style.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Double\n        style.borders.color = Color.FromArgb(0, 255, 0)\n\n        // Font\n        style.font.themeColor = ThemeColor.Accent1\n        style.font.tintAndShade = 0.8\n        style.font.italic = true\n        style.font.bold = true\n        style.font.name = \"LiSu\"\n        style.font.size = 28.0\n        style.font.strikethrough = true\n        style.font.subscript = true\n        style.font.superscript = false\n        style.font.underline = UnderlineType.Double\n\n        // Protection\n        style.formulaHidden = true\n        style.locked = false\n\n        // Number\n        style.numberFormat = \"#,##0_);[Red](#,##0)\"\n\n        // Alignment\n        style.horizontalAlignment = HorizontalAlignment.Right\n        style.verticalAlignment = VerticalAlignment.Bottom\n        style.wrapText = true\n        style.indentLevel = 5\n        style.orientation = 45\n\n        // Fill\n        style.interior.colorIndex = 5\n        style.interior.pattern = Pattern.Down\n        style.interior.patternColor = Color.FromArgb(0, 0, 255)\n\n        style.includeAlignment = false\n        style.includeBorder = true\n        style.includeFont = false\n        style.includeNumber = true\n        style.includePatterns = false\n        style.includeProtection = true\n        // Config custom name style settings end.\n\n        // Set range's style to custom name style.\n        worksheet.getRange(\"A2\").value = \"My test style\"\n        worksheet.getRange(\"A2\").style = worksheet.workbook.styles.get(\"testStyle\")\n        worksheet.getRange(\"A2\").columnWidth = 20.0\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.CreateStyleBaseOn": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1\").style = workbook.styles.get(\"Good\")\n        worksheet.getRange(\"A1\").value = \"Good\"\n\n        // Create and modify a style based on current existing style\n        val myGood = workbook.styles.add(\"MyGood\", workbook.styles.get(\"Good\"))\n        myGood.font.bold = true\n        myGood.font.italic = true\n\n        worksheet.getRange(\"B1\").style = workbook.styles.get(\"MyGood\")\n        worksheet.getRange(\"B1\").value = \"MyGood\"\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.CreateCustomStyle": "\n\n        val worksheet = workbook.worksheets.get(0)\n        // Add custom name style.\n        val style = workbook.styles.add(\"testStyle\")\n\n        // Config custom name style settings begin.\n        // Border\n        style.borders.get(BordersIndex.EdgeLeft).lineStyle = BorderLineStyle.Thin\n        style.borders.get(BordersIndex.EdgeTop).lineStyle = BorderLineStyle.Thick\n        style.borders.get(BordersIndex.EdgeRight).lineStyle = BorderLineStyle.Double\n        style.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Double\n        style.borders.color = Color.FromArgb(0, 255, 0)\n\n        // Font\n        style.font.themeColor = ThemeColor.Accent1\n        style.font.tintAndShade = 0.8\n        style.font.italic = true\n        style.font.bold = true\n        style.font.name = \"LiSu\"\n        style.font.size = 28.0\n        style.font.strikethrough = true\n        style.font.subscript = true\n        style.font.superscript = false\n        style.font.underline = UnderlineType.Double\n\n        // Protection\n        style.formulaHidden = true\n        style.locked = false\n\n        // Number\n        style.numberFormat = \"#,##0_);[Red](#,##0)\"\n\n        // Alignment\n        style.horizontalAlignment = HorizontalAlignment.Right\n        style.verticalAlignment = VerticalAlignment.Bottom\n        style.wrapText = true\n        style.indentLevel = 5\n        style.orientation = 45\n\n        // Fill\n        style.interior.colorIndex = 5\n        style.interior.pattern = Pattern.Down\n        style.interior.patternColor = Color.FromArgb(0, 0, 255)\n\n        style.includeAlignment = false\n        style.includeBorder = true\n        style.includeFont = false\n        style.includeNumber = true\n        style.includePatterns = false\n        style.includeProtection = true\n        // Config custom name style settings end.\n\n        // Set range's style to custom name style.\n        worksheet.getRange(\"A1\").value = \"My test style\"\n        worksheet.getRange(\"A1\").style = worksheet.workbook.styles.get(\"testStyle\")\n\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.fonts.FontStyle": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A1\").value = \"Bold\"\n        worksheet.getRange(\"A1\").font.bold = true\n\n        worksheet.getRange(\"A2\").value = \"Italic\"\n        worksheet.getRange(\"A2\").font.italic = true\n\n        worksheet.getRange(\"A3\").value = \"Bold Italic\"\n        worksheet.getRange(\"A3\").font.bold = true\n        worksheet.getRange(\"A3\").font.italic = true\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.fonts.FontSize": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A1\").value = \"Font size is 15\"\n        worksheet.getRange(\"A1\").font.size = 15.0\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.fonts.FontColor": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1\").value = \"font\"\n        worksheet.getRange(\"A1\").font.color = Color.GetGreen()\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.fonts.FontEffect": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A1\").value = \"Strikethrough\"\n        worksheet.getRange(\"A1\").font.strikethrough = true\n\n        worksheet.getRange(\"A2\").value = \"Superscript\"\n        worksheet.getRange(\"A2\").font.superscript = true\n\n        worksheet.getRange(\"A3\").value = \"Subscript\"\n        worksheet.getRange(\"A3\").font.subscript = true\n\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.fonts.FontName": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        // use Name property to set font name.\n        worksheet.getRange(\"A1\").value = \"Calibri\"\n        worksheet.getRange(\"A1\").font.name = \"Calibri\"\n\n        // use ThemeFont property to set font name.\n        worksheet.getRange(\"A2\").value = \"Major theme font\"\n        worksheet.getRange(\"A2\").font.themeFont = ThemeFont.Major\n\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.fonts.FontUnderline": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A1\").value = \"Single Underline\"\n        worksheet.getRange(\"A1\").font.underline = UnderlineType.Single\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.alignment.WrapText": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val rangeB3 = worksheet.getRange(\"B3\")\n        rangeB3.value = \"The WrapText property is applied to wrap the text within a cell\"\n        rangeB3.wrapText = true\n\n        worksheet.rows.get(2).rowHeight = 150.0\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.alignment.TextOrientation": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val rangeC1 = worksheet.getRange(\"C1\")\n        rangeC1.value = \"The ReadingOrder property is applied to set text direction.\"\n        rangeC1.readingOrder = ReadingOrder.RightToLeft\n\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.alignment.RotateCellContents": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val rangeB2 = worksheet.getRange(\"B2\")\n        rangeB2.value = \"Rotated Cell Contents\"\n        rangeB2.horizontalAlignment = HorizontalAlignment.Center\n        rangeB2.verticalAlignment = VerticalAlignment.Center\n        // Rotate cell contents.\n        rangeB2.orientation = 15\n\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.alignment.ShrinkToFit": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val rangeB1 = worksheet.getRange(\"B1\")\n        rangeB1.value = \"The ShrinkToFit property is applied\"\n        rangeB1.shrinkToFit = true\n\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.alignment.HAlignVAlign": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.columns.get(0).columnWidth = 17.0\n\n        val rangeA1 = worksheet.getRange(\"A1\")\n        rangeA1.value = \"Right and top\"\n        rangeA1.horizontalAlignment = HorizontalAlignment.Right\n        rangeA1.verticalAlignment = VerticalAlignment.Top\n\n        val rangeA2 = worksheet.getRange(\"A2\")\n        rangeA2.value = \"Center\"\n        rangeA2.horizontalAlignment = HorizontalAlignment.Center\n        rangeA2.verticalAlignment = VerticalAlignment.Center\n\n        val rangeA3 = worksheet.getRange(\"A3\")\n        rangeA3.value = \"Left and bottom, indent\"\n        rangeA3.indentLevel = 1\n\n        worksheet.getRange(\"A1:A3\").columnWidth = 50.0\n        worksheet.getRange(\"A1:A3\").rowHeight = 30.0\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.numberformat.NumberFormats": "\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:H\").columnWidth = 17.0\n\n        // Display 111 as 111.\n        worksheet.getRange(\"A1\").value = 111\n        worksheet.getRange(\"A1\").numberFormat = \"#####\"\n\n        // Display 222 as 00222.\n        worksheet.getRange(\"B1\").value = 222\n        worksheet.getRange(\"B1\").numberFormat = \"00000\"\n\n        // Display 12345678 as 12,345,678.\n        worksheet.getRange(\"C1\").value = 12345678\n        worksheet.getRange(\"C1\").numberFormat = \"#,#\"\n\n        // Display .126 as 0.13.\n        worksheet.getRange(\"D1\").value = .126\n        worksheet.getRange(\"D1\").numberFormat = \"0.##\"\n\n        // Display 74.4 as 74.400.\n        worksheet.getRange(\"E1\").value = 74.4\n        worksheet.getRange(\"E1\").numberFormat = \"##.000\"\n\n        // Display 1.6 as 160.0%.\n        worksheet.getRange(\"F1\").value = 1.6\n        worksheet.getRange(\"F1\").numberFormat = \"0.0%\"\n\n        // Display 4321 as $4,321.00.\n        worksheet.getRange(\"G1\").value = 4321\n        worksheet.getRange(\"G1\").numberFormat = \"$#,##0.00\"\n\n        // Display 8.75 as 8 3/4.\n        worksheet.getRange(\"H1\").value = 8.75\n        worksheet.getRange(\"H1\").numberFormat = \"# ?/?\"\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.numberformat.DateAndTimeFormat": "\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:F\").columnWidth = 17.0\n        worksheet.getRange(\"A1:F1\").formula = \"= Now()\"\n\n        // Apply different date formats.\n        worksheet.getRange(\"A1\").numberFormat = \"m/d/yy\"\n        worksheet.getRange(\"B1\").numberFormat = \"d-mmm-yy\"\n        worksheet.getRange(\"C1\").numberFormat = \"dddd\"\n\n        // Apply different time formats.\n        worksheet.getRange(\"D1\").numberFormat = \"m/d/yy h:mm\"\n        worksheet.getRange(\"E1\").numberFormat = \"h:mm AM/PM\"\n        worksheet.getRange(\"F1\").numberFormat = \"h:mm:ss\"\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.numberformat.CustomNumberFormat": "\n        val worksheet = workbook.worksheets.get(0)\n        // Set range values.\n        worksheet.getRange(\"A2:B2\").value = -15.50\n        worksheet.getRange(\"A3:B3\").value = 555\n        worksheet.getRange(\"A4:B4\").value = 0\n        worksheet.getRange(\"A5:B5\").value = \"Name\"\n\n        // Apply custom number format.\n        worksheet.getRange(\"B2:B5\").numberFormat = \"[Green]#.00;[Red]#.00;[Blue]0.00;[Cyan]\\\"product: \\\"@\"\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.protection.SetRangeLocked": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //config range B1's Locked property.\n        worksheet.getRange(\"B1\").locked = false\n        //protect worksheet, range B1 can be modified in exported xlsx file.\n        worksheet.protection = true\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.protection.SetRangeFormulaHidden": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"B1\").formula = \"=A1\"\n\n        // config range B1's FormulaHidden property.\n        worksheet.getRange(\"B1\").formulaHidden = true\n        // protect worksheet, range B1's formula will not show in exported xlsx file.\n        worksheet.protection = true\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.celltype.AddComboBoxCellType": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val cellType = ComboBoxCellType()\n        cellType.editorValueType = EditorValueType.Value\n        var item = ComboBoxCellItem()\n        item.setValue(\"US\")\n        item.setText(\"United States\")\n        cellType.items.add(item)\n        item = ComboBoxCellItem()\n        item.setValue(\"CN\")\n        item.setText(\"China\")\n        cellType.items.add(item)\n        item = ComboBoxCellItem()\n        item.setValue(\"JP\")\n        item.setText(\"Japan\")\n        cellType.items.add(item)\n\n        worksheet.getRange(\"C5\").cellType = cellType\n        worksheet.getRange(\"C5\").setValue(\"CN\")\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.celltype.AddRowColumnCellType": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.columns.get(3).columnWidthInPixel = 100.0\n        val cellType = CheckBoxCellType()\n        cellType.setCaption(\"CheckBox\")\n        cellType.setTextTrue(\"True\")\n        cellType.setTextFalse(\"False\")\n        cellType.isThreeState = true\n        cellType.textAlign = CheckBoxAlign.Right\n        worksheet.columns.get(3).cellType = cellType\n        worksheet.getRange(\"D1:D10\").setValue(true)\n\n        val buttonCellType = ButtonCellType()\n        buttonCellType.setText(\"Button\")\n        buttonCellType.setButtonBackColor(\"Azure\")\n        buttonCellType.marginLeft = 10.0\n        buttonCellType.marginRight = 10.0\n\n        worksheet.rows.get(3).cellType = buttonCellType\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.celltype.AddHyperlinkCellType": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val cellType = HyperLinkCellType()\n        cellType.setText(\"Goole\")\n        cellType.setLinkColor(\"Blue\")\n        cellType.setLinkToolTip(\"Search by google\")\n        cellType.setVisitedLinkColor(\"Green\")\n        cellType.target = HyperLinkTargetType.Blank\n\n        worksheet.getRange(\"C5\").cellType = cellType\n        worksheet.getRange(\"C5\").setValue(\"http://www.google.com\")\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.celltype.AddSheetCellType": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val buttonCellType = ButtonCellType()\n        buttonCellType.setText(\"Button\")\n        buttonCellType.setButtonBackColor(\"Azure\")\n        buttonCellType.marginLeft = 10.0\n        buttonCellType.marginRight = 10.0\n\n        worksheet.cellType = buttonCellType\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.celltype.AddButtonCellType": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val cellType = ButtonCellType()\n        cellType.setText(\"Hello\")\n        cellType.setButtonBackColor(\"Azure\")\n        cellType.marginLeft = 10.0\n        cellType.marginRight = 10.0\n\n        worksheet.getRange(\"C5\").cellType = cellType\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.celltype.AddCheckBoxCellType": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val cellType = CheckBoxCellType()\n        cellType.setCaption(\"Caption\")\n        cellType.setTextTrue(\"True\")\n        cellType.setTextFalse(\"False\")\n        cellType.setTextIndeterminate(\"Indeterminate\")\n        cellType.isThreeState = true\n        cellType.textAlign = CheckBoxAlign.Right\n\n        worksheet.getRange(\"C5:C6\").cellType = cellType\n        worksheet.getRange(\"C5\").setValue(true)\n        worksheet.getRange(\"C6\").setValue(false)\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.fill.LinearGradientFill": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1\").interior.pattern = Pattern.LinearGradient\n        (worksheet.getRange(\"A1\").interior.gradient as ILinearGradient).colorStops.get(0).color = Color.GetRed()\n        (worksheet.getRange(\"A1\").interior.gradient as ILinearGradient).colorStops.get(1).color = Color.GetYellow()\n\n        (worksheet.getRange(\"A1\").interior.gradient as ILinearGradient).degree = 90.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.fill.SolidFill": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A2\").interior.color = Color.GetGreen()\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.fill.PatternFill": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1\").interior.pattern = Pattern.LightDown\n        worksheet.getRange(\"A1\").interior.color = Color.GetPink()\n        worksheet.getRange(\"A1\").interior.patternColorIndex = 5\n\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.fill.RectangularGradientFill": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1\").interior.pattern = Pattern.RectangularGradient\n        (worksheet.getRange(\"A1\").interior.gradient as IRectangularGradient).colorStops.get(0).color = Color.GetRed()\n        (worksheet.getRange(\"A1\").interior.gradient as IRectangularGradient).colorStops.get(1).color = Color.GetGreen()\n\n        (worksheet.getRange(\"A1\").interior.gradient as IRectangularGradient).bottom = 0.2\n        (worksheet.getRange(\"A1\").interior.gradient as IRectangularGradient).right = 0.3\n        (worksheet.getRange(\"A1\").interior.gradient as IRectangularGradient).top = 0.4\n        (worksheet.getRange(\"A1\").interior.gradient as IRectangularGradient).left = 0.5\n\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.borders.AddingBordersToRange": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val rangeB2_E6 = worksheet.getRange(\"B2:E6\")\n\n        //set left, top, right, bottom borders together.\n        rangeB2_E6.borders.lineStyle = BorderLineStyle.DashDot\n        rangeB2_E6.borders.color = Color.GetGreen()\n\n        //set inside horizontal border.\n        rangeB2_E6.borders.get(BordersIndex.InsideHorizontal).lineStyle = BorderLineStyle.Dashed\n        rangeB2_E6.borders.get(BordersIndex.InsideHorizontal).color = Color.GetTomato()\n\n        //set inside vertical border.\n        rangeB2_E6.borders.get(BordersIndex.InsideVertical).lineStyle = BorderLineStyle.Double\n        rangeB2_E6.borders.get(BordersIndex.InsideVertical).color = Color.GetBlue()\n\n        //set top border individually.\n        rangeB2_E6.borders.get(BordersIndex.EdgeTop).lineStyle = BorderLineStyle.Medium\n        rangeB2_E6.borders.get(BordersIndex.EdgeTop).color = Color.GetRed()\n\n    ",
  "com.grapecity.documents.excel.examples.features.formatting.borders.AddBordersToCell": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val rangeB2 = worksheet.getRange(\"B2\")\n\n        //set left, top, right, bottom borders together.\n        rangeB2.borders.lineStyle = BorderLineStyle.DashDot\n        rangeB2.borders.color = Color.GetGreen()\n\n        //set top border individually.\n        rangeB2.borders.get(BordersIndex.EdgeTop).lineStyle = BorderLineStyle.Medium\n        rangeB2.borders.get(BordersIndex.EdgeTop).color = Color.GetRed()\n\n        //set diagonal down border individually.\n        rangeB2.borders.get(BordersIndex.DiagonalDown).lineStyle = BorderLineStyle.Hair\n        rangeB2.borders.get(BordersIndex.DiagonalDown).color = Color.GetBlue()\n\n        //set diagonal up border individually.\n        rangeB2.borders.get(BordersIndex.DiagonalUp).lineStyle = BorderLineStyle.Dotted\n        rangeB2.borders.get(BordersIndex.DiagonalUp).color = Color.GetBlue()\n\n    ",
  "com.grapecity.documents.excel.examples.features.theme.ChangeWorkbookTheme": "\n\n        //Change workbook's theme to builtin theme.\n        workbook.theme = Themes.GetBerlin()\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"B2\").value = \"Major Font:\"\n        worksheet.getRange(\"B3\").value = \"Minor Font:\"\n        worksheet.getRange(\"C2\").value = \"Trebuchet MS\"\n        worksheet.getRange(\"C3\").value = \"Trebuchet MS\"\n        worksheet.getRange(\"C2\").font.themeFont = ThemeFont.Major\n        worksheet.getRange(\"C3\").font.themeFont = ThemeFont.Minor\n\n        worksheet.getRange(\"E2:E13\").value = arrayOf<Any?>(\"Light1\", \"Dark1\", \"Light2\", \"Dark2\", \"Accent1\", \"Accent2\", \"Accent3\", \"Accent4\", \"Accent5\", \"Accent6\", \"Hyperlink\", \"FollowedHyperlink\")\n\n        worksheet.getRange(\"F2\").interior.themeColor = ThemeColor.Light1\n        worksheet.getRange(\"F3\").interior.themeColor = ThemeColor.Dark1\n        worksheet.getRange(\"F4\").interior.themeColor = ThemeColor.Light2\n        worksheet.getRange(\"F5\").interior.themeColor = ThemeColor.Dark2\n        worksheet.getRange(\"F6\").interior.themeColor = ThemeColor.Accent1\n        worksheet.getRange(\"F7\").interior.themeColor = ThemeColor.Accent2\n        worksheet.getRange(\"F8\").interior.themeColor = ThemeColor.Accent3\n        worksheet.getRange(\"F9\").interior.themeColor = ThemeColor.Accent4\n        worksheet.getRange(\"F10\").interior.themeColor = ThemeColor.Accent5\n        worksheet.getRange(\"F11\").interior.themeColor = ThemeColor.Accent6\n        worksheet.getRange(\"F12\").interior.themeColor = ThemeColor.Hyperlink\n        worksheet.getRange(\"F13\").interior.themeColor = ThemeColor.FollowedHyperlink\n\n        worksheet.getRange(\"B:F\").columnWidth = 15.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.theme.AddCustomThemes": "\n        // Base theme is office theme when not give parameter.\n        val theme = Theme(\"testTheme\")\n        // ITheme theme = new GrapeCity.Documents.Excel.Theme(\"testTheme\",Themes.Badge);\n\n        // Customize theme's color.\n        theme.themeColorScheme.get(ThemeColor.Light1).rgb = Color.GetAntiqueWhite()\n        theme.themeColorScheme.get(ThemeColor.Dark1).rgb = Color.GetAqua()\n        theme.themeColorScheme.get(ThemeColor.Light2).rgb = Color.GetBeige()\n        theme.themeColorScheme.get(ThemeColor.Dark2).rgb = Color.GetBlack()\n        theme.themeColorScheme.get(ThemeColor.Accent1).rgb = Color.GetCadetBlue()\n        theme.themeColorScheme.get(ThemeColor.Accent2).rgb = Color.GetChartreuse()\n        theme.themeColorScheme.get(ThemeColor.Accent3).rgb = Color.GetChocolate()\n        theme.themeColorScheme.get(ThemeColor.Accent4).rgb = Color.GetCoral()\n        theme.themeColorScheme.get(ThemeColor.Accent5).rgb = Color.GetCornflowerBlue()\n        theme.themeColorScheme.get(ThemeColor.Accent6).rgb = Color.GetCornsilk()\n        theme.themeColorScheme.get(ThemeColor.Hyperlink).rgb = Color.GetHoneydew()\n        theme.themeColorScheme.get(ThemeColor.FollowedHyperlink).rgb = Color.GetHotPink()\n\n        // Customize theme's font.\n        theme.themeFontScheme.major.get(FontLanguageIndex.Latin).name = \"Kristen ITC\"\n        theme.themeFontScheme.minor.get(FontLanguageIndex.Latin).name = \"Segoe Script\"\n\n        // Change workbook's theme to custom theme.\n        workbook.theme = theme\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"B2\").value = \"Major Font:\"\n        worksheet.getRange(\"B3\").value = \"Minor Font:\"\n        worksheet.getRange(\"C2\").value = \"Kristen ITC\"\n        worksheet.getRange(\"C3\").value = \"Segoe Script\"\n        worksheet.getRange(\"C2\").font.themeFont = ThemeFont.Major\n        worksheet.getRange(\"C3\").font.themeFont = ThemeFont.Minor\n\n        worksheet.getRange(\"E2:E13\").value = arrayOf<Any?>(\"Light1\", \"Dark1\", \"Light2\", \"Dark2\", \"Accent1\", \"Accent2\", \"Accent3\", \"Accent4\", \"Accent5\", \"Accent6\", \"Hyperlink\", \"FollowedHyperlink\")\n\n        worksheet.getRange(\"F2\").interior.themeColor = ThemeColor.Light1\n        worksheet.getRange(\"F3\").interior.themeColor = ThemeColor.Dark1\n        worksheet.getRange(\"F4\").interior.themeColor = ThemeColor.Light2\n        worksheet.getRange(\"F5\").interior.themeColor = ThemeColor.Dark2\n        worksheet.getRange(\"F6\").interior.themeColor = ThemeColor.Accent1\n        worksheet.getRange(\"F7\").interior.themeColor = ThemeColor.Accent2\n        worksheet.getRange(\"F8\").interior.themeColor = ThemeColor.Accent3\n        worksheet.getRange(\"F9\").interior.themeColor = ThemeColor.Accent4\n        worksheet.getRange(\"F10\").interior.themeColor = ThemeColor.Accent5\n        worksheet.getRange(\"F11\").interior.themeColor = ThemeColor.Accent6\n        worksheet.getRange(\"F12\").interior.themeColor = ThemeColor.Hyperlink\n        worksheet.getRange(\"F13\").interior.themeColor = ThemeColor.FollowedHyperlink\n\n    ",
  "com.grapecity.documents.excel.examples.features.hyperlinks.CreateHyperlinks": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:A\").columnWidth = 30.0\n\n        //add a hyperlink link to web page.\n        worksheet.getRange(\"A1:B2\").hyperlinks.add(worksheet.getRange(\"A1\"), \"http://www.google.com/\", null, \"open google web site.\", \"Google\")\n\n        //add a hyperlink link to a range in this document.\n        worksheet.getRange(\"A3:B4\").hyperlinks.add(worksheet.getRange(\"A3\"), null, \"Sheet1!\\$C$3:\\$E$4\", \"Go to sheet1 C3:E4\", null)\n\n        //add a hyperlink link to email address.\n        worksheet.getRange(\"A5:B6\").hyperlinks.add(worksheet.getRange(\"A5\"), \"mailto:us.sales@grapecity.com\", null, \"Send an email to sales\", \"Send an email to sales\")\n\n        //add a hyperlink link to external file.\n        //change the path to real picture file path.\n        val path = \"external.xlsx\"\n        worksheet.getRange(\"A7:B8\").hyperlinks.add(worksheet.getRange(\"A7\"), path, null, \"link to external.xlsx file.\", \"External.xlsx\")\n\n    ",
  "com.grapecity.documents.excel.examples.features.hyperlinks.DeleteHyperlinks": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:A\").columnWidth = 30.0\n\n        //add a hyperlink link to web page.\n        worksheet.getRange(\"A1:B2\").hyperlinks.add(worksheet.getRange(\"A1\"), \"http://www.google.com/\", null, \"open google web site.\", \"Google\")\n\n        //add a hyperlink link to a range in this document.\n        worksheet.getRange(\"A3:B4\").hyperlinks.add(worksheet.getRange(\"A3\"), null, \"Sheet1!\\$C$3:\\$E$4\", \"Go to sheet1 C3:E4\", \"\")\n\n        //add a hyperlink link to email address.\n        worksheet.getRange(\"A5:B6\").hyperlinks.add(worksheet.getRange(\"A5\"), \"mailto:us.sales@grapecity.com\", null, \"Send an email to sales\", \"Send an email to sales\")\n\n        //add a hyperlink link to external file.\n        //change the path to real picture file path.\n        val path = \"external.xlsx\"\n        worksheet.getRange(\"A7:B8\").hyperlinks.add(worksheet.getRange(\"A7\"), path, null, \"link to external.xlsx file.\", \"External.xlsx\")\n\n        //delete hyperlinks in range A1:A2.\n        worksheet.getRange(\"A1:A2\").hyperlinks.delete()\n\n        //delete all hyperlinks in this worksheet.\n        worksheet.hyperlinks.delete()\n\n    ",
  "com.grapecity.documents.excel.examples.features.hyperlinks.CreateShapeWithHyperlink": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        // Add shapes\n        val shape1 = worksheet.shapes.addShape(AutoShapeType.Rectangle, 10.0, 0.0, 100.0, 100.0)\n        shape1.textFrame.textRange.add(\"Go to google web site.\")\n        val shape2 = worksheet.shapes.addShape(AutoShapeType.RightArrow, 10.0, 120.0, 100.0, 100.0)\n        shape2.textFrame.textRange.add(\"Go to sheet1 C3:E4\")\n        val shape3 = worksheet.shapes.addShape(AutoShapeType.Oval, 10.0, 240.0, 100.0, 100.0)\n        shape3.textFrame.textRange.add(\"Send an email to sales\")\n        val shape4 = worksheet.shapes.addShape(AutoShapeType.LeftArrow, 10.0, 360.0, 100.0, 100.0)\n        shape4.textFrame.textRange.add(\"Link to external.xlsx file.\")\n\n        //add a hyperlink link to web page.\n        worksheet.hyperlinks.add(shape1, \"http://www.google.com/\", null, \"open google web site.\", \"Google\")\n\n        //add a hyperlink link to a range in this document.\n        worksheet.hyperlinks.add(shape2, null, \"Sheet1!\\$C$3:\\$E$4\", \"Go to sheet1 C3:E4\", null)\n\n        //add a hyperlink link to email address.\n        worksheet.hyperlinks.add(shape3, \"mailto:us.sales@grapecity.com\", null, \"Send an email to sales\", \"Send an email to sales\")\n\n        //add a hyperlink link to external file.\n        //change the path to real picture file path.\n        val path = \"external.xlsx\"\n        worksheet.hyperlinks.add(shape4, path, null, \"link to external.xlsx file.\", \"External.xlsx\")\n    ",
  "com.grapecity.documents.excel.examples.features.cellrichtext.AddTextRun": "\n        val worksheet = workbook.worksheets.get(0)\n\n        val b2 = worksheet.getRange(\"B2\")\n\n        val run1 = b2.richText.add(\"GrapeCity\")\n        run1.font.name = \"Agency FB\"\n        run1.font.size = 26.0\n        run1.font.themeColor = ThemeColor.Accent1\n        run1.font.bold = true\n\n        val run2 = b2.richText.add(\" Documents\")\n        run2.font.themeColor = ThemeColor.Accent2\n        run2.font.name = \"Arial Black\"\n        run2.font.size = 20.0\n        run2.font.underline = UnderlineType.Single\n\n        val run3 = b2.richText.add(\" for \")\n        run3.font.italic = true\n\n        val run4 = b2.richText.add(\"Excel\")\n        run4.font.color = Color.GetBlue()\n        run4.font.bold = true\n        run4.font.size = 26.0\n        run4.font.underline = UnderlineType.Double\n\n        b2.entireRow.rowHeight = 42.0\n    ",
  "com.grapecity.documents.excel.examples.features.cellrichtext.ConfigRunFont": "\n        val worksheet = workbook.worksheets.get(0)\n\n        val a2 = worksheet.getRange(\"A2\")\n\n        a2.font.size = 18.0\n        a2.font.bold = true\n        a2.verticalAlignment = VerticalAlignment.Center\n\n        a2.entireRow.rowHeight = 42.0\n        a2.entireColumn.columnWidth = 40.0\n        a2.value = \"Perfect square trinomial\"\n\n        val run = a2.characters(8, 7)\n        run.font.italic = true\n        run.font.themeColor = ThemeColor.Accent1\n\n        val b2 = worksheet.getRange(\"B2\")\n        b2.font.size = 26.0\n        b2.entireColumn.columnWidth = 60.0\n\n        b2.value = \"(a+b)2 = a2+2ab+b2\"\n\n        val superRun1 = b2.characters(5, 1)\n        superRun1.font.superscript = true\n        superRun1.font.color = Color.GetRed()\n\n        val superRun2 = b2.characters(10, 1)\n        superRun2.font.superscript = true\n        superRun2.font.color = Color.GetGreen()\n\n        val superRun3 = b2.characters(17, 1)\n        superRun3.font.superscript = true\n        superRun3.font.color = Color.GetBlue()\n    ",
  "com.grapecity.documents.excel.examples.features.cellrichtext.CharacterCellText": "\n        val worksheet = workbook.worksheets.get(0)\n\n        val b2 = worksheet.getRange(\"B2\")\n        b2.value = \"GrapeCity Documents for Excel\"\n        b2.font.size = 26.0\n        b2.entireRow.rowHeight = 42.0\n\n        val run1 = b2.characters(0, 9)\n        run1.font.name = \"Agency FB\"\n        run1.font.themeColor = ThemeColor.Accent1\n        run1.font.bold = true\n\n        val run2 = b2.characters(10, 9)\n        run2.font.themeColor = ThemeColor.Accent2\n        run2.font.name = \"Arial Black\"\n        run2.font.underline = UnderlineType.Single\n\n        val run3 = b2.characters(20, 3)\n        run3.font.italic = true\n\n        val run4 = b2.characters(24, 5)\n        run4.font.color = Color.GetBlue()\n        run4.font.bold = true\n\n    ",
  "com.grapecity.documents.excel.examples.features.imageexporting.ConvertShapeToImage": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        // Add a oval\n        val oval = worksheet.shapes.addShape(AutoShapeType.Oval, 0.0, 0.0, 191.0, 194.0)\n\n        // Set soild fill for oval\n        oval.fill.color.rgb = Color.GetOrangeRed()\n\n        // Save the shape as image to a stream.\n        oval.toImage(outputStream, ImageType.PNG)\n    ",
  "com.grapecity.documents.excel.examples.features.imageexporting.ExportShapeToImage": "\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/GroupShape.xlsx\")\n        workbook.open(fileStream)\n        val worksheet = workbook.worksheets.get(0)\n\n        // Export the shape to image\n        worksheet.shapes.get(0).toImage(outputStream, ImageType.PNG)\n    ",
  "com.grapecity.documents.excel.examples.features.imageexporting.ExportSheetToImage": "\n\n        workbook.open(this.getResourceStream(\"xlsx/Home inventory.xlsx\"))\n\n        val worksheet = workbook.worksheets.get(0)\n\n        // Save the worksheet as image to a stream.\n        worksheet.toImage(outputStream, ImageType.PNG)\n    ",
  "com.grapecity.documents.excel.examples.features.imageexporting.ConvertRangeToImage": "\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A1:C1\").value = arrayOf(\"Device\", \"Quantity\", \"Unit Price\")\n        worksheet.getRange(\"A2:C5\").value = arrayOf(arrayOf<Any>(\"T540p\", 12, 9850), arrayOf<Any>(\"T570\", 5, 7460), arrayOf<Any>(\"Y460\", 6, 5400), arrayOf<Any>(\"Y460F\", 8, 6240))\n\n        // Set style\n        worksheet.getRange(\"A1:C1\").font.bold = true\n        worksheet.getRange(\"A1:C1\").font.color = Color.GetWhite()\n        worksheet.getRange(\"A1:C1\").interior.color = Color.GetLightBlue()\n        worksheet.getRange(\"A2:C5\").borders.get(BordersIndex.InsideHorizontal).color = Color.GetOrange()\n        worksheet.getRange(\"A2:C5\").borders.get(BordersIndex.InsideHorizontal).lineStyle = BorderLineStyle.DashDot\n\n        // Save the range \"A1:C5\" as an image to a stream.\n        worksheet.getRange(\"A1:C5\").toImage(outputStream, ImageType.PNG)\n    ",
  "com.grapecity.documents.excel.examples.features.imageexporting.ExportRangeToImage": "\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/Personal Monthly Budget.xlsx\")\n        workbook.open(fileStream)\n        val worksheet = workbook.worksheets.get(0)\n\n        // Export range \"B14:E25\" to image\n        worksheet.getRange(\"B14:E25\").toImage(outputStream, ImageType.PNG)\n    ",
  "com.grapecity.documents.excel.examples.features.charts.ChartCut": "\n\n        val worksheet = workbook.worksheets.get(0)\n        //Create chart, chart's range is Range[\"G1:M21\"]\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 300.0, 10.0, 300.0, 300.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        //Range[\"G1:M21\"] must contain chart's range, cut a new shape to Range[\"N1:T21\"]\n        worksheet.getRange(\"G1:M21\").cut(worksheet.getRange(\"N1\"))\n        //worksheet.Range[\"G1:M21\"].cut(worksheet.Range[\"N1:T21\"]);\n\n        //Cross sheet cut, cut a new chart to worksheet2's Range[\"N1:T21\"]\n        //IWorksheet worksheet2 = workbook.Worksheets.Add()\n        //worksheet.Range[\"G1:M21\"].cut(worksheet2.Range[\"E1\"]);\n        //worksheet.Range[\"G1:M21\"].cut(worksheet2.Range[\"N1:T21\"]);\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.CreateChartWithCustomName": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(\"Area chart\", ChartType.Area, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:C13\").value = arrayOf(arrayOf<Any?>(null, \"Blue Series\", \"Orange Series\"), arrayOf(\"Jan\", 0, 59.1883603948205), arrayOf(\"Feb\", 44.6420211591501, 52.2280901938606), arrayOf(\"Mar\", 45.2174930051225, 49.8093056416248), arrayOf(\"Apr\", 62, 37.3065749226828), arrayOf(\"May\", 53, 34.4312192530766), arrayOf(\"Jun\", 31.8933622049831, 69.7834561753736), arrayOf(\"Jul\", 41.7930895085093, 63.9418103906982), arrayOf(\"Aug\", 73, 57.4049534494926), arrayOf(\"Sep\", 49.8773891668518, 33), arrayOf(\"Oct\", 50, 74), arrayOf(\"Nov\", 54.7658428630216, 22.9587876597096), arrayOf(\"Dec\", 32, 54))\n\n        // Get chart by name\n        val areaChart = worksheet.shapes[\"Area chart\"]\n        areaChart.chart.seriesCollection.add(worksheet.getRange(\"A1:C13\"), RowCol.Columns)\n        areaChart.chart.chartTitle.text = \"Area Chart\"\n    ",
  "com.grapecity.documents.excel.examples.features.charts.ChartCopy": "\n\n        val worksheet = workbook.worksheets.get(0)\n        //Create chart, chart's range is Range[\"G1:M21\"]\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 300.0, 10.0, 300.0, 300.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        //Range[\"G1:M21\"] must contain chart's range, copy a new shape to Range[\"N1:T21\"]\n        worksheet.getRange(\"G1:M21\").copy(worksheet.getRange(\"N1\"))\n        //worksheet.Range[\"G1:M21\"].Copy(worksheet.Range[\"N1:T21\"]);\n\n        //Cross sheet copy, copy a new chart to worksheet2's Range[\"N1:T21\"]\n        //IWorksheet worksheet2 = workbook.Worksheets.Add()\n        //worksheet.Range[\"G1:M21\"].Copy(worksheet2.Range[\"E1\"]);\n        //worksheet.Range[\"G1:M21\"].Copy(worksheet2.Range[\"N1:T21\"]);\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.CreateChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 300.0, 10.0, 300.0, 300.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n\n        //create chart.\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.ChartDuplicate": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //Create chart, chart's range is Range[\"G1:M21\"]\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 300.0, 10.0, 300.0, 300.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        //Duplicate chart\n        val newShape = shape.duplicate()\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.AddUserShapes": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A1:C10\").setValue(arrayOf(arrayOf(\"Task\", \"Worker 1\", \"Worker 2\"), arrayOf(\"Task 1\", 7, 10), arrayOf(\"Task 2\", 5, 1), arrayOf(\"Task 3\", 3, 6), arrayOf(\"Task 4\", 10, 5), arrayOf(\"Task 5\", 4, 4), arrayOf(\"Task 6\", 5, 8), arrayOf(\"Task 7\", 8, 7), arrayOf(\"Task 8\", 2, 5), arrayOf(\"Task 9\", 6, 4)))\n\n        //Create a funnel chart.\n        val shape = worksheet.shapes.addChart(ChartType.Line, 250.0, 20.0, 400.0, 250.0)\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:C10\"))\n        shape.chart.hasLegend = false\n        shape.chart.chartTitle.setText(\" \")\n\n        //Add a bussiness logo in the line chart area\n        val stream = this.getResourceStream(\"logo.png\")\n        try {\n            shape.chart.addPicture(stream, ImageType.PNG, 170.0, 10.0, 60.0, 10.0)\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n\n        //Add shapes in the line chart area\n        val userShape1 = shape.chart.addShape(AutoShapeType.Rectangle, 30.0, 45.0, 60.0, 20.0)\n        userShape1.fill.color.objectThemeColor = ThemeColor.Accent2\n        userShape1.line.color.objectThemeColor = ThemeColor.Accent2\n        userShape1.textFrame.textRange.get(0).setText(\"Worker 2\")\n\n        val userShape2 = shape.chart.addShape(AutoShapeType.Rectangle, 330.0, 110.0, 60.0, 20.0)\n        userShape2.fill.color.objectThemeColor = ThemeColor.Accent1\n        userShape2.line.color.objectThemeColor = ThemeColor.Accent1\n        userShape2.textFrame.textRange.get(0).setText(\"Worker 1\")\n    ",
  "com.grapecity.documents.excel.examples.features.charts.DeleteChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 300.0, 10.0, 300.0, 300.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        //delete chart.\n        shape.chart.delete()\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.charttitle.ConfigChartTitleStyle": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -20, 36, 27), arrayOf(\"Item3\", 62, 70, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 50, 50))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        //config chart title style\n        shape.chart.hasTitle = true\n        shape.chart.chartTitle.text = \"MyChartTitle\"\n        shape.chart.chartTitle.font.size = 15.0\n        shape.chart.chartTitle.font.name = \"Bradley Hand ITC\"\n        shape.chart.chartTitle.format.fill.color.rgb = Color.GetDarkOrange()\n        shape.chart.chartTitle.format.line.color.rgb = Color.GetCornflowerBlue()\n        shape.chart.chartTitle.format.line.weight = 1.5\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.charttitle.ConfigChartTitleRichText": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -20, 36, 27), arrayOf(\"Item3\", 62, 70, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 50, 50))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        //config chart title style with rich text\n        shape.chart.hasTitle = true\n        shape.chart.chartTitle.textFrame.textRange.paragraphs.add(\"ChartSubtitle\")\n        shape.chart.chartTitle.textFrame.textRange.paragraphs.add(\"ChartTitle\", 0)\n        shape.chart.chartTitle.textFrame.textRange.paragraphs.get(0).font.color.rgb = Color.GetCornflowerBlue()\n        shape.chart.chartTitle.textFrame.textRange.paragraphs.get(0).font.size = 15.0\n        shape.chart.chartTitle.textFrame.textRange.paragraphs.get(1).font.color.rgb = Color.GetOrange()\n        shape.chart.chartTitle.textFrame.textRange.paragraphs.get(1).font.size = 10.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.charttitle.ConfigChartTitleAngle": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf<Any?>(\"Item1\", 10, 25, 25), arrayOf<Any?>(\"Item2\", -51, -36, 27), arrayOf<Any?>(\"Item3\", 52, -85, -30), arrayOf<Any?>(\"Item4\", 22, 65, 65), arrayOf<Any?>(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n        shape.chart.hasTitle = true\n        shape.chart.chartTitle.text = \"MyChartTitle\"\n\n        //config chart title's angle\n        shape.chart.chartTitle.orientation = 30\n    ",
  "com.grapecity.documents.excel.examples.features.charts.plotarea.ChartJustPlotVisibleCell": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        //Hidden row 3.\n        worksheet.getRange(\"3:3\").hidden = true\n        //plot visible cells only, does not plot row 3.\n        shape.chart.plotVisibleOnly = true\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.plotarea.ConfigPlotAreaFormat": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, 36, 27), arrayOf(\"Item3\", 52, 50, -30), arrayOf(\"Item4\", 22, 65, 30), arrayOf(\"Item5\", 23, 40, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        val plotarea = shape.chart.plotArea\n        plotarea.format.fill.color.rgb = Color.GetLightGray()\n        plotarea.format.line.color.rgb = Color.GetGray()\n        plotarea.format.line.weight = 1.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.BubbleChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.Bubble, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:C10\").value = arrayOf(arrayOf<Any?>(\"Blue\", null, null), arrayOf<Any?>(125, 750, 3), arrayOf<Any?>(25, 625, 7), arrayOf<Any?>(75, 875, 5), arrayOf<Any?>(175, 625, 6), arrayOf<Any?>(\"Red\", null, null), arrayOf<Any?>(125, 500, 10), arrayOf<Any?>(25, 250, 1), arrayOf<Any?>(75, 125, 5), arrayOf<Any?>(175, 250, 8))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:C5\"), RowCol.Columns)\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A6:C10\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Bubble Chart\"\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.LineMarkersChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.LineMarkers, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:B8\").value = arrayOf(arrayOf<Any?>(6, 55), arrayOf<Any?>(45, 25), arrayOf<Any?>(35, 45), arrayOf<Any?>(25, 65), arrayOf<Any?>(65, 15), arrayOf<Any?>(45, 75), arrayOf<Any?>(75, 55), arrayOf<Any?>(65, 35))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B8\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Line with Markers\"\n        shape.chart.seriesCollection.get(0).markerStyle = MarkerStyle.Square\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.Stock_VolumeOpenHighLowClose": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.StockVOHLC, 350.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:F23\").value = arrayOf(arrayOf<Any?>(null, \"Volume\", \"Open\", \"High\", \"Low\", \"Close\"), arrayOf(GregorianCalendar(2019, 8, 1), 26085, 103.46, 105.76, 92.38, 100.94), arrayOf(GregorianCalendar(2019, 8, 2), 52314, 100.26, 102.45, 90.14, 93.45), arrayOf(GregorianCalendar(2019, 8, 3), 70308, 98.05, 102.11, 85.01, 99.89), arrayOf(GregorianCalendar(2019, 8, 4), 33401, 100.32, 106.01, 94.04, 99.45), arrayOf(GregorianCalendar(2019, 8, 5), 87500, 99.74, 108.23, 98.16, 104.33), arrayOf(GregorianCalendar(2019, 8, 8), 33756, 92.11, 107.7, 91.02, 102.17), arrayOf(GregorianCalendar(2019, 8, 9), 65737, 107.8, 110.36, 101.62, 110.07), arrayOf(GregorianCalendar(2019, 8, 10), 45668, 107.56, 115.97, 106.89, 112.39), arrayOf(GregorianCalendar(2019, 8, 11), 47815, 112.86, 120.32, 112.15, 117.52), arrayOf(GregorianCalendar(2019, 8, 12), 76759, 115.02, 122.03, 114.67, 114.75), arrayOf(GregorianCalendar(2019, 8, 15), 23492, 108.53, 120.46, 106.21, 116.85), arrayOf(GregorianCalendar(2019, 8, 16), 56127, 114.97, 118.08, 113.55, 116.69), arrayOf(GregorianCalendar(2019, 8, 17), 81142, 127.14, 128.23, 110.91, 117.25), arrayOf(GregorianCalendar(2019, 8, 18), 46384, 118.89, 120.55, 108.09, 112.52), arrayOf(GregorianCalendar(2019, 8, 19), 51005, 105.57, 112.58, 105.42, 109.12))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:F23\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Stock Volume-Open-High-Low-Close Chart\"\n        val valueAxis = shape.chart.axes.item(AxisType.Value)\n        val categoryAxis = shape.chart.axes.item(AxisType.Category)\n        val valueSecondaryAxis = shape.chart.axes.item(AxisType.Value, AxisGroup.Secondary)\n\n        valueAxis.minimumScale = 0.0\n        valueAxis.maximumScale = 150000.0\n        valueAxis.majorUnit = 30000.0\n\n        categoryAxis.categoryType = CategoryType.CategoryScale\n        categoryAxis.tickLabelSpacing = 5\n\n        valueSecondaryAxis.majorUnit = 40.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.XYScatterSmoothWithMarkers": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.XYScatterSmooth, 350.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:B5\").value = arrayOf(arrayOf<Any?>(4, 2), arrayOf<Any?>(6, 1), arrayOf<Any?>(1, 2), arrayOf<Any?>(7, 4), arrayOf<Any?>(4, 4))\n        worksheet.getRange(\"A7:B11\").value = arrayOf(arrayOf<Any?>(9, 5), arrayOf<Any?>(7, 8), arrayOf<Any?>(9, 8), arrayOf<Any?>(5, 9), arrayOf<Any?>(2, 4))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B5\"), RowCol.Columns)\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A7:B11\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Scatter with Smooth Lines and Markers\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.LineMarkerStacked100Chart": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.LineMarkersStacked100, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:C5\").value = arrayOf(arrayOf<Any?>(12, 22, 27), arrayOf<Any?>(45, 52, 25), arrayOf<Any?>(58, 35, 58), arrayOf<Any?>(21, 37, 43), arrayOf<Any?>(44, 45, 28))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:C5\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Line Marker Stacked 100 Chart\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.Stock_HighLowCloseStockChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.StockHLC, 350.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D17\").value = arrayOf(arrayOf<Any?>(null, \"High\", \"Low\", \"Close\"), arrayOf(GregorianCalendar(2019, 8, 1), 105.76, 92.38, 100.94), arrayOf(GregorianCalendar(2019, 8, 2), 102.45, 90.14, 93.45), arrayOf(GregorianCalendar(2019, 8, 3), 102.11, 85.01, 99.89), arrayOf(GregorianCalendar(2019, 8, 4), 106.01, 94.04, 99.45), arrayOf(GregorianCalendar(2019, 8, 5), 108.23, 98.16, 104.33), arrayOf(GregorianCalendar(2019, 8, 8), 107.7, 91.02, 102.17), arrayOf(GregorianCalendar(2019, 8, 9), 110.36, 101.62, 110.07), arrayOf(GregorianCalendar(2019, 8, 10), 115.97, 106.89, 112.39), arrayOf(GregorianCalendar(2019, 8, 11), 120.32, 112.15, 117.52), arrayOf(GregorianCalendar(2019, 8, 12), 122.03, 114.67, 114.75), arrayOf(GregorianCalendar(2019, 8, 15), 120.46, 106.21, 116.85), arrayOf(GregorianCalendar(2019, 8, 16), 118.08, 113.55, 116.69), arrayOf(GregorianCalendar(2019, 8, 17), 128.23, 110.91, 117.25), arrayOf(GregorianCalendar(2019, 8, 18), 120.55, 108.09, 112.52), arrayOf(GregorianCalendar(2019, 8, 19), 112.58, 105.42, 109.12), arrayOf(GregorianCalendar(2019, 8, 22), 115.23, 97.25, 101.56))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D17\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"High-Low-Close Stock Chart\"\n        val valueAxis = shape.chart.axes.item(AxisType.Value)\n        val categoryAxis = shape.chart.axes.item(AxisType.Category)\n        val series_close = shape.chart.seriesCollection.get(2)\n        //config value axis\n        valueAxis.minimumScale = 80.0\n        valueAxis.maximumScale = 140.0\n        valueAxis.majorUnit = 15.0\n        //config category axis\n        categoryAxis.categoryType = CategoryType.CategoryScale\n        categoryAxis.majorTickMark = TickMark.Outside\n        categoryAxis.tickLabelSpacingIsAuto = false\n        categoryAxis.tickLabelSpacing = 5\n        series_close.markerStyle = MarkerStyle.Square\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.XYScatterSmooth": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.XYScatterSmoothNoMarkers, 350.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:B5\").value = arrayOf(arrayOf<Any?>(4, 2), arrayOf<Any?>(6, 1), arrayOf<Any?>(1, 2), arrayOf<Any?>(7, 4), arrayOf<Any?>(4, 4))\n        worksheet.getRange(\"A7:B11\").value = arrayOf(arrayOf<Any?>(9, 5), arrayOf<Any?>(7, 8), arrayOf<Any?>(9, 8), arrayOf<Any?>(5, 9), arrayOf<Any?>(2, 4))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B5\"), RowCol.Columns)\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A7:B11\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Scatter with Smooth Lines Chart\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.BarStackedChart": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.BarStacked, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:C4\").value = arrayOf(arrayOf<Any?>(103, 121, 109), arrayOf<Any?>(56, 94, 115), arrayOf<Any?>(116, 89, 99), arrayOf<Any?>(55, 93, 70))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:C4\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Bar Stacked Chart\"\n        shape.chart.legend.position = LegendPosition.Left\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.ColumnStackedChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.ColumnStacked, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:C6\").value = arrayOf(arrayOf<Any?>(103, 121, 109), arrayOf<Any?>(56, 94, 115), arrayOf<Any?>(116, 89, 99), arrayOf<Any?>(55, 93, 70), arrayOf<Any?>(114, 114, 83), arrayOf<Any?>(125, 138, 136))\n\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:C6\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Column Stacked Chart\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.Stock_VolumeHighLowCloseStock": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.StockVHLC, 350.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:E17\").value = arrayOf(arrayOf<Any?>(null, \"Volume\", \"High\", \"Low\", \"Close\"), arrayOf(GregorianCalendar(2019, 8, 1), 26085, 105.76, 92.38, 100.94), arrayOf(GregorianCalendar(2019, 8, 2), 52314, 102.45, 90.14, 93.45), arrayOf(GregorianCalendar(2019, 8, 3), 70308, 102.11, 85.01, 99.89), arrayOf(GregorianCalendar(2019, 8, 4), 33401, 106.01, 94.04, 99.45), arrayOf(GregorianCalendar(2019, 8, 5), 87500, 108.23, 98.16, 104.33), arrayOf(GregorianCalendar(2019, 8, 8), 33756, 107.7, 91.02, 102.17), arrayOf(GregorianCalendar(2019, 8, 9), 65737, 110.36, 101.62, 110.07), arrayOf(GregorianCalendar(2019, 8, 10), 45668, 115.97, 106.89, 112.39), arrayOf(GregorianCalendar(2019, 8, 11), 47815, 120.32, 112.15, 117.52), arrayOf(GregorianCalendar(2019, 8, 12), 76759, 122.03, 114.67, 114.75), arrayOf(GregorianCalendar(2019, 8, 15), 23492, 120.46, 106.21, 116.85), arrayOf(GregorianCalendar(2019, 8, 16), 56127, 118.08, 113.55, 116.69), arrayOf(GregorianCalendar(2019, 8, 17), 81142, 128.23, 110.91, 117.25), arrayOf(GregorianCalendar(2019, 8, 18), 46384, 120.55, 108.09, 112.52), arrayOf(GregorianCalendar(2019, 8, 19), 51005, 112.58, 105.42, 109.12), arrayOf(GregorianCalendar(2019, 8, 22), 35223, 115.23, 97.25, 101.56))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:E17\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Volume-High-Low-Close Stock Chart\"\n        shape.chart.lineGroups.get(0).hiLoLines.format.line.color.rgb = Color.GetBlack()\n        val valueAxis = shape.chart.axes.item(AxisType.Value)\n        val categoryAxis = shape.chart.axes.item(AxisType.Category)\n        val valueSecondaryAxis = shape.chart.axes.item(AxisType.Value, AxisGroup.Secondary)\n        val series_close = shape.chart.seriesCollection.get(3)\n        //config value axis\n        valueAxis.minimumScale = 0.0\n        valueAxis.maximumScale = 150000.0\n        valueAxis.majorUnit = 30000.0\n        //config category axis\n        categoryAxis.categoryType = CategoryType.CategoryScale\n        categoryAxis.majorTickMark = TickMark.Outside\n        categoryAxis.tickLabelSpacing = 4\n        //config secondary value axis\n        valueSecondaryAxis.minimumScale = 0.0\n        valueSecondaryAxis.maximumScale = 150.0\n        valueSecondaryAxis.majorUnit = 30.0\n        //config marker style\n        series_close.markerFormat.fill.color.rgb = Color.GetOrange()\n        series_close.markerStyle = MarkerStyle.Square\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.CombinationChart1": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:B13\").value = arrayOf(arrayOf<Any?>(\"Blue Column\", \"Red Line\"), arrayOf<Any?>(75, 20), arrayOf<Any?>(149, 50), arrayOf<Any?>(105, 30), arrayOf<Any?>(55, 80), arrayOf<Any?>(121, 40), arrayOf<Any?>(76, 110), arrayOf<Any?>(128, 50), arrayOf<Any?>(114, 140), arrayOf<Any?>(75, 60), arrayOf<Any?>(105, 170), arrayOf<Any?>(145, 70), arrayOf<Any?>(110, 100))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B13\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Combination Chart\"\n        //change series type\n        val series2 = shape.chart.seriesCollection.get(1)\n        series2.chartType = ChartType.LineMarkers\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.XYScatterLinesChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.XYScatterLines, 350.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:B8\").value = arrayOf(arrayOf<Any?>(75, 250), arrayOf<Any?>(50, 125), arrayOf<Any?>(25, 375), arrayOf<Any?>(75, 250), arrayOf<Any?>(50, 875), arrayOf<Any?>(25, 625), arrayOf<Any?>(75, 750), arrayOf<Any?>(125, 500))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B8\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Scatter with Straight Lines and Markers Chart\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.LineStacked100Chart": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.LineStacked100, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:C5\").value = arrayOf(arrayOf<Any?>(12, 22, 27), arrayOf<Any?>(45, 52, 25), arrayOf<Any?>(58, 35, 58), arrayOf<Any?>(21, 37, 43), arrayOf<Any?>(44, 45, 28))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:C5\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Line Stacked 100 Chart\"\n        shape.chart.seriesCollection.get(0).format.line.weight = 2.25\n        shape.chart.seriesCollection.get(1).format.line.weight = 2.25\n        shape.chart.seriesCollection.get(2).format.line.weight = 2.25\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.Stock_OpenHighLowCloseStock": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.StockOHLC, 350.0, 20.0, 360.0, 220.0)\n        worksheet.getRange(\"A1:E17\").value = arrayOf(arrayOf<Any?>(null, \"Open\", \"High\", \"Low\", \"Close\"), arrayOf(GregorianCalendar(2019, 8, 1), 103.46, 105.76, 92.38, 100.94), arrayOf(GregorianCalendar(2019, 8, 2), 100.26, 102.45, 90.14, 93.45), arrayOf(GregorianCalendar(2019, 8, 3), 98.05, 102.11, 85.01, 99.89), arrayOf(GregorianCalendar(2019, 8, 4), 100.32, 106.01, 94.04, 99.45), arrayOf(GregorianCalendar(2019, 8, 5), 99.74, 108.23, 98.16, 104.33), arrayOf(GregorianCalendar(2019, 8, 8), 92.11, 107.7, 91.02, 102.17), arrayOf(GregorianCalendar(2019, 8, 9), 107.8, 110.36, 101.62, 110.07), arrayOf(GregorianCalendar(2019, 8, 10), 107.56, 115.97, 106.89, 112.39), arrayOf(GregorianCalendar(2019, 8, 11), 112.86, 120.32, 112.15, 117.52), arrayOf(GregorianCalendar(2019, 8, 12), 115.02, 122.03, 114.67, 114.75), arrayOf(GregorianCalendar(2019, 8, 15), 108.53, 120.46, 106.21, 116.85), arrayOf(GregorianCalendar(2019, 8, 16), 114.97, 118.08, 113.55, 116.69), arrayOf(GregorianCalendar(2019, 8, 17), 127.14, 128.23, 110.91, 117.25), arrayOf(GregorianCalendar(2019, 8, 18), 118.89, 120.55, 108.09, 112.52), arrayOf(GregorianCalendar(2019, 8, 19), 105.57, 112.58, 105.42, 109.12), arrayOf(GregorianCalendar(2019, 8, 22), 110.23, 115.23, 97.25, 101.56))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:E17\"), RowCol.Columns)\n        //set chart title\n        shape.chart.chartTitle.text = \"Open-High-Low-Close Stock Chart\"\n\n        val valueAxis = shape.chart.axes.item(AxisType.Value)\n        val categoryAxis = shape.chart.axes.item(AxisType.Category)\n        //config value axis\n        valueAxis.minimumScale = 80.0\n        valueAxis.maximumScale = 140.0\n        valueAxis.majorUnit = 15.0\n        //config category axis\n        categoryAxis.categoryType = CategoryType.CategoryScale\n        categoryAxis.majorTickMark = TickMark.Outside\n        categoryAxis.tickMarkSpacing = 5\n        categoryAxis.tickLabelSpacing = 5\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.AreaStacked100": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.AreaStacked100, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:C13\").value = arrayOf(arrayOf(0, 59.18, 27.14), arrayOf<Any?>(44.64, 52.22, 25.08), arrayOf<Any?>(45.21, 49.80, 57.99), arrayOf<Any?>(24.32, 37.30, 42.73), arrayOf<Any?>(58.34, 34.43, 28.34), arrayOf<Any?>(31.89, 69.78, 46.88), arrayOf<Any?>(41.79, 63.94, 56.24), arrayOf<Any?>(67.94, 57.40, 27.78), arrayOf<Any?>(49.87, 48.26, 52.06), arrayOf<Any?>(62.39, 67.43, 33.33), arrayOf<Any?>(54.76, 22.95, 50.36), arrayOf<Any?>(28.33, 36.60, 36.61), arrayOf<Any?>(22.77, 55.65, 65.64), arrayOf<Any?>(20.34, 49.35, 45.60), arrayOf<Any?>(32.10, 47.60, 20.62), arrayOf<Any?>(26.37, 63.00, 53.97), arrayOf<Any?>(35, 75, 60))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:C13\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Area Stacked100 Chart\"\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.ColumnClusteredChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D2\").value = arrayOf(arrayOf<Any?>(100, 200, 300, 400), arrayOf<Any?>(100, 200, 300, 400))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D2\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Column Clustered Chart\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.BarStacked100Chart": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.BarStacked100, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:B5\").value = arrayOf(arrayOf<Any?>(1, 5), arrayOf<Any?>(2, 4), arrayOf<Any?>(3, 3), arrayOf<Any?>(4, 2), arrayOf<Any?>(4, 1))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B5\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Bar Stacked 100 Chart\"\n        shape.chart.legend.position = LegendPosition.Left\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.ColumnStacked100Chart": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.ColumnStacked100, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:B6\").value = arrayOf(arrayOf<Any?>(1, 5), arrayOf<Any?>(2, 4), arrayOf<Any?>(3, 3), arrayOf<Any?>(4, 2), arrayOf<Any?>(5, 1), arrayOf<Any?>(5, 3))\n\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B6\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Column Stacked 100 Chart\"\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.PieChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.Pie, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:B4\").value = arrayOf(arrayOf(\"Blue\", 1), arrayOf(\"Red\", 2), arrayOf(\"Green\", 3), arrayOf(\"Purple\", 4))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B4\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Pie Chart\"\n        shape.chart.legend.position = LegendPosition.Right\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.CombinationChart2": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:C17\").value = arrayOf(arrayOf<Any?>(\"Area 1\", \"Column 1\", \"Column 2\"), arrayOf<Any?>(1350, 120, 75), arrayOf<Any?>(1500, 90, 35), arrayOf<Any?>(1200, 80, 50), arrayOf<Any?>(1300, 80, 80), arrayOf<Any?>(1750, 90, 100), arrayOf<Any?>(1640, 120, 130), arrayOf<Any?>(1700, 120, 95), arrayOf<Any?>(1100, 90, 80), arrayOf<Any?>(1350, 120, 75), arrayOf<Any?>(1500, 90, 35), arrayOf<Any?>(1200, 80, 50))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:C17\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Combination Chart\"\n        val series1 = shape.chart.seriesCollection.get(0)\n        val series2 = shape.chart.seriesCollection.get(1)\n        val series3 = shape.chart.seriesCollection.get(2)\n        //change series type\n        series1.chartType = ChartType.Area\n        series2.chartType = ChartType.ColumnStacked\n        series3.chartType = ChartType.ColumnStacked\n        //set axis group\n        series2.axisGroup = AxisGroup.Secondary\n        series3.axisGroup = AxisGroup.Secondary\n        //config axis scale and unit\n        val value_axis = shape.chart.axes.item(AxisType.Value)\n        val value_second_axis = shape.chart.axes.item(AxisType.Value, AxisGroup.Secondary)\n        value_axis.maximumScale = 1800.0\n        value_axis.majorUnit = 450.0\n        value_second_axis.maximumScale = 300.0\n        value_second_axis.majorUnit = 75.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.BarClusteredChart": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.BarClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D2\").value = arrayOf(arrayOf<Any?>(100, 200, 300, 400), arrayOf<Any?>(100, 200, 300, 400))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D2\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Bar Clustered Chart\"\n        shape.chart.legend.position = LegendPosition.Left\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.AreaChart": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.Area, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:C13\").value = arrayOf(arrayOf<Any?>(null, \"Blue Series\", \"Orange Series\"), arrayOf(\"Jan\", 0, 59.1883603948205), arrayOf(\"Feb\", 44.6420211591501, 52.2280901938606), arrayOf(\"Mar\", 45.2174930051225, 49.8093056416248), arrayOf(\"Apr\", 62, 37.3065749226828), arrayOf(\"May\", 53, 34.4312192530766), arrayOf(\"Jun\", 31.8933622049831, 69.7834561753736), arrayOf(\"Jul\", 41.7930895085093, 63.9418103906982), arrayOf(\"Aug\", 73, 57.4049534494926), arrayOf(\"Sep\", 49.8773891668518, 33), arrayOf(\"Oct\", 50, 74), arrayOf(\"Nov\", 54.7658428630216, 22.9587876597096), arrayOf(\"Dec\", 32, 54))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:C13\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Area Chart\"\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.LineMarkerStackedChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.LineMarkersStacked, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:C7\").value = arrayOf(arrayOf(0, 59.18, 27.14), arrayOf<Any?>(44.64, 52.22, 25.08), arrayOf<Any?>(45.21, 49.80, 57.99), arrayOf<Any?>(24.32, 37.30, 42.73), arrayOf<Any?>(58.34, 34.43, 28.34), arrayOf<Any?>(31.89, 69.78, 46.88), arrayOf<Any?>(41.79, 63.94, 56.24))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:C7\"), RowCol.Columns)\n        shape.chart.seriesCollection.get(0).format.line.weight = 2.25\n        shape.chart.seriesCollection.get(1).format.line.weight = 2.25\n        shape.chart.seriesCollection.get(2).format.line.weight = 2.25\n        shape.chart.chartTitle.text = \"Line Marker Stacked Chart\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.LineChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.Line, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:C7\").value = arrayOf(arrayOf(0, 59.18, 27.14), arrayOf<Any?>(44.64, 52.22, 25.08), arrayOf<Any?>(45.21, 49.80, 57.99), arrayOf<Any?>(24.32, 37.30, 42.73), arrayOf<Any?>(58.34, 34.43, 28.34), arrayOf<Any?>(31.89, 69.78, 46.88), arrayOf<Any?>(41.79, 63.94, 56.24))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:C7\"), RowCol.Columns)\n        //set series lines style\n        shape.chart.seriesCollection.get(0).format.line.weight = 2.25\n        shape.chart.seriesCollection.get(1).format.line.weight = 2.25\n        shape.chart.seriesCollection.get(2).format.line.weight = 2.25\n        shape.chart.chartTitle.text = \"Line Chart\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.Pie_DoughnutChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.Doughnut, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:B6\").value = arrayOf(arrayOf<Any?>(\"S1\", \"S2\"), arrayOf<Any?>(10, 25), arrayOf<Any?>(51, 36), arrayOf<Any?>(52, 85), arrayOf<Any?>(22, 65), arrayOf<Any?>(23, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B6\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Area Chart\"\n        shape.chart.chartGroups.get(0).doughnutHoleSize = 50\n        shape.chart.seriesCollection.get(0).hasDataLabels = true\n        shape.chart.seriesCollection.get(1).hasDataLabels = true\n        shape.chart.seriesCollection.get(1).explosion = 2\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.LineStackedChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.LineStacked, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:C7\").value = arrayOf(arrayOf(0, 59.18, 27.14), arrayOf<Any?>(44.64, 52.22, 25.08), arrayOf<Any?>(45.21, 49.80, 57.99), arrayOf<Any?>(24.32, 37.30, 42.73), arrayOf<Any?>(58.34, 34.43, 28.34), arrayOf<Any?>(31.89, 69.78, 46.88), arrayOf<Any?>(41.79, 63.94, 56.24))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:C7\"), RowCol.Columns)\n        shape.chart.seriesCollection.get(0).format.line.weight = 2.25\n        shape.chart.seriesCollection.get(1).format.line.weight = 2.25\n        shape.chart.seriesCollection.get(2).format.line.weight = 2.25\n        shape.chart.chartTitle.text = \"Line Stacked Chart\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.AreaStackedChart": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.AreaStacked, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:C13\").value = arrayOf(arrayOf(0, 59.18, 27.14), arrayOf<Any?>(44.64, 52.22, 25.08), arrayOf<Any?>(45.21, 49.80, 57.99), arrayOf<Any?>(24.32, 37.30, 42.73), arrayOf<Any?>(58.34, 34.43, 28.34), arrayOf<Any?>(31.89, 69.78, 46.88), arrayOf<Any?>(41.79, 63.94, 56.24), arrayOf<Any?>(67.94, 57.40, 27.78), arrayOf<Any?>(49.87, 48.26, 52.06), arrayOf<Any?>(62.39, 67.43, 33.33), arrayOf<Any?>(54.76, 22.95, 50.36), arrayOf<Any?>(28.33, 36.60, 36.61), arrayOf<Any?>(22.77, 55.65, 65.64), arrayOf<Any?>(20.34, 49.35, 45.60), arrayOf<Any?>(32.10, 47.60, 20.62), arrayOf<Any?>(26.37, 63.00, 53.97), arrayOf<Any?>(35, 75, 60))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:C13\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Area Stacked Chart\"\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartgallery.XYScatterChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.XYScatter, 350.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D7\").value = arrayOf(arrayOf<Any?>(\"Blue\", null, \"Red\", null), arrayOf<Any?>(55, 964, 67, 475), arrayOf<Any?>(20, 825, 10, 163), arrayOf<Any?>(77, 840, 87, 224), arrayOf<Any?>(182, 596, 46, 196), arrayOf<Any?>(190, 384, 100, 377), arrayOf<Any?>(140, 503, 92, 47))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B7\"), RowCol.Columns)\n        shape.chart.seriesCollection.add(worksheet.getRange(\"C1:D7\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Scatter Chart\"\n        //config markers style\n        val series1 = shape.chart.seriesCollection.get(0)\n        val series2 = shape.chart.seriesCollection.get(1)\n        series1.markerStyle = MarkerStyle.Square\n        series1.markerSize = 10\n        series2.markerSize = 10\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.newcharts.AddFunnelChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A1:B7\").setValue(arrayOf(arrayOf(\"Stage\", \"Amount\"), arrayOf(\"Prospects\", 500), arrayOf(\"Qualified prospects\", 425), arrayOf(\"Needs analysis\", 200), arrayOf(\"Price quotes\", 150), arrayOf(\"Negotiations\", 100), arrayOf(\"Closed sales\", 90)))\n        worksheet.getRange(\"A:A\").columns.autoFit()\n\n        //Create a funnel chart.\n        val shape = worksheet.shapes.addChart(ChartType.Funnel, 300.0, 20.0, 300.0, 200.0)\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B7\"))\n\n        //Set the axis invisible.\n        val axis = shape.chart.axes.item(AxisType.Category, AxisGroup.Primary)\n        axis.visible = false\n    ",
  "com.grapecity.documents.excel.examples.features.charts.newcharts.AddHistogramChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A1:B11\").setValue(arrayOf(arrayOf(\"Complaint\", \"Count\"), arrayOf(\"Too noisy\", 27), arrayOf(\"Overpriced\", 789), arrayOf(\"Food is tasteless\", 65), arrayOf(\"Food is not fresh\", 9), arrayOf(\"Food is too salty\", 15), arrayOf(\"Not clean\", 30), arrayOf(\"Unfriendly staff\", 12), arrayOf(\"Wait time\", 109), arrayOf(\"No atmosphere\", 45), arrayOf(\"Small portions\", 621)))\n        worksheet.getRange(\"A:A\").columns.autoFit()\n\n        //Create a histogram chart.\n        val shape = worksheet.shapes.addChart(ChartType.Histogram, 300.0, 20.0, 300.0, 200.0)\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B11\"))\n\n        //Sets bins type by count.\n        shape.chart.chartGroups.get(0).binsType = BinsType.BinsTypeBinCount\n        shape.chart.chartGroups.get(0).binsCountValue = 3\n\n        //Set overflow bin value\n        shape.chart.chartGroups.get(0).binsOverflowEnabled = true\n        shape.chart.chartGroups.get(0).binsOverflowValue = 500.0\n    ",
  "com.grapecity.documents.excel.examples.features.charts.newcharts.AddWaterfallChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A1:B8\").setValue(arrayOf(arrayOf(\"Starting Amt\", 130), arrayOf(\"Measurement 1\", 25), arrayOf(\"Measurement 2\", -75), arrayOf(\"Subtotal\", 80), arrayOf(\"Measurement 3\", 45), arrayOf(\"Measurement 4\", -65), arrayOf(\"Measurement 5\", 80), arrayOf(\"Total\", 140)))\n        worksheet.getRange(\"A:A\").columns.autoFit()\n\n        //Create a waterfall chart.\n        val shape = worksheet.shapes.addChart(ChartType.Waterfall, 300.0, 20.0, 300.0, 250.0)\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B8\"))\n\n        //Set subtotal&total points.\n        val points = shape.chart.seriesCollection.get(0).points\n        points.get(3).isTotal = true\n        points.get(7).isTotal = true\n\n        //Connector lines are not shown.\n        val series = shape.chart.seriesCollection.get(0)\n        series.showConnectorLines = false\n        \n        //Modify the fill color of the first legend entry.\n        val legendEntries = shape.chart.legend.legendEntries\n        legendEntries.get(0).format.fill.color.objectThemeColor = ThemeColor.Accent6\n    ",
  "com.grapecity.documents.excel.examples.features.charts.newcharts.AddTreeMapChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A1:D16\").setValue(arrayOf(arrayOf(\"Quarter\", \"Month\", \"Week\", \"Output\"), arrayOf(\"1st\", \"Jan\", null, 3.5), arrayOf(null, \"Feb\", \"Week1\", 1.2), arrayOf(null, null, \"Week2\", 0.8), arrayOf(null, null, \"Week3\", 0.6), arrayOf(null, null, \"Week4\", 0.5), arrayOf(null, \"Mar\", null, 1.7), arrayOf(\"2st\", \"Apr\", null, 1.1), arrayOf(null, \"May\", null, 0.8), arrayOf(null, \"Jun\", null, 0.3), arrayOf(\"3st\", \"July\", null, 0.7), arrayOf(null, \"Aug\", null, 0.6), arrayOf(null, \"Sept\", null, 0.1), arrayOf(\"4st\", \"Oct\", null, 0.5), arrayOf(null, \"Nov\", null, 0.4), arrayOf(null, \"Dec\", null, 0.3)))\n\n        //Create a treemap chart.\n        val shape = worksheet.shapes.addChart(ChartType.Treemap, 300.0, 20.0, 300.0, 200.0)\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D16\"))\n\n        //Set the parent data labels are displayed as banners.\n        shape.chart.seriesCollection.get(0).parentDataLabelOption = ParentDataLabelOptions.Banner;\n        \n        //Modify chart title text.\n        shape.chart.chartTitle.setText(\"Annual Report\")\n    ",
  "com.grapecity.documents.excel.examples.features.charts.newcharts.AddSunburstChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A1:D16\").setValue(arrayOf(arrayOf(\"Quarter\", \"Month\", \"Week\", \"Output\"), arrayOf(\"1st\", \"Jan\", null, 3.5), arrayOf(null, \"Feb\", \"Week1\", 1.2), arrayOf(null, null, \"Week2\", 0.8), arrayOf(null, null, \"Week3\", 0.6), arrayOf(null, null, \"Week4\", 0.5), arrayOf(null, \"Mar\", null, 1.7), arrayOf(\"2st\", \"Apr\", null, 1.1), arrayOf(null, \"May\", null, 0.8), arrayOf(null, \"Jun\", null, 0.3), arrayOf(\"3st\", \"July\", null, 0.7), arrayOf(null, \"Aug\", null, 0.6), arrayOf(null, \"Sept\", null, 0.1), arrayOf(\"4st\", \"Oct\", null, 0.5), arrayOf(null, \"Nov\", null, 0.4), arrayOf(null, \"Dec\", null, 0.3)))\n\n        //Create a sunburst chart.\n        val shape = worksheet.shapes.addChart(ChartType.Sunburst, 300.0, 20.0, 200.0, 200.0)\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D16\"))\n\n        //Modify chart title text.\n        shape.chart.chartTitle.setText(\"Annual Report\")\n    ",
  "com.grapecity.documents.excel.examples.features.charts.newcharts.AddBoxWhiskerChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A1:D16\").setValue(arrayOf(arrayOf(\"Course\", \"SchoolA\", \"SchoolB\", \"SchoolC\"), arrayOf(\"English\", 63, 53, 45), arrayOf(\"Physics\", 61, 55, 65), arrayOf(\"English\", 63, 50, 65), arrayOf(\"Math\", 62, 51, 64), arrayOf(\"English\", 46, 53, 66), arrayOf(\"English\", 58, 56, 67), arrayOf(\"Math\", 60, 51, 67), arrayOf(\"Math\", 62, 53, 66), arrayOf(\"English\", 63, 54, 64), arrayOf(\"English\", 63, 52, 67), arrayOf(\"Physics\", 60, 56, 64), arrayOf(\"English\", 60, 56, 67), arrayOf(\"Math\", 61, 56, 45), arrayOf(\"Math\", 63, 58, 64), arrayOf(\"English\", 59, 54, 65)))\n\n        //Create a box&whisker chart.\n        val shape = worksheet.shapes.addChart(ChartType.BoxWhisker, 300.0, 20.0, 300.0, 200.0)\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D16\"))\n\n        //Config value axis's scale.\n        val value_axis = shape.chart.axes.item(AxisType.Value, AxisGroup.Primary)\n        value_axis.minimumScale = 40.0\n        value_axis.maximumScale = 70.0\n\n        //Config the display of box&whisker plot.\n        val series = shape.chart.seriesCollection.get(0)\n        series.showInnerPoints = true\n        series.showOutlierPoints = false\n        series.showMeanMarkers = false\n        series.showMeanLine = true\n        series.quartileCalculationInclusiveMedian = true\n    ",
  "com.grapecity.documents.excel.examples.features.charts.newcharts.AddParetoChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A1:B11\").setValue(arrayOf(arrayOf(\"Complaint\", \"Count\"), arrayOf(\"Too noisy\", 27), arrayOf(\"Overpriced\", 789), arrayOf(\"Food is tasteless\", 65), arrayOf(\"Food is not fresh\", 9), arrayOf(\"Food is too salty\", 15), arrayOf(\"Not clean\", 30), arrayOf(\"Unfriendly staff\", 12), arrayOf(\"Wait time\", 109), arrayOf(\"No atmosphere\", 45), arrayOf(\"Small portions\", 621)))\n        worksheet.getRange(\"A:A\").columns.autoFit()\n\n        //Create a pareto chart.\n        val shape = worksheet.shapes.addChart(ChartType.Pareto, 300.0, 20.0, 300.0, 200.0)\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B11\"))\n\n        //Sets bins type by size.\n        shape.chart.chartGroups.get(0).binsType = BinsType.BinsTypeBinSize\n        shape.chart.chartGroups.get(0).binWidthValue = 300.0\n\n        //Set underflow bin value.\n        shape.chart.chartGroups.get(0).binsUnderflowEnabled = true\n        shape.chart.chartGroups.get(0).binsOverflowValue = 50.0\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartlines.CreateHiLoLine": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.Line, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        shape.chart.lineGroups.get(0).hasHiLoLines = true\n        shape.chart.lineGroups.get(0).hiLoLines.format.line.color.rgb = Color.GetLightPink()\n        shape.chart.lineGroups.get(0).hiLoLines.format.line.weight = 3.0\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartlines.CreateUpDownBars": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.Line, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        //config up down bars for line chart.\n        shape.chart.lineGroups.get(0).hasUpDownBars = true\n        shape.chart.lineGroups.get(0).upBars.format.fill.color.rgb = Color.FromArgb(199, 235, 217)\n        shape.chart.lineGroups.get(0).downBars.format.fill.color.rgb = Color.GetLightPink()\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartlines.CreateDropLine": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.Line, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        shape.chart.lineGroups.get(0).hasDropLines = true\n        shape.chart.lineGroups.get(0).dropLines.format.line.color.rgb = Color.GetLightPink()\n        shape.chart.lineGroups.get(0).dropLines.format.line.weight = 3.0\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartlines.CreateSeriesLine": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnStacked, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        shape.chart.columnGroups.get(0).hasSeriesLines = true\n        shape.chart.columnGroups.get(0).seriesLines.format.line.color.rgb = Color.GetLightPink()\n        shape.chart.columnGroups.get(0).seriesLines.format.line.weight = 3.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartlines.CreateTrendline": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        val series1 = shape.chart.seriesCollection.get(0)\n\n        series1.trendlines.add()\n        series1.trendlines.get(0).type = TrendlineType.Linear\n        series1.trendlines.get(0).forward = 1.0\n        series1.trendlines.get(0).backward = 0.5\n        series1.trendlines.get(0).intercept = 2.5\n        series1.trendlines.get(0).displayEquation = true\n        series1.trendlines.get(0).displayRSquared = true\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartlines.CreateConnectorLine": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.PieOfPie, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        //connector line for pie of pie chart\n        shape.chart.pieGroups.get(0).hasSeriesLines = true\n        shape.chart.pieGroups.get(0).seriesLines.format.line.color.rgb = Color.GetOrange()\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.errorbars.ConfigPercentageErrorBar": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.Line, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D4\").value = arrayOf(arrayOf<Any?>(null, \"Q1\", \"Q2\", \"Q3\"), arrayOf<Any?>(\"Mobile Phones\", 1330, 2330, 3330), arrayOf<Any?>(\"Laptops\", 4032, 5632, 6197), arrayOf<Any?>(\"Tablets\", 6233, 7233, 8233))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D4\"), RowCol.Rows)\n\n        // Get first series\n        val series1 = shape.chart.seriesCollection.get(0)\n\n        // Set HasErrorBars as true\n        series1.hasErrorBars = true\n\n        // Set value type of first series' error bar as percentage\n        series1.yErrorBar.valueType = ErrorBarType.Percentage\n        series1.yErrorBar.amount = 50.0\n    ",
  "com.grapecity.documents.excel.examples.features.charts.errorbars.ConfigCustomErrorBar": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.Line, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D4\").value = arrayOf(arrayOf<Any?>(null, \"Q1\", \"Q2\", \"Q3\"), arrayOf<Any?>(\"Mobile Phones\", 1330, 2330, 3330), arrayOf<Any?>(\"Laptops\", 4032, 5632, 6197), arrayOf<Any?>(\"Tablets\", 6233, 7233, 8233))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D4\"), RowCol.Rows)\n\n        // Get first series\n        val series1 = shape.chart.seriesCollection.get(0)\n\n        // Set HasErrorBars as true\n        series1.hasErrorBars = true\n\n        // Set value type of first series' error bar as custom\n        series1.yErrorBar.valueType = ErrorBarType.Custom\n        series1.yErrorBar.plus = \"={2000}\"\n        series1.yErrorBar.minus = \"={1000}\"\n    ",
  "com.grapecity.documents.excel.examples.features.charts.errorbars.ConfigXYErrorBars": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.XYScatter, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D7\").value = arrayOf(arrayOf<Any?>(\"Blue\", null, \"Red\", null), arrayOf<Any?>(55, 964, 67, 475), arrayOf<Any?>(20, 825, 10, 163), arrayOf<Any?>(77, 840, 87, 224), arrayOf<Any?>(182, 596, 46, 196), arrayOf<Any?>(190, 384, 100, 377), arrayOf<Any?>(140, 503, 92, 47))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A2:B7\"), RowCol.Columns)\n        shape.chart.seriesCollection.add(worksheet.getRange(\"C2:D7\"), RowCol.Columns)\n        shape.chart.chartTitle.text = \"Scatter Chart\"\n        // Get first series\n        val series1 = shape.chart.seriesCollection.get(0)\n        // Set HasErrorBars as true\n        series1.hasErrorBars = true\n        // Config y-direction error bar\n        series1.yErrorBar.valueType = ErrorBarType.FixedValue\n        series1.yErrorBar.amount = 500.0\n        // Config x-direction error bar\n        series1.xErrorBar.valueType = ErrorBarType.FixedValue\n        series1.xErrorBar.amount = 20.0\n    ",
  "com.grapecity.documents.excel.examples.features.charts.errorbars.ConfigDeleteErrorBar": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.Line, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D4\").value = arrayOf(arrayOf<Any?>(null, \"Q1\", \"Q2\", \"Q3\"), arrayOf<Any?>(\"Mobile Phones\", 1330, 2330, 3330), arrayOf<Any?>(\"Laptops\", 4032, 5632, 6197), arrayOf<Any?>(\"Tablets\", 6233, 7233, 8233))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D4\"), RowCol.Rows)\n\n        // Get first series\n        val series1 = shape.chart.seriesCollection.get(0)\n\n        // Set HasErrorBars as true\n        series1.hasErrorBars = true\n\n        // Get second series\n        val series2 = shape.chart.seriesCollection.get(1)\n\n        // Set HasErrorBars as true\n        series2.hasErrorBars = true\n\n        // Delete first series' error bar\n        series1.yErrorBar.delete()\n    ",
  "com.grapecity.documents.excel.examples.features.charts.errorbars.ConfigFixedValueErrorBar": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.Line, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D4\").value = arrayOf(arrayOf<Any?>(null, \"Q1\", \"Q2\", \"Q3\"), arrayOf<Any?>(\"Mobile Phones\", 1330, 2330, 3330), arrayOf<Any?>(\"Laptops\", 4032, 5632, 6197), arrayOf<Any?>(\"Tablets\", 6233, 7233, 8233))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D4\"), RowCol.Rows)\n\n        // Get first series\n        val series1 = shape.chart.seriesCollection.get(0)\n\n        // Set HasErrorBars as true\n        series1.hasErrorBars = true\n\n        // Set value type of first series' error bar as fixed value\n        series1.yErrorBar.valueType = ErrorBarType.FixedValue\n        series1.yErrorBar.amount = 500.0\n    ",
  "com.grapecity.documents.excel.examples.features.charts.errorbars.ConfigStDevErrorBar": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.Line, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D4\").value = arrayOf(arrayOf<Any?>(null, \"Q1\", \"Q2\", \"Q3\"), arrayOf<Any?>(\"Mobile Phones\", 1330, 2330, 3330), arrayOf<Any?>(\"Laptops\", 4032, 5632, 6197), arrayOf<Any?>(\"Tablets\", 6233, 7233, 8233))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D4\"), RowCol.Rows)\n\n        // Get first series\n        val series1 = shape.chart.seriesCollection.get(0)\n\n        // Set HasErrorBars as true\n        series1.hasErrorBars = true\n\n        // Set value type of first series' error bar as standard deviation\n        series1.yErrorBar.valueType = ErrorBarType.StDev\n        series1.yErrorBar.amount = 1.0\n    ",
  "com.grapecity.documents.excel.examples.features.charts.errorbars.ConfigErrorBarStyle": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.Line, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D4\").value = arrayOf(arrayOf<Any?>(null, \"Q1\", \"Q2\", \"Q3\"), arrayOf<Any?>(\"Mobile Phones\", 1330, 2330, 3330), arrayOf<Any?>(\"Laptops\", 4032, 5632, 6197), arrayOf<Any?>(\"Tablets\", 6233, 7233, 8233))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D4\"), RowCol.Rows)\n\n        // Get first series\n        val series1 = shape.chart.seriesCollection.get(0)\n\n        // Set HasErrorBars as true\n        series1.hasErrorBars = true\n\n        // Config style of first series' error bar\n        series1.yErrorBar.format.line.color.rgb = Color.GetRed()\n        series1.yErrorBar.format.line.weight = 2.0\n    ",
  "com.grapecity.documents.excel.examples.features.charts.errorbars.ConfigStdErrErrorBar": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.Line, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D4\").value = arrayOf(arrayOf<Any?>(null, \"Q1\", \"Q2\", \"Q3\"), arrayOf<Any?>(\"Mobile Phones\", 1330, 2330, 3330), arrayOf<Any?>(\"Laptops\", 4032, 5632, 6197), arrayOf<Any?>(\"Tablets\", 6233, 7233, 8233))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D4\"), RowCol.Rows)\n\n        // Get first series\n        val series1 = shape.chart.seriesCollection.get(0)\n\n        // Set HasErrorBars as true\n        series1.hasErrorBars = true\n\n        // Set value type of first series' error bar as standard error\n        series1.yErrorBar.valueType = ErrorBarType.StError\n    ",
  "com.grapecity.documents.excel.examples.features.charts.errorbars.ConfigErrorBarIncludeAndEndType": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.Line, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D4\").value = arrayOf(arrayOf<Any?>(null, \"Q1\", \"Q2\", \"Q3\"), arrayOf<Any?>(\"Mobile Phones\", 1330, 2330, 3330), arrayOf<Any?>(\"Laptops\", 4032, 5632, 6197), arrayOf<Any?>(\"Tablets\", 6233, 7233, 8233))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D4\"), RowCol.Rows)\n\n        // Get first series\n        val series1 = shape.chart.seriesCollection.get(0)\n\n        // Set HasErrorBars as true\n        series1.hasErrorBars = true\n\n        // Config first series' error bar\n        series1.yErrorBar.type = ErrorBarInclude.Both\n        series1.yErrorBar.endStyle = EndStyleCap.Cap\n\n        // Get third series\n        val series2 = shape.chart.seriesCollection.get(2)\n\n        // Set HasErrorBars as true\n        series2.hasErrorBars = true\n\n        // Config third series' error bar\n        series2.yErrorBar.type = ErrorBarInclude.Plus\n        series2.yErrorBar.endStyle = EndStyleCap.NoCap\n    ",
  "com.grapecity.documents.excel.examples.features.charts.markers.ConfigMarkerStyle": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.LineMarkers, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:B6\").value = arrayOf(arrayOf<Any?>(null, \"S1\"), arrayOf(\"Item1\", 10), arrayOf(\"Item2\", -51), arrayOf(\"Item3\", 52), arrayOf(\"Item4\", 22), arrayOf(\"Item5\", 40))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B6\"), RowCol.Columns, true, true)\n        val series1 = shape.chart.seriesCollection.get(0)\n\n        //config line markers style\n        series1.markerStyle = MarkerStyle.Square\n        series1.markerSize = 10\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.markers.ConfigMarkersFormat": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.LineMarkers, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:B6\").value = arrayOf(arrayOf<Any?>(null, \"S1\"), arrayOf(\"Item1\", 10), arrayOf(\"Item2\", -51), arrayOf(\"Item3\", 52), arrayOf(\"Item4\", 22), arrayOf(\"Item5\", 40))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n        val series1 = shape.chart.seriesCollection.get(0)\n\n        //config line markers style\n        series1.markerFormat.fill.color.rgb = Color.GetCornflowerBlue()\n        series1.markerFormat.line.style = LineStyle.ThickThin\n        series1.markerFormat.line.color.rgb = Color.GetLightGreen()\n        series1.markerFormat.line.weight = 3.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.axes.ConfigValueAxisUnits": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, 36, 27), arrayOf(\"Item3\", 52, 90, -30), arrayOf(\"Item4\", 22, 65, 50), arrayOf(\"Item5\", 23, 55, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n        val value_axis = shape.chart.axes.item(AxisType.Value)\n\n        value_axis.maximumScale = 100.0\n        value_axis.minimumScale = -100.0\n        value_axis.majorUnit = 30.0\n        value_axis.minorUnit = 6.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.axes.ConfigCategoryAxisUnits": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A2:A6\").numberFormat = \"m/d/yyyy\"\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(GregorianCalendar(2015, 9, 7), 10, 25, 25), arrayOf(GregorianCalendar(2015, 9, 24), 51, 36, 27), arrayOf(GregorianCalendar(2015, 10, 8), 52, 85, 30), arrayOf(GregorianCalendar(2015, 10, 25), 22, 65, 65), arrayOf(GregorianCalendar(2015, 11, 10), 23, 69, 69))\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        val category_axis = shape.chart.axes.item(AxisType.Category)\n        // DateTime(2015, 12, 20)\n        category_axis.maximumScale = DateInfo.ToOADate(GregorianCalendar(2015, 11, 20))\n        // DateTime(2015, 10, 1)\n        category_axis.minimumScale = DateInfo.ToOADate(GregorianCalendar(2015, 9, 1))\n        category_axis.baseUnit = TimeUnit.Months\n        category_axis.majorUnitScale = TimeUnit.Months\n        category_axis.majorUnit = 1.0\n        category_axis.minorUnitScale = TimeUnit.Days\n        category_axis.minorUnit = 15.0\n    ",
  "com.grapecity.documents.excel.examples.features.charts.axes.ConfigTickMarkLabel": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n        val value_axis = shape.chart.axes.item(AxisType.Value)\n        val category_axis = shape.chart.axes.item(AxisType.Category)\n\n        //config tick label's format\n        category_axis.tickLabelPosition = TickLabelPosition.NextToAxis\n        category_axis.tickLabelSpacing = 2\n        category_axis.tickLabels.font.color.rgb = Color.GetDarkOrange()\n        category_axis.tickLabels.font.size = 12.0\n        category_axis.tickLabels.numberFormat = \"#,##0.00\"\n        value_axis.tickLabels.numberFormat = \"#,##0;[Red]#,##0\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.axes.ConfigGridlines": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        val value_axis = shape.chart.axes.item(AxisType.Value)\n        value_axis.hasMajorGridlines = true\n        value_axis.hasMinorGridlines = true\n        value_axis.majorGridlines.format.line.color.rgb = Color.GetGray()\n        value_axis.majorGridlines.format.line.weight = 1.0\n        value_axis.minorGridlines.format.line.color.rgb = Color.GetLightGray()\n        value_axis.minorGridlines.format.line.weight = 0.75\n        value_axis.majorUnit = 40.0\n        value_axis.minorUnit = 8.0\n        value_axis.minorGridlines.format.line.style = LineStyle.ThickThin\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.axes.ConfigValueAxesFormat": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.Line, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n        val value_axis = shape.chart.axes.item(AxisType.Value)\n\n        //set value axis's format.\n        value_axis.format.line.color.rgb = Color.FromArgb(91, 155, 213)\n        value_axis.format.line.weight = 2.0\n        value_axis.format.line.style = LineStyle.Single\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.axes.ConfigCategoryAxesFormat": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.Line, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n        val category_axis = shape.chart.axes.item(AxisType.Category)\n\n        //set category axis's format.\n        category_axis.format.fill.color.objectThemeColor = ThemeColor.Accent1\n        category_axis.format.line.color.rgb = Color.GetLightSkyBlue()\n        category_axis.format.line.weight = 3.0\n        category_axis.format.line.style = LineStyle.Single\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.axes.SetAxisTickMark": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.Line, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        val category_axis = shape.chart.axes.item(AxisType.Category)\n        category_axis.format.line.color.rgb = Color.GetGreen()\n        category_axis.format.line.weight = 1.5\n        category_axis.majorTickMark = TickMark.Inside\n        category_axis.minorTickMark = TickMark.Cross\n        category_axis.tickMarkSpacing = 2\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.axes.ConfigAxisTitle": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", 51, 36, 27), arrayOf(\"Item3\", 52, 85, 30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n        val category_axis = shape.chart.axes.item(AxisType.Category)\n\n        //config axis title\n        category_axis.hasTitle = true\n        category_axis.axisTitle.text = \"CategoryAxisTitle\"\n        category_axis.axisTitle.font.size = 18.0\n        category_axis.axisTitle.font.color.rgb = Color.GetOrange()\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.axes.ConfigDisplayUnitLabel": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        val value_axis = shape.chart.axes.item(AxisType.Value)\n        value_axis.displayUnit = DisplayUnit.Custom\n        value_axis.displayUnitCustom = 100.0\n        value_axis.hasDisplayUnitLabel = true\n        value_axis.displayUnitLabel.font.color.rgb = Color.GetCornflowerBlue()\n        value_axis.displayUnitLabel.format.fill.color.rgb = Color.GetOrange()\n        value_axis.displayUnitLabel.format.line.color.rgb = Color.GetCornflowerBlue()\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.axes.ConfigTickMarkLabelAngle": "\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/Manufacturing output chart.xlsx\")\n        workbook.open(fileStream!!)\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes[0]\n\n        val category_axis = shape.chart.axes.item(AxisType.Category)\n\n        //config tick label's angle\n        category_axis.tickLabels.orientation = -45\n    ",
  "com.grapecity.documents.excel.examples.features.charts.axes.SetAxisScaleType": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D5\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 4, 25, 7), arrayOf(\"Item2\", 15, -10, 18), arrayOf(\"Item3\", 45, 90, 20), arrayOf(\"Item4\", 8, 20, 11))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D5\"), RowCol.Columns, true, true)\n\n        val value_axis = shape.chart.axes.item(AxisType.Value)\n        value_axis.scaleType = ScaleType.Logarithmic\n        value_axis.logBase = 5.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.datapoint.ConfigNegativePoint": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n        val series1 = shape.chart.seriesCollection.get(0)\n\n        //If it is a negative point, it's color is red.\n        series1.invertIfNegative = true\n        series1.invertColor.objectThemeColor = ThemeColor.Accent4\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.datapoint.ConfigSecondarySection": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.PieOfPie, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n        val series1 = shape.chart.seriesCollection.get(0)\n        series1.hasDataLabels = true\n\n        //config secondary section for pie of pie chart\n        shape.chart.chartGroups.get(0).splitType = ChartSplitType.SplitByCustomSplit\n        series1.points.get(0).secondaryPlot = true\n        series1.points.get(1).secondaryPlot = false\n        series1.points.get(2).secondaryPlot = true\n        series1.points.get(3).secondaryPlot = false\n        series1.points.get(4).secondaryPlot = true\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.datapoint.ConfigDataPointFormat": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n        val series1 = shape.chart.seriesCollection.get(0)\n\n        //set data point format\n        series1.points.get(2).format.fill.color.rgb = Color.FromArgb(0, 176, 240)\n        series1.points.get(2).format.line.color.rgb = Color.GetBlue()\n        series1.points.get(2).format.line.weight = 1.5\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.datalabel.ConfigDataLabelText": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:B5\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\"), arrayOf(\"Item1\", -20), arrayOf(\"Item2\", 30), arrayOf(\"Item3\", 50), arrayOf(\"Item3\", 40))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B5\"), RowCol.Columns, true, true)\n        val series1 = shape.chart.seriesCollection.get(0)\n        series1.hasDataLabels = true\n\n        //customize data label's text.\n        series1.dataLabels.showCategoryName = true\n        series1.dataLabels.showSeriesName = true\n        series1.dataLabels.showLegendKey = true\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.datalabel.ConfigDataLabelFormat": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:B5\").value = arrayOf(arrayOf<Any?>(null, \"S1\"), arrayOf(\"Item1\", -20), arrayOf(\"Item2\", 30), arrayOf(\"Item3\", 50), arrayOf(\"Item3\", 40))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B5\"), RowCol.Columns, true, true)\n        val series1 = shape.chart.seriesCollection.get(0)\n        series1.hasDataLabels = true\n        series1.dataLabels.showSeriesName = true\n\n        //set series1's all data label's format.\n        series1.dataLabels.format.fill.color.rgb = Color.GetPink()\n        series1.dataLabels.format.line.color.rgb = Color.GetGreen()\n        series1.dataLabels.format.line.weight = 1.0\n\n        //set series1's specific data label's format.\n        series1.dataLabels.get(2).format.fill.color.rgb = Color.GetLightGreen()\n        series1.points.get(2).dataLabel.format.line.color.rgb = Color.GetGray()\n        series1.points.get(2).dataLabel.format.line.weight = 2.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.datalabel.ConfigDataLabelAngle": "\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:B5\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\"), arrayOf<Any?>(\"Item1\", -20), arrayOf<Any?>(\"Item2\", 30), arrayOf<Any?>(\"Item3\", 50), arrayOf<Any?>(\"Item3\", 40))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B5\"), RowCol.Columns, true, true)\n        val series1 = shape.chart.seriesCollection.get(0)\n        series1.hasDataLabels = true\n\n        //set series1's all data labels' angle.\n        series1.dataLabels.orientation = 45\n\n        //set series1's specific data label's angle.\n        series1.dataLabels.get(2).orientation = -45\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartarea.ConfigChartAreaFont": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n        val chartarea = shape.chart.chartArea\n\n        //Font\n        chartarea.font.color.rgb = Color.GetMediumSeaGreen()\n        chartarea.font.name = \"Times New Roman\"\n        chartarea.font.size = 12.0\n        //rounded corners.\n        chartarea.roundedCorners = true\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chartarea.ConfigChartAreaFormat": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n        val chartarea = shape.chart.chartArea\n\n        //Format\n        chartarea.format.fill.color.rgb = Color.GetLightGray()\n        chartarea.format.line.color.rgb = Color.GetMediumSeaGreen()\n        chartarea.format.line.weight = 1.5\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.legend.ConfigLegendPositionAndLayout": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -20, 36, 27), arrayOf(\"Item3\", 52, 70, 30), arrayOf(\"Item4\", 22, 33, -20), arrayOf(\"Item5\", 23, 30, 30))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        shape.chart.hasLegend = true\n        val legend = shape.chart.legend\n        //position.\n        legend.position = LegendPosition.Left\n        //font.\n        legend.font.color.rgb = Color.GetRed()\n        legend.font.italic = true\n    ",
  "com.grapecity.documents.excel.examples.features.charts.legend.ConfigLegendEntryFontStyle": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, 36, 27), arrayOf(\"Item3\", 52, 70, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        shape.chart.hasLegend = true\n        val legend = shape.chart.legend\n        //config legend entry font style\n        val legendentry = legend.legendEntries.get(0)\n        legendentry.font.color.rgb = Color.GetRed()\n        legendentry.font.size = 15.0\n    ",
  "com.grapecity.documents.excel.examples.features.charts.legend.ConfigLegendFormat": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, 36, 27), arrayOf(\"Item3\", 52, 70, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        shape.chart.hasLegend = true\n        //config legend font style\n        val legend = shape.chart.legend\n        legend.font.size = 12.0\n        legend.font.name = \"Cooper Black\"\n        //config legend format\n        legend.format.fill.color.rgb = Color.GetLightGray()\n        legend.format.line.color.rgb = Color.GetGray()\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.series.ConfigBubbleChartLayout": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.Bubble, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        val series1 = shape.chart.seriesCollection.get(0)\n        series1.hasDataLabels = true\n\n        shape.chart.xyGroups.get(0).bubbleScale = 150\n        shape.chart.xyGroups.get(0).sizeRepresents = SizeRepresents.SizeIsArea\n        shape.chart.xyGroups.get(0).showNegativeBubbles = true\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.series.ExtendSeries": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D4\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 50), arrayOf(\"Item2\", 15, -36, 40), arrayOf(\"Item3\", 52, 40, -30))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D4\"), RowCol.Columns, true, true)\n\n        worksheet.getRange(\"A12:D13\").value = arrayOf(arrayOf(\"Item5\", 10, 20, -30), arrayOf(\"Item6\", 20, 40, 80))\n\n        //add new data point to existing series.\n        shape.chart.seriesCollection.extend(worksheet.getRange(\"A12:D13\"), RowCol.Columns, true)\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.series.ChangeSeriesType": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n\n        //Add series\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n        val series1 = shape.chart.seriesCollection.get(0)\n        val series2 = shape.chart.seriesCollection.get(1)\n        //change series2's chart type.\n        series2.chartType = ChartType.Line\n        series2.format.line.weight = 2.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.series.SetVaryColorForColumnChart": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:B6\").value = arrayOf(arrayOf<Any?>(null, \"S1\"), arrayOf(\"Item1\", 10), arrayOf(\"Item2\", -51), arrayOf(\"Item3\", 52), arrayOf(\"Item4\", 22), arrayOf(\"Item5\", 23))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:B6\"), RowCol.Columns, true, true)\n        //set vary colors for column chart which only has one series.\n        shape.chart.columnGroups.get(0).varyByCategories = true\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.series.CreateSecondaryAxis": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:C6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\"), arrayOf(\"Item1\", 10, 25), arrayOf(\"Item2\", -51, -36), arrayOf(\"Item3\", 32, 64), arrayOf(\"Item4\", 44, 80), arrayOf(\"Item5\", 60, 100))\n\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:C6\"), RowCol.Columns, true, true)\n        val series2 = shape.chart.seriesCollection.get(1)\n        //add a secondary axis\n        series2.axisGroup = AxisGroup.Secondary\n        series2.chartType = ChartType.Line\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.series.AddSeries": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n\n        //Add series\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.series.DeleteSeries": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        //delete chart series, make series count to 1.\n        shape.chart.seriesCollection.get(2).delete()\n        shape.chart.seriesCollection.get(1).delete()\n        //Chart's series count is 1.\n        val count = shape.chart.seriesCollection.count\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.series.ConfigSeriesFormat": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.ColumnClustered, 250.0, 20.0, 360.0, 230.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n        val series1 = shape.chart.seriesCollection.get(0)\n        //set series format.\n        series1.format.fill.color.rgb = Color.GetMediumSeaGreen()\n        series1.format.line.color.rgb = Color.GetGreen()\n        series1.format.line.weight = 1.5\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chart3dformat.ConfigChartFloorStyle": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.Column3D, 250.0, 20.0, 350.0, 250.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        //config back wall individually.\n        shape.chart.floor.thickness = 5\n        shape.chart.floor.format.fill.color.rgb = Color.GetYellow()\n        shape.chart.floor.format.line.color.rgb = Color.GetRed()\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chart3dformat.ConfigChartWallStyle": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.Column3D, 250.0, 20.0, 350.0, 250.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        //config back wall and side wall together.\n        shape.chart.walls.thickness = 5\n        shape.chart.walls.format.fill.color.rgb = Color.GetLightPink()\n        shape.chart.walls.format.line.color.rgb = Color.GetLightBlue()\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chart3dformat.ConfigChartBackWall": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.Column3D, 250.0, 20.0, 350.0, 250.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        //config chart floor\n        shape.chart.backWall.thickness = 5\n        shape.chart.backWall.format.fill.color.rgb = Color.GetLightGreen()\n        shape.chart.backWall.format.line.color.rgb = Color.GetLightBlue()\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chart3dformat.ConfigChart3DFormat": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.Column3D, 250.0, 20.0, 350.0, 250.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        val chartarea = shape.chart.chartArea\n        //config 3D chart format\n        chartarea.format.threeD.rotationX = 60.0\n        chartarea.format.threeD.rotationY = 60.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.charts.chart3dformat.ConfigChartSideWall": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shape = worksheet.shapes.addChart(ChartType.Column3D, 250.0, 20.0, 350.0, 250.0)\n        worksheet.getRange(\"A1:D6\").value = arrayOf(arrayOf<Any?>(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", -51, -36, 27), arrayOf(\"Item3\", 52, -85, -30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69))\n        shape.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"), RowCol.Columns, true, true)\n\n        //config side wall individually.\n        shape.chart.sideWall.thickness = 5\n        shape.chart.sideWall.format.fill.color.rgb = Color.GetLightGreen()\n        shape.chart.sideWall.format.line.color.rgb = Color.GetLightBlue()\n\n    ",
  "com.grapecity.documents.excel.examples.features.picture.DeletePicture": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val stream = this.getResourceStream(\"logo.png\")\n        try {\n            val picture = worksheet.shapes.addPicture(stream, ImageType.PNG, 20.0, 20.0, 100.0, 100.0)\n\n            //set picture size.\n            picture.widthInPixel = 700.0\n            picture.heightInPixel = 120.0\n            //config picture layout.\n            picture.fill.solid()\n            picture.fill.color.objectThemeColor = ThemeColor.Accent1\n\n            //delete picture.\n            picture.delete()\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.picture.PictureCut": "\n        val worksheet = workbook.worksheets.get(0)\n\n        val stream = this.getResourceStream(\"logo.png\")\n        try {\n\n            //Create a shape in worksheet, picture's range is getRange(\"A2:I6\")\n            val picture = worksheet.shapes.addPicture(stream, ImageType.PNG, 20.0, 20.0, 395.0, 60.0)\n            // getRange(\"A2:I6\"] must contain picture's range, cut a new picture to Range[\"J2:R6\")\n            worksheet.getRange(\"A2:I6\").cut(worksheet.getRange(\"J2\"))\n            //worksheet.getRange(\"A2:I6\"].cut(worksheet.Range[\"J2:R6\"));\n\n            //Cross sheet cut, cut a new shape to worksheet2's getRange(\"J2:R6\")\n            //IWorksheet worksheet2 = workbook.getWorksheets().add();\n            //worksheet.getRange(\"A2:I6\").cut(worksheet2.getRange(\"J2\"));\n            //worksheet.getRange(\"A2:I6\").cut(worksheet2.getRange(\"J2:R6\"));\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.picture.CreatePicture": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val stream = this.getResourceStream(\"logo.png\")\n        try {\n            val picture = worksheet.shapes.addPicture(stream, ImageType.PNG, 20.0, 20.0, 790.0, 120.0)\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.picture.PictureDuplicate": "\n        val worksheet = workbook.worksheets.get(0)\n\n        val stream = this.getResourceStream(\"logo.png\")\n        try {\n            //Create a shape in worksheet\n            val picture = worksheet.shapes.addPicture(stream, ImageType.PNG, 20.0, 20.0, 395.0, 60.0)\n\n            //Duplicate picture\n            val newPicture = picture.duplicate()\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.picture.PictureTransparency": "\n        val worksheet: IWorksheet = workbook.getWorksheets().get(0)\n        val stream = getResourceStream(\"logo.png\")\n        try {\n            val picture: IShape = worksheet.shapes.addPicture(stream, ImageType.PNG, 20.0, 20.0, 790.0, 120.0)\n\n            //Set picture's transparency as 60%.\n            picture.pictureFormat.transparency = 0.6\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.picture.PictureCopy": "\n        val worksheet = workbook.worksheets.get(0)\n\n        val stream = this.getResourceStream(\"logo.png\")\n        try {\n            //Create a shape in worksheet, picture's range is Range(\"A2:I6\")\n            val picture = worksheet.shapes.addPicture(stream, ImageType.PNG, 20.0, 20.0, 395.0, 60.0)\n            //Range(\"A2:I6\") must contain picture's range, copy a new picture to Range(\"J2:R6\")\n            worksheet.getRange(\"A2:I6\").copy(worksheet.getRange(\"J2\"))\n            //worksheet.getRange(\"A2:I6\").copy(worksheet.getRange(\"J2:R6\"));\n\n            //Cross sheet copy, copy a new shape to worksheet2's Range(\"J2:R6\")\n            //IWorksheet worksheet2 = workbook.getWorksheets().add();\n            //worksheet.getRange(\"A2:I6\").copy(worksheet2.getRange(\"J2\"));\n            //worksheet.getRange(\"A2:I6\").copy(worksheet2.getRange(\"J2:R6\"));\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.signatures.VerifySignatures": "\n        workbook.open(getResourceStream(\"xlsx/Signature.xlsx\"))\n        val signatures: ISignatureSet = workbook.getSignatures()\n        var signed = false\n        var valid = false\n        var certificate: X509Certificate? = null\n\n        // Verify the first signature\n        for (signature in signatures) {\n            if (signature.getIsSigned()) {\n                // Save the result in locals. You can print them later.\n                signed = true\n                certificate = signature.getDetails().getSignatureCertificate()\n                valid = signature.getIsValid()\n                break\n            }\n        }\n\n        // Verify the first certificate\n        var certificateIsValid = true\n\n        // Check expiration date and start date\n        try {\n            certificate!!.checkValidity()\n        } catch (e: CertificateExpiredException) {\n            certificateIsValid = false\n            return\n        } catch (e: CertificateNotYetValidException) {\n            certificateIsValid = false\n            return\n        }\n\n        // TODO: Verify the certificate chain\n\n        // Important:\n        // We don't know how to get certificate chain on this platform.\n        // Certificate verification needs to get certificate chain from additional places, \n        // because the embedded certificate doesn't include a complete certificate chain.\n        // On .NET platform, we can use\n        // System.Security.Cryptography.X509Certificates.X509Chain\n        // to get the complete certificate chain from Windows certificate storage or\n        // the OpenSSL based PowerShell certificate storage.\n        // There's no equivalent of X509Chain on this platform.\n        // The implementation of X509Chain can be found here:\n        // https://github.com/dotnet/runtime/tree/master/src/libraries/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography\n        // It supports Windows, Linux and Mac.\n        // But we don't think it's convertible to Java.\n        // Because it has pointer types, nullable reference types, \n        // ByRef-like value types and unsigned integer types.\n    ",
  "com.grapecity.documents.excel.examples.features.signatures.ExportSignatureLineToPdf": "\n        workbook.open(getResourceStream(\"xlsx/Signature.xlsx\"))\n    ",
  "com.grapecity.documents.excel.examples.features.signatures.CutSignatureLines": "\n        val activeSheet: IWorksheet = workbook.getActiveSheet()\n        val signature: ISignature = workbook.getSignatures().addSignatureLine(activeSheet, 100.0, 50.0)\n        val setup: ISignatureSetup = signature.getSetup()\n        setup.setShowSignDate(false)\n        setup.setAllowComments(false)\n        setup.setSigningInstructions(\"Please check the content before signing.\")\n        setup.setSuggestedSigner(\"Shinzo Nagama\")\n        setup.setSuggestedSignerEmail(\"shinzo.nagama@ea.com\")\n        setup.setSuggestedSignerLine2(\"Commander (Balanced)\")\n\n        // Cut signature line with Range.Cut\n        val srcRange: IRange = activeSheet.getRange(\"A1:I15\")\n        val destRange: IRange = activeSheet.getRange(\"A16:I30\")\n        srcRange.cut(destRange)\n    ",
  "com.grapecity.documents.excel.examples.features.signatures.DeleteSignatureFromSignatureLine": "\n        // This file contains 2 already signed signature lines and\n        // a not signed signature line.\n        val signedFile = getResourceStream(\"xlsx/SignatureLine2Signed1NotSigned.xlsx\")\n\n        // Use DigitalSignatureOnly mode, because the workbook was already signed.\n        // If you don't open it with digital signature only mode,\n        // all existing signatures will be removed after saving the workbook.\n        val openOption = XlsxOpenOptions()\n        openOption.setDigitalSignatureOnly(true)\n        workbook.open(signedFile, openOption)\n\n        // Remove signature of the first signed signature line.\n        for (signature in workbook.getSignatures()) {\n            if (signature.getIsSignatureLine() && signature.getIsSigned()) {\n                // Remove digital signature.\n                // The signature line will not be removed from the SignatureSet\n                // in digital signature only mode.\n                // Because signature lines are shapes.\n                signature.delete()\n                break\n            }\n        }\n\n        // Commit signatures\n    ",
  "com.grapecity.documents.excel.examples.features.signatures.AddNonVisibleSignatureToSignedWorkbook": "\n        // This file contains 2 already signed signature lines and\n        // a not signed signature line.\n        val signedFile = getResourceStream(\"xlsx/SignatureLine2Signed1NotSigned.xlsx\")\n\n        // Use DigitalSignatureOnly mode, because the workbook was already signed.\n        // If you don't open it with digital signature only mode,\n        // all existing signatures will be removed after saving the workbook.\n        val openOption = XlsxOpenOptions()\n        openOption.setDigitalSignatureOnly(true)\n        workbook.open(signedFile, openOption)\n\n        // TODO: Use your certificate.\n        val ks: KeyStore\n        ks = try {\n            KeyStore.getInstance(\"pkcs12\")\n        } catch (e: KeyStoreException) {\n            throw RuntimeException(e)\n        }\n\n        // TODO: Use your password.\n        val password = \"<your password>\"\n        val passwordChars = password.toCharArray()\n        val pfxFileKey = \"<your certificate file>\"\n        val pfxStrm = getResourceStream(pfxFileKey)\n        try {\n            ks.load(pfxStrm, passwordChars)\n        } catch (e: NoSuchAlgorithmException) {\n            throw RuntimeException(e)\n        } catch (e: CertificateException) {\n            throw RuntimeException(e)\n        } catch (e: IOException) {\n            throw RuntimeException(e)\n        }\n\n        // TODO: Fill details with your information.\n        val details = SignatureDetails()\n        details.setAddress1(\"<your address>\")\n        details.setAddress2(\"<address 2>\")\n        details.setSignatureComments(\"Final\")\n        details.setCity(\"<your city>\")\n        details.setStateOrProvince(\"<your state or province>\")\n        details.setPostalCode(\"<your postal code>\")\n        details.setCountryName(\"<your country or region>\")\n        details.setClaimedRole(\"<your role>\")\n        details.setCommitmentTypeDescription(\"Approved\")\n        details.setCommitmentTypeQualifier(\"Final\")\n\n        // Add signature to this workbook.\n        val signature: ISignature = workbook.getSignatures().addNonVisibleSignature()\n        signature.sign(ks, password, details)\n\n        // Commit signatures\n        workbook.save(\"AddNonVisibleSignatureToSignedWorkbook.xlsx\")\n    ",
  "com.grapecity.documents.excel.examples.features.signatures.MoveSignatureLines": "\n        val activeSheet: IWorksheet = workbook.getActiveSheet()\n        val signatures: ISignatureSet = workbook.getSignatures()\n\n        // Prepare data\n        val signatureShinzo: ISignature = signatures.addSignatureLine(activeSheet, 100.0, 50.0)\n        val setup: ISignatureSetup = signatureShinzo.getSetup()\n        setup.setShowSignDate(false)\n        setup.setAllowComments(false)\n        setup.setSigningInstructions(\"Please check the content before signing.\")\n        setup.setSuggestedSigner(\"Shinzo Nagama\")\n        setup.setSuggestedSignerEmail(\"shinzo.nagama@ea.com\")\n        setup.setSuggestedSignerLine2(\"Commander (Balanced)\")\n\n        // Move signature line\n        val signatureLineShape: IShape = signatureShinzo.getSignatureLineShape()\n        signatureLineShape.setTop(signatureLineShape.getTop() + 100)\n        signatureLineShape.setLeft(signatureLineShape.getLeft() + 50)\n    ",
  "com.grapecity.documents.excel.examples.features.signatures.AddSignatureLines": "\n        val signature: ISignature = workbook.getSignatures().addSignatureLine(\n                workbook.getActiveSheet(), 100.0, 50.0)\n        val setup: ISignatureSetup = signature.getSetup()\n        setup.setShowSignDate(true)\n        setup.setAllowComments(true)\n        setup.setSigningInstructions(\"<your signing instructions>\")\n        setup.setSuggestedSigner(\"<signer's name>\")\n        setup.setSuggestedSignerEmail(\"example@microsoft.com\")\n        setup.setSuggestedSignerLine2(\"<signer's title>\")\n    ",
  "com.grapecity.documents.excel.examples.features.signatures.ListSignatureLines": "\n        val activeSheet: IWorksheet = workbook.getActiveSheet()\n        val signatures: ISignatureSet = workbook.getSignatures()\n\n        // Prepare data\n        val signatureShinzo: ISignature = signatures.addSignatureLine(activeSheet, 100.0, 50.0)\n        val setup1: ISignatureSetup = signatureShinzo.getSetup()\n        setup1.setShowSignDate(false)\n        setup1.setAllowComments(false)\n        setup1.setSigningInstructions(\"Please check the content before signing.\")\n        setup1.setSuggestedSigner(\"Shinzo Nagama\")\n        setup1.setSuggestedSignerEmail(\"shinzo.nagama@ea.com\")\n        setup1.setSuggestedSignerLine2(\"Commander (Balanced)\")\n        val signatureKenji: ISignature = signatures.addSignatureLine(activeSheet, 100.0, 350.0)\n        val setup2: ISignatureSetup = signatureKenji.getSetup()\n        setup2.setShowSignDate(true)\n        setup2.setAllowComments(true)\n        setup2.setSigningInstructions(\"Please check the content before signing!\")\n        setup2.setSuggestedSigner(\"Kenji Tenzai\")\n        setup2.setSuggestedSignerEmail(\"kenji.tenzai@ea.com\")\n        setup2.setSuggestedSignerLine2(\"Commander (Mecha)\")\n\n        // List signatures with indexes\n        for (i in 0 until signatures.getCount()) {\n            val signature: ISignature = signatures.get(i)\n            // Insert your code here\n        }\n        for (signature in signatures) {\n            // Insert your code here\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.signatures.DeleteNonVisibleSignature": "\n        // This file contains 2 already signed signature lines,\n        // a not signed signature line, and a non-visible signature.\n        val signedFile = getResourceStream(\"xlsx/MixedDigitalSignatures.xlsx\")\n\n        // Use DigitalSignatureOnly mode, because the workbook was already signed.\n        // If you don't open it with digital signature only mode,\n        // all existing signatures will be removed after saving the workbook.\n        val openOption = XlsxOpenOptions()\n        openOption.setDigitalSignatureOnly(true)\n        workbook.open(signedFile, openOption)\n\n        // Remove the first non-visible signature.\n        for (signature in workbook.getSignatures()) {\n            if (!signature.getIsSignatureLine() && signature.getIsSigned()) {\n                // Remove digital signature.\n                // The signature will be removed from the SignatureSet.\n                signature.delete()\n                break\n            }\n        }\n\n        // Commit signatures\n    ",
  "com.grapecity.documents.excel.examples.features.signatures.CopySignatureLines": "\n        val activeSheet: IWorksheet = workbook.getActiveSheet()\n        val signature: ISignature = workbook.getSignatures().addSignatureLine(activeSheet, 100.0, 50.0)\n        val setup: ISignatureSetup = signature.getSetup()\n        setup.setShowSignDate(false)\n        setup.setAllowComments(false)\n        setup.setSigningInstructions(\"Please check the content before signing.\")\n        setup.setSuggestedSigner(\"Shinzo Nagama\")\n        setup.setSuggestedSignerEmail(\"shinzo.nagama@ea.com\")\n        setup.setSuggestedSignerLine2(\"Commander (Balanced)\")\n\n        // Copy signature line with Range.Copy\n        val srcRange: IRange = activeSheet.getRange(\"A1:I15\")\n        val destRange: IRange = activeSheet.getRange(\"A16:I30\")\n        srcRange.copy(destRange)\n\n        // Copy signature line with Shape.Duplicate\n        signature.getSignatureLineShape().duplicate()\n\n        // Copy signature line with Worksheet.Copy\n        activeSheet.copy()\n    ",
  "com.grapecity.documents.excel.examples.features.signatures.SignSignatureLine": "\n        val signature: ISignature = workbook.getSignatures().addSignatureLine(workbook.getActiveSheet(), 100.0, 50.0)\n        val setup: ISignatureSetup = signature.getSetup()\n        setup.setShowSignDate(true)\n        setup.setAllowComments(true)\n        setup.setSigningInstructions(\"<your signing instructions>\")\n        setup.setSuggestedSigner(\"<signer's name>\")\n        setup.setSuggestedSignerEmail(\"example@microsoft.com\")\n        setup.setSuggestedSignerLine2(\"<signer's title>\")\n        val details = SignatureDetails()\n        details.setAddress1(\"<your address>\")\n        details.setAddress2(\"<address 2>\")\n        details.setSignatureComments(\"Final\")\n        details.setCity(\"<your city>\")\n        details.setStateOrProvince(\"<your state or province>\")\n        details.setPostalCode(\"<your postal code>\")\n        details.setCountryName(\"<your country or region>\")\n        details.setClaimedRole(\"<your role>\")\n        details.setCommitmentTypeDescription(\"Approved\")\n        details.setCommitmentTypeQualifier(\"Final\")\n        try {\n            val ks = KeyStore.getInstance(\"pkcs12\")\n            val password = \"<your password>\"\n            val passwordChars = password.toCharArray()\n            val pfxFileKey = \"<your certificate file>\"\n            val pfxStrm = getResourceStream(pfxFileKey)\n            try {\n                ks.load(pfxStrm, passwordChars)\n            } catch (e: NoSuchAlgorithmException) {\n                throw RuntimeException(e)\n            } catch (e: CertificateException) {\n                throw RuntimeException(e)\n            } catch (e: IOException) {\n                throw RuntimeException(e)\n            }\n            signature.sign(ks, password, \"<your name>\", details)\n            // Commit signature\n            workbook.save(\"SignSignatureLine.xlsx\")\n        } catch (e: KeyStoreException) {\n            throw RuntimeException(e)\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.signatures.CountersignSignature": "\n        val signature: ISignature = workbook.getSignatures().addSignatureLine(workbook.getActiveSheet(), 100.0, 50.0)\n        val setup: ISignatureSetup = signature.getSetup()\n        setup.setShowSignDate(true)\n        setup.setAllowComments(true)\n        setup.setSigningInstructions(\"<your signing instructions>\")\n        setup.setSuggestedSigner(\"<signer's name>\")\n        setup.setSuggestedSignerEmail(\"example@microsoft.com\")\n        setup.setSuggestedSignerLine2(\"<signer's title>\")\n        val details = SignatureDetails()\n        details.setAddress1(\"<your address>\")\n        details.setAddress2(\"<address 2>\")\n        details.setSignatureComments(\"Final\")\n        details.setCity(\"<your city>\")\n        details.setStateOrProvince(\"<your state or province>\")\n        details.setPostalCode(\"<your postal code>\")\n        details.setCountryName(\"<your country or region>\")\n        details.setClaimedRole(\"<your role>\")\n        details.setCommitmentTypeDescription(\"Approved\")\n        details.setCommitmentTypeQualifier(\"Final\")\n        try {\n            val ks = KeyStore.getInstance(\"pkcs12\")\n            val password = \"<your password>\"\n            val passwordChars = password.toCharArray()\n            val pfxFileKey = \"<your certificate file>\"\n            val pfxStrm = getResourceStream(pfxFileKey)\n            try {\n                ks.load(pfxStrm, passwordChars)\n            } catch (e: NoSuchAlgorithmException) {\n                throw RuntimeException(e)\n            } catch (e: CertificateException) {\n                throw RuntimeException(e)\n            } catch (e: IOException) {\n                throw RuntimeException(e)\n            }\n            signature.sign(ks, password, \"<your name>\", details)\n\n            // Reopen the workbook to commit signature\n            val outStrm = ByteArrayOutputStream()\n            workbook.save(outStrm)\n            val inStrm = ByteArrayInputStream(outStrm.toByteArray())\n            workbook.open(inStrm)\n\n            // Modify\n            workbook.getWorksheets().get(\"Sheet1\").getRange(\"A1\").setValue(\"Modified\")\n\n            // Countersign\n            workbook.getSignatures().get(0).countersign(ks, password)\n\n            // Commit signature\n            workbook.save(\"CountersignSignature.xlsx\")\n        } catch (e: KeyStoreException) {\n            throw RuntimeException(e)\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.signatures.SignWorkbook": "\n        val signature: ISignature = workbook.getSignatures().addNonVisibleSignature()\n        val details = SignatureDetails()\n        details.setAddress1(\"<your address>\")\n        details.setAddress2(\"<address 2>\")\n        details.setSignatureComments(\"Final\")\n        details.setCity(\"<your city>\")\n        details.setStateOrProvince(\"<your state or province>\")\n        details.setPostalCode(\"<your postal code>\")\n        details.setCountryName(\"<your country or region>\")\n        details.setClaimedRole(\"<your role>\")\n        details.setCommitmentTypeDescription(\"Approved\")\n        details.setCommitmentTypeQualifier(\"Final\")\n        try {\n            val ks = KeyStore.getInstance(\"pkcs12\")\n            val password = \"<your password>\"\n            val passwordChars = password.toCharArray()\n            val pfxFileKey = \"<your certificate file>\"\n            val pfxStrm = getResourceStream(pfxFileKey)\n            try {\n                ks.load(pfxStrm, passwordChars)\n            } catch (e: NoSuchAlgorithmException) {\n                throw RuntimeException(e)\n            } catch (e: CertificateException) {\n                throw RuntimeException(e)\n            } catch (e: IOException) {\n                throw RuntimeException(e)\n            }\n            signature.sign(ks, password, details)\n            // Commit signature\n            workbook.save(\"SignWorkbook.xlsx\")\n        } catch (e: KeyStoreException) {\n            throw RuntimeException(e)\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.signatures.SignExistingSignatureLine": "\n        // This file contains 2 already signed signature lines and\n        // a not signed signature line.\n        val signedFile = getResourceStream(\"xlsx/SignatureLine2Signed1NotSigned.xlsx\")\n\n        // Use DigitalSignatureOnly mode, because the workbook was already signed.\n        // If you don't open it with digital signature only mode,\n        // all existing signatures will be removed after saving the workbook.\n        val openOption = XlsxOpenOptions()\n        openOption.setDigitalSignatureOnly(true)\n        workbook.open(signedFile, openOption)\n\n        // Sign the first not signed signature line.\n        for (signature in workbook.getSignatures()) {\n            if (signature.getIsSignatureLine() && !signature.getIsSigned()) {\n                // TODO: Use your certificate.\n                var ks: KeyStore\n                ks = try {\n                    KeyStore.getInstance(\"pkcs12\")\n                } catch (e: KeyStoreException) {\n                    throw RuntimeException(e)\n                }\n\n                // TODO: Use your password.\n                val password = \"<your password>\"\n                val passwordChars = password.toCharArray()\n                val pfxFileKey = \"<your certificate file>\"\n                val pfxStrm = getResourceStream(pfxFileKey)\n                try {\n                    ks.load(pfxStrm, passwordChars)\n                } catch (e: NoSuchAlgorithmException) {\n                    throw RuntimeException(e)\n                } catch (e: CertificateException) {\n                    throw RuntimeException(e)\n                } catch (e: IOException) {\n                    throw RuntimeException(e)\n                }\n\n                // TODO: Fill details with your information.\n                val details = SignatureDetails()\n                details.setAddress1(\"<your address>\")\n                details.setAddress2(\"<address 2>\")\n                details.setSignatureComments(\"Final\")\n                details.setCity(\"<your city>\")\n                details.setStateOrProvince(\"<your state or province>\")\n                details.setPostalCode(\"<your postal code>\")\n                details.setCountryName(\"<your country or region>\")\n                details.setClaimedRole(\"<your role>\")\n                details.setCommitmentTypeDescription(\"Approved\")\n                details.setCommitmentTypeQualifier(\"Final\")\n\n                // TODO: Use your name or your signature image.\n                signature.sign(ks, password, \"<your name>\", details)\n            }\n        }\n\n        // Commit signatures\n        workbook.save(\"SignExistingSignatureLine.xlsx\")\n    ",
  "com.grapecity.documents.excel.examples.features.signatures.DeleteSignatureLines": "\n        val activeSheet: IWorksheet = workbook.getActiveSheet()\n\n        // Create a anonymous class for creating new signature line with predefined data\n        val newSignatureLine: Callable<ISignature> = Callable<Any> {\n            val signature: ISignature = workbook.getSignatures().addSignatureLine(activeSheet, 100.0, 50.0)\n            val setup: ISignatureSetup = signature.getSetup()\n            setup.setShowSignDate(false)\n            setup.setAllowComments(false)\n            setup.setSigningInstructions(\"Please check the content before signing.\")\n            setup.setSuggestedSigner(\"Shinzo Nagama\")\n            setup.setSuggestedSignerEmail(\"shinzo.nagama@ea.com\")\n            setup.setSuggestedSignerLine2(\"Commander (Balanced)\")\n            signature\n        }\n\n        // Create a new signature line and delete with Signature.Delete\n        var signatureForTest: ISignature\n        signatureForTest = try {\n            newSignatureLine.call()\n        } catch (e: Exception) {\n            throw RuntimeException(e)\n        }\n        signatureForTest.delete()\n\n        // Create a new signature line and delete with Shape.Delete\n        signatureForTest = try {\n            newSignatureLine.call()\n        } catch (e: Exception) {\n            throw RuntimeException(e)\n        }\n        val signatureLineShape: IShape = signatureForTest.getSignatureLineShape()\n        signatureLineShape.delete()\n    ",
  "com.grapecity.documents.excel.examples.features.grouping.RemoveSubtotal": "\n\n        val targetRange = workbook.activeSheet.getRange(\"A1:C9\")\n        // Set data\n        targetRange.setValue(arrayOf(arrayOf(\"Player\", \"Side\", \"Commander\"),\n            arrayOf(1, \"Soviet\", \"AI\"), arrayOf(2, \"Soviet\", \"AI\"), arrayOf(3, \"Soviet\", \"Human\"),\n            arrayOf(4, \"Allied\", \"Human\"), arrayOf(5, \"Allied\", \"Human\"), arrayOf(6, \"Allied\", \"AI\"),\n            arrayOf(7, \"Empire\", \"AI\"), arrayOf(8, \"Empire\", \"AI\")))\n\n        // Subtotal\n        targetRange.subtotal(2, // Side\n                ConsolidationFunction.Count, intArrayOf(2) // Side\n        )\n\n        workbook.activeSheet.getRange(\"A1:C13\").removeSubtotal()\n    ",
  "com.grapecity.documents.excel.examples.features.grouping.ShowSpecificLevel": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:N\").group()\n        worksheet.getRange(\"A:F\").group()\n        worksheet.getRange(\"A:C\").group()\n\n        worksheet.getRange(\"Q:Z\").group()\n        worksheet.getRange(\"Q:T\").group()\n\n        //level 3 and level 4 will be collapsed. level 2 and level 1 expand.\n        worksheet.outline.showLevels(0, 2)\n\n    ",
  "com.grapecity.documents.excel.examples.features.grouping.AddSubtotal": "\n\n        val targetRange = workbook.activeSheet.getRange(\"A1:C9\")\n        // Set data\n        targetRange.setValue(arrayOf(arrayOf(\"Player\", \"Side\", \"Commander\"),\n            arrayOf(1, \"Soviet\", \"AI\"), arrayOf(2, \"Soviet\", \"AI\"), arrayOf(3, \"Soviet\", \"Human\"),\n            arrayOf(4, \"Allied\", \"Human\"), arrayOf(5, \"Allied\", \"Human\"), arrayOf(6, \"Allied\", \"AI\"),\n            arrayOf(7, \"Empire\", \"AI\"), arrayOf(8, \"Empire\", \"AI\")))\n\n        // Subtotal\n        targetRange.subtotal(2, // Side\n                ConsolidationFunction.Count,\n                intArrayOf(2) // Side\n        )\n\n        targetRange.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.grouping.ClearOutline": "\n\n        val worksheet = workbook.worksheets.get(0)\n        //1:20 rows' outline level will be 2.\n        worksheet.getRange(\"1:20\").group()\n        //1:10 rows' outline level will be 3.\n        worksheet.getRange(\"1:10\").group()\n\n        //1:20 rows' outline level will be 1.\n        worksheet.getRange(\"1:20\").clearOutline()\n\n    ",
  "com.grapecity.documents.excel.examples.features.grouping.AddSubtotalAdvanced": "\n\n        val targetRange = workbook.activeSheet.getRange(\"A1:C9\")\n        // Set data\n        targetRange.setValue(arrayOf(arrayOf(\"Grade\", \"Class\", \"Score\", \"Student ID\"),\n            arrayOf(1, 1, 93, 1), arrayOf(1, 1, 87, 2), arrayOf(1, 2, 97, 3), arrayOf(1, 2, 95, 4),\n            arrayOf(2, 1, 83, 5), arrayOf(2, 1, 87, 6), arrayOf(2, 2, 96, 7), arrayOf(2, 2, 83, 8)))\n\n        // Group by Grade select Average(Score)\n        targetRange.subtotal(1, // Grade\n                ConsolidationFunction.Average, intArrayOf(3), // Score\n                false, true)\n\n        // Group by Class select Average(Score)\n        targetRange.subtotal(2, // Class\n                ConsolidationFunction.Average, intArrayOf(3), // Score\n                false)\n\n        workbook.activeSheet.getRange(\"C:C\").setNumberFormat(\"0;0;0;@\")\n\n        targetRange.autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.grouping.CollapseGroup": "\n\n        val worksheet = workbook.worksheets.get(0)\n        //1:20 rows' outline level will be 2.\n        worksheet.getRange(\"1:20\").group()\n        //1:10 rows' outline level will be 3.\n        worksheet.getRange(\"1:10\").group()\n\n        //1:20 rows' outline level will be 1.\n        worksheet.getRange(\"11:11\").showDetail = false\n\n    ",
  "com.grapecity.documents.excel.examples.features.grouping.OutlineColumn": "\n\n        val worksheet = workbook.getWorksheets().get(0)\n\n        //Set data.\n        val data = arrayOf(arrayOf(\"Preface\", \"1\", 1, 0), arrayOf(\"Java SE5 and SE6\", \"1.1\", 2, 1), arrayOf(\"Java SE6\", \"1.1.1\", 2, 2), arrayOf(\"The 4th edition\", \"1.2\", 2, 1), arrayOf(\"Changes\", \"1.2.1\", 3, 2), arrayOf(\"Note on the cover design\", \"1.3\", 4, 1), arrayOf(\"Acknowledgements\", \"1.4\", 4, 1), arrayOf(\"Introduction\", \"2\", 9, 0), arrayOf(\"Prerequisites\", \"2.1\", 9, 1), arrayOf(\"Learning Java\", \"2.2\", 10, 1), arrayOf(\"Goals\", \"2.3\", 10, 1), arrayOf(\"Teaching from this book\", \"2.4\", 11, 1), arrayOf(\"JDK HTML documentation\", \"2.5\", 11, 1), arrayOf(\"Exercises\", \"2.6\", 12, 1), arrayOf(\"Foundations for Java\", \"2.7\", 12, 1), arrayOf(\"Source code\", \"2.8\", 12, 1), arrayOf(\"Coding standards\", \"2.8.1\", 14, 2), arrayOf(\"Errors\", \"2.9\", 14, 1), arrayOf(\"Introduction to Objects\", \"3\", 15, 0), arrayOf(\"The progress of abstraction\", \"3.1\", 15, 1), arrayOf(\"An object has an interface\", \"3.2\", 17, 1), arrayOf(\"An object provides services\", \"3.3\", 18, 1), arrayOf(\"The hidden implementation\", \"3.4\", 19, 1), arrayOf(\"Reusing the implementation\", \"3.5\", 20, 1), arrayOf(\"Inheritance\", \"3.6\", 21, 1), arrayOf(\"Is-a vs. is-like-a relationships\", \"3.6.1\", 24, 2), arrayOf(\"Interchangeable objects with polymorphism\", \"3.7\", 25, 1), arrayOf(\"The singly rooted hierarchy\", \"3.8\", 28, 1), arrayOf(\"Containers\", \"3.9\", 28, 1), arrayOf(\"Parameterized types (Generics)\", \"3.10\", 29, 1), arrayOf(\"Object creation & lifetime\", \"3.11\", 30, 1), arrayOf(\"Exception handling: dealing with errors\", \"3.12\", 31, 1), arrayOf(\"Concurrent programming\", \"3.13\", 32, 1), arrayOf(\"Java and the Internet\", \"3.14\", 33, 1), arrayOf(\"What is the Web?\", \"3.14.1\", 33, 2), arrayOf(\"Client-side programming\", \"3.14.2\", 34, 2), arrayOf(\"Server-side programming\", \"3.14.3\", 38, 2), arrayOf(\"Summary\", \"3.15\", 38, 1))\n        worksheet.getRange(\"A1:C38\").setValue(data)\n\n        //Set ColumnWidth.\n        worksheet.getRange(\"A:A\").setColumnWidthInPixel(310.0)\n        worksheet.getRange(\"B:C\").setColumnWidthInPixel(150.0)\n\n        //Set IndentLevel.\n        for (i in data.indices) {\n            worksheet.getRange(i, 0).setIndentLevel(data[i][3] as Int)\n        }\n\n        //Show the summary row above the detail rows.\n        worksheet.getOutline().setSummaryRow(SummaryRow.Above)\n\n        //Don't show the row outline when interacting with SJS, the exported excel file still show the row outline.\n        worksheet.setShowRowOutline(false)\n\n        //Set outline column, the corresponding row outlines will also be automatically created.\n        worksheet.getOutlineColumn().setColumnIndex(0)\n        worksheet.getOutlineColumn().setShowCheckBox(true)\n        worksheet.getOutlineColumn().setShowImage(true)\n        worksheet.getOutlineColumn().setMaxLevel(2)\n        worksheet.getOutlineColumn().getImages().add(ImageSource(this.getResourceStream(\"archiverFolder.png\"), ImageType.PNG))\n        worksheet.getOutlineColumn().getImages().add(ImageSource(this.getResourceStream(\"newFloder.png\"), ImageType.PNG))\n        worksheet.getOutlineColumn().getImages().add(ImageSource(this.getResourceStream(\"docFile.png\"), ImageType.PNG))\n        worksheet.getOutlineColumn().setCollapseIndicator(ImageSource(this.getResourceStream(\"decreaseIndicator.png\"), ImageType.PNG))\n        worksheet.getOutlineColumn().setExpandIndicator(ImageSource(this.getResourceStream(\"increaseIndicator.png\"), ImageType.PNG))\n        worksheet.getOutlineColumn().setCheckStatus(0, true)\n        worksheet.getOutlineColumn().setCollapsed(1, true)\n\n        //MSExcel does not support the outline column, so when exporting to the excel file,\n        //The checkbox, level images, expand&collapse images are not visible.\n        //But the data is seen with heirarchical structure.\n    ",
  "com.grapecity.documents.excel.examples.features.grouping.UngroupRange": "\n\n        val worksheet = workbook.worksheets.get(0)\n        //1:20 rows' outline level will be 2.\n        worksheet.getRange(\"1:20\").group()\n        //1:10 rows' outline level will be 3.\n        worksheet.getRange(\"1:10\").group()\n\n        //1:10 rows' outline level will be 2.\n        worksheet.getRange(\"1:10\").ungroup()\n        //1:20 rows' outline level will be 1.\n        worksheet.getRange(\"1:20\").ungroup()\n\n    ",
  "com.grapecity.documents.excel.examples.features.grouping.CreateRangeGroup": "\n\n        val worksheet = workbook.worksheets.get(0)\n        //1:20 rows' outline level will be 2.\n        worksheet.getRange(\"1:20\").group()\n        //1:10 rows' outline level will be 3.\n        worksheet.getRange(\"1:10\").group()\n\n        //A:N columns' outline level will be 2.\n        worksheet.getRange(\"A:N\").group()\n        //A:E columns' outline level will be 3.\n        worksheet.getRange(\"A:E\").group()\n\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.PrintTransparentCell": "\n            val worksheet = workbook.getWorksheets().get(0)\n\n            //Initialize worksheet's values.\n            worksheet.getRange(\"A1\").setValue(\"Info from Acme Institute of Health:\")\n            worksheet.getRange(\"B2\").setValue(\"BLOOD PRESSURE TRACKER\")\n            worksheet.getRange(\"B4:F13\").setValue(arrayOf<Array<Any?>>(arrayOf<Any?>(\"NAME\", null, null, null, \"JAMES HILL\"), arrayOf<Any?>(null, null, null, null, null), arrayOf<Any?>(null, null, null, \"Systolic\", \"Diastolic\"), arrayOf<Any?>(\"TARGET BLOOD PRESSURE\", null, null, 120, 80), arrayOf<Any?>(null, null, null, null, null), arrayOf<Any?>(null, null, null, \"Systolic\", \"Diastolic\"), arrayOf<Any?>(\"CALL PHYSICIAN IF ABOVE\", null, null, 140, 90), arrayOf<Any?>(null, null, null, null, null), arrayOf<Any?>(null, null, null, null, null), arrayOf<Any?>(\"PHYSICIAN PHONE NUMBER\", null, null, \"(001))5104234242\", null)))\n            worksheet.getRange(\"A1\").getFont().setSize(25.toDouble())\n\n            //Set row height.\n            worksheet.setStandardHeight(12.75)\n            worksheet.setStandardWidth(8.43)\n            worksheet.getRows().get(1).setRowHeight(32.25)\n            worksheet.getRows().get(2).setRowHeight(13.5)\n            worksheet.getRows().get(3).setRowHeight(18.75)\n            worksheet.getRows().get(6).setRowHeight(18.75)\n            worksheet.getRows().get(9).setRowHeight(18.75)\n            worksheet.getRows().get(12).setRowHeight(18.75)\n            worksheet.getRows().get(15).setRowHeight(19.5)\n            worksheet.getRows().get(16).setRowHeight(13.5)\n            worksheet.getRows().get(33).setRowHeight(19.5)\n            worksheet.getRows().get(34).setRowHeight(13.5)\n\n            //Set column width.\n            worksheet.getColumns().get(0).setColumnWidth(1.7109375)\n            worksheet.getColumns().get(1).setColumnWidth(12.140625)\n            worksheet.getColumns().get(2).setColumnWidth(12.140625)\n            worksheet.getColumns().get(3).setColumnWidth(12.140625)\n            worksheet.getColumns().get(4).setColumnWidth(11.85546875)\n            worksheet.getColumns().get(5).setColumnWidth(12.7109375)\n\n            // Set the transparency value of the background color of range[\"A1:G20\"] to 50.\n            worksheet.getRange(\"A1:G20\").getInterior().setColor(Color.FromArgb(50, 255, 0, 0))\n\n        // Add a background picture.\n        val stream = this.getResourceStream(\"AcmeLogo-vertical-250px.png\")\n        try {\n            val picture = worksheet.getBackgroundPictures().addPictureInPixel(stream, ImageType.JPG, 10.0, 10.0, 300.0, 150.0)\n        } catch (e: IOException) {\n            // TODO Auto-generated catch block\n            e.printStackTrace()\n        }\n\n        // You must create a pdfSaveOptions object before using PrintTransparentCell.\n        val pdfSaveOptions = PdfSaveOptions()\n\n        // Set print the transparency of cell's background color, so the background picture will come out in the back.\n        pdfSaveOptions.setPrintTransparentCell(true)\n\n        //Save the workbook into pdf file.\n        workbook.save(outputStream, pdfSaveOptions)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.SetFontsFolderPath": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        //set style.\r\n        sheet.getRange(\"A1\").value = \"Sheet1\"\r\n        sheet.getRange(\"A1\").font.name = \"Wide Latin\"\r\n        sheet.getRange(\"A1\").font.color = Color.GetRed()\r\n        sheet.getRange(\"A1\").interior.color = Color.GetGreen()\r\n\r\n        //specify font path.\r\n        Workbook.FontsFolderPath = \"/var/usr/public/Fonts\"\r\n\r\n        //        //get the used fonts list in workbook, the list are:\"Wide Latin\", \"Calibri\"\r\n        val fonts = workbook.usedFonts\r\n\r\n        //change the path to real export path when save.\r\n        sheet.save(\"dest.pdf\", SaveFileFormat.Pdf)\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.SaveSparklinesToPDF": "\r\n        val data = arrayOf(arrayOf<Any?>(\"Customer\", \"0-30 Days\", \"30-60 Days\", \"60-90 Days\", \">90 Days\"), arrayOf(\"Customer A\", 1200.15, 1916.18, 1105.23, 1806.53), arrayOf(\"Customer B\", 896.23, 1005.53, 1800.56, 1150.49), arrayOf(\"Customer C\", 827.63, 1009.23, 1869.23, 1002.56))\r\n\r\n        val worksheet = workbook.worksheets.get(0)\r\n        worksheet.getRange(\"B2:E5\").value = data\r\n        worksheet.getRange(\"B:F\").columnWidth = 15.0\r\n        worksheet.getRange(\"B:E\").horizontalAlignment = HorizontalAlignment.Center\r\n        val table = worksheet.tables.add(worksheet.getRange(\"B2:F5\"), true)\r\n        table.tableStyle = workbook.tableStyles.get(\"TableStyleMedium3\")\r\n        table.columns.get(4).name = \"Sparklines\"\r\n\r\n        //create a new group of sparklines.\r\n        worksheet.getRange(\"F3\").sparklineGroups.add(SparkType.Line, \"C3:E3\")\r\n        worksheet.getRange(\"F4\").sparklineGroups.add(SparkType.Column, \"C4:E4\")\r\n        worksheet.getRange(\"F5\").sparklineGroups.add(SparkType.ColumnStacked100, \"C5:E5\")\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.SaveTable": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        //Add Table\r\n        val table = sheet.tables.add(sheet.getRange(\"B5:G16\"), true)\r\n        table.showTotals = true\r\n\r\n        //Set values\r\n        val data = intArrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\r\n        sheet.getRange(\"C6:C16\").value = data\r\n        sheet.getRange(\"D6:D16\").value = data\r\n\r\n        //Set total functions\r\n        table.columns.get(1).totalsCalculation = TotalsCalculation.Average\r\n        table.columns.get(2).totalsCalculation = TotalsCalculation.Sum\r\n\r\n        //Create custom table style\r\n        val customTableStyle = workbook.tableStyles.get(\"TableStyleMedium10\").duplicate()\r\n\r\n        val wholeTableStyle = customTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable)\r\n        wholeTableStyle.font.italic = true\r\n        wholeTableStyle.borders.get(BordersIndex.EdgeTop).themeColor = ThemeColor.Accent1\r\n        wholeTableStyle.borders.get(BordersIndex.EdgeTop).lineStyle = BorderLineStyle.Thick\r\n        wholeTableStyle.borders.get(BordersIndex.EdgeRight).themeColor = ThemeColor.Accent1\r\n        wholeTableStyle.borders.get(BordersIndex.EdgeRight).lineStyle = BorderLineStyle.Thick\r\n        wholeTableStyle.borders.get(BordersIndex.EdgeBottom).themeColor = ThemeColor.Accent1\r\n        wholeTableStyle.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thick\r\n        wholeTableStyle.borders.get(BordersIndex.EdgeLeft).themeColor = ThemeColor.Accent1\r\n        wholeTableStyle.borders.get(BordersIndex.EdgeLeft).lineStyle = BorderLineStyle.Thick\r\n\r\n        val firstRowStripStyle = customTableStyle.tableStyleElements.get(TableStyleElementType.FirstRowStripe)\r\n        firstRowStripStyle.font.bold = true\r\n\r\n        //Apply custom style to table\r\n        table.tableStyle = customTableStyle\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.SaveSheetBackgroundToPDF": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1\").setValue(\"GrapeCity Documents for Excel\")\n        worksheet.getRange(\"A1\").font.size = 25.0\n\n        //Set a background image for worksheet\n        val inputStream = this.getResourceStream(\"logo.png\")\n        try {\n            val bytes = ByteArray(inputStream!!.available())\n            inputStream!!.read(bytes, 0, bytes.size)\n            worksheet.backgroundPicture = bytes\n        } catch (ioe: IOException) {\n            ioe.printStackTrace()\n        }\n\n        val pdfSaveOptions = PdfSaveOptions()\n        //Print the background image when saving pdf.\n        //The background image will be centered on every page of the sheet.\n        pdfSaveOptions.printBackgroundPicture = true\n\n        //Save the workbook into pdf file.\n        workbook.save(outputStream, pdfSaveOptions)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.ShrinkToFitForWrappedText": "\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.pageSetup.printGridlines = true\n        worksheet.pageSetup.printHeadings = true\n\n        //\"A1\" is ordinary wrapped text.\n        worksheet.getRange(\"A1\").wrapText = true\n        worksheet.getRange(\"A1\").value = \"GrapeCity Documents for Excel\"\n        worksheet.getRange(\"A1\").rowHeight = 38.0\n        worksheet.getRange(\"A1\").columnWidth = 9.0\n\n        //The wrapped text \"A2\" will be shrink to fit.\n        //worksheet.Range[\"A2\"].Interior.Color = Color.LightGreen;\n        worksheet.getRange(\"A2\").wrapText = true\n        worksheet.getRange(\"A2\").shrinkToFit = true\n        worksheet.getRange(\"A2\").value = \"GrapeCity Documents for Excel\"\n        worksheet.getRange(\"A2\").rowHeight = 38.0\n\n        //You must create a pdfSaveOptions object before using ShrinkToFitSettings.\n        val pdfSaveOptions = PdfSaveOptions()\n\n        //Shrink the wrapped text within the cell with existing row height/column width, while exporting to PDF.\n        pdfSaveOptions.shrinkToFitSettings.canShrinkToFitWrappedText = true\n\n        //        //Set minimum font size with which the text should shrink.\n        //        pdfSaveOptions.getShrinkToFitSettings().setMinimumFont(10);\n        //        //If after setting the minimum font size, the text is very long not fully visible, the ellipsis string to show for long text.\n        //        pdfSaveOptions.getShrinkToFitSettings().setEllipsis(\"~\");\n\n        //Save the workbook into pdf file.\n        workbook.save(outputStream, pdfSaveOptions)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.SavePivotTable": "\n\n        val sourceData = arrayOf(arrayOf<Any?>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"), arrayOf(1, \"Broccoli\", \"Vegetables\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"), arrayOf(2, \"Banana\", \"Fruit\", 617, GregorianCalendar(2018, 0, 8), \"United States\"), arrayOf(3, \"Banana\", \"Fruit\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"), arrayOf(4, \"Beans\", \"Vegetables\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"), arrayOf(5, \"Orange\", \"Fruit\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"), arrayOf(6, \"Broccoli\", \"Vegetables\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"), arrayOf(7, \"Banana\", \"Fruit\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"), arrayOf(8, \"Apple\", \"Fruit\", 2417, GregorianCalendar(2018, 0, 16), \"France\"), arrayOf(9, \"Apple\", \"Fruit\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"), arrayOf(10, \"Banana\", \"Fruit\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"), arrayOf(11, \"Broccoli\", \"Vegetables\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"), arrayOf(12, \"Broccoli\", \"Vegetables\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"), arrayOf(13, \"Apple\", \"Fruit\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"K20:P33\").value = sourceData\n        worksheet.getRange(\"K:P\").columnWidth = 15.0\n        // Add pivot table\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"K20:P33\"))\n        val pivottable = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"A1\"), \"pivottable1\")\n        worksheet.getRange(\"N21:N35\").numberFormat = \"$#,##0.00\"\n        worksheet.getRange(\"A:G\").columnWidth = 12.0\n\n        // config pivot table's fields\n        val field_Date = pivottable.pivotFields.get(\"Date\")\n        field_Date.orientation = PivotFieldOrientation.PageField\n\n        val field_Category = pivottable.pivotFields.get(\"Category\")\n        field_Category.orientation = PivotFieldOrientation.RowField\n\n        val field_Product = pivottable.pivotFields.get(\"Product\")\n        field_Product.orientation = PivotFieldOrientation.ColumnField\n\n        val field_Amount = pivottable.pivotFields.get(\"Amount\")\n        field_Amount.orientation = PivotFieldOrientation.DataField\n        field_Amount.numberFormat = \"$#,##0.00\"\n\n        val field_Country = pivottable.pivotFields.get(\"Country\")\n        field_Country.orientation = PivotFieldOrientation.RowField\n\n        // Set pivot style\n        pivottable.tableStyle = \"PivotStyleMedium28\"\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.OutlineColumnToPDF": "\n        val worksheet = workbook.getWorksheets().get(0)\n\n        //Set data.\n        val data = arrayOf(arrayOf(\"Preface\", \"1\", 1, 0), arrayOf(\"Java SE5 and SE6\", \"1.1\", 2, 1), arrayOf(\"Java SE6\", \"1.1.1\", 2, 2), arrayOf(\"The 4th edition\", \"1.2\", 2, 1), arrayOf(\"Changes\", \"1.2.1\", 3, 2), arrayOf(\"Note on the cover design\", \"1.3\", 4, 1), arrayOf(\"Acknowledgements\", \"1.4\", 4, 1), arrayOf(\"Introduction\", \"2\", 9, 0), arrayOf(\"Prerequisites\", \"2.1\", 9, 1), arrayOf(\"Learning Java\", \"2.2\", 10, 1), arrayOf(\"Goals\", \"2.3\", 10, 1), arrayOf(\"Teaching from this book\", \"2.4\", 11, 1), arrayOf(\"JDK HTML documentation\", \"2.5\", 11, 1), arrayOf(\"Exercises\", \"2.6\", 12, 1), arrayOf(\"Foundations for Java\", \"2.7\", 12, 1), arrayOf(\"Source code\", \"2.8\", 12, 1), arrayOf(\"Coding standards\", \"2.8.1\", 14, 2), arrayOf(\"Errors\", \"2.9\", 14, 1), arrayOf(\"Introduction to Objects\", \"3\", 15, 0), arrayOf(\"The progress of abstraction\", \"3.1\", 15, 1), arrayOf(\"An object has an interface\", \"3.2\", 17, 1), arrayOf(\"An object provides services\", \"3.3\", 18, 1), arrayOf(\"The hidden implementation\", \"3.4\", 19, 1), arrayOf(\"Reusing the implementation\", \"3.5\", 20, 1), arrayOf(\"Inheritance\", \"3.6\", 21, 1), arrayOf(\"Is-a vs. is-like-a relationships\", \"3.6.1\", 24, 2), arrayOf(\"Interchangeable objects with polymorphism\", \"3.7\", 25, 1), arrayOf(\"The singly rooted hierarchy\", \"3.8\", 28, 1), arrayOf(\"Containers\", \"3.9\", 28, 1), arrayOf(\"Parameterized types (Generics)\", \"3.10\", 29, 1), arrayOf(\"Object creation & lifetime\", \"3.11\", 30, 1), arrayOf(\"Exception handling: dealing with errors\", \"3.12\", 31, 1), arrayOf(\"Concurrent programming\", \"3.13\", 32, 1), arrayOf(\"Java and the Internet\", \"3.14\", 33, 1), arrayOf(\"What is the Web?\", \"3.14.1\", 33, 2), arrayOf(\"Client-side programming\", \"3.14.2\", 34, 2), arrayOf(\"Server-side programming\", \"3.14.3\", 38, 2), arrayOf(\"Summary\", \"3.15\", 38, 1))\n        worksheet.getRange(\"A1:C38\").setValue(data)\n\n        //Set ColumnWidth.\n        worksheet.getRange(\"A:A\").setColumnWidthInPixel(310.0)\n        worksheet.getRange(\"B:C\").setColumnWidthInPixel(150.0)\n\n        //Set IndentLevel.\n        for (i in data.indices) {\n            worksheet.getRange(i, 0).setIndentLevel(data[i][3] as Int)\n        }\n\n        //Show the summary row above the detail rows.\n        worksheet.getOutline().setSummaryRow(SummaryRow.Above)\n\n        //Don't show the row outline when interacting with SJS, the exported excel file still show the row outline.\n        worksheet.setShowRowOutline(false)\n\n        //Set outline column, the corresponding row outlines will also be automatically created.\n        worksheet.getOutlineColumn().setColumnIndex(0)\n        worksheet.getOutlineColumn().setShowCheckBox(true)\n        worksheet.getOutlineColumn().setShowImage(true)\n        worksheet.getOutlineColumn().setMaxLevel(2)\n        worksheet.getOutlineColumn().getImages().add(ImageSource(this.getResourceStream(\"archiverFolder.png\"), ImageType.PNG))\n        worksheet.getOutlineColumn().getImages().add(ImageSource(this.getResourceStream(\"newFloder.png\"), ImageType.PNG))\n        worksheet.getOutlineColumn().getImages().add(ImageSource(this.getResourceStream(\"docFile.png\"), ImageType.PNG))\n        worksheet.getOutlineColumn().setCollapseIndicator(ImageSource(this.getResourceStream(\"decreaseIndicator.png\"), ImageType.PNG))\n        worksheet.getOutlineColumn().setExpandIndicator(ImageSource(this.getResourceStream(\"increaseIndicator.png\"), ImageType.PNG))\n        worksheet.getOutlineColumn().setCheckStatus(0, true)\n        worksheet.getOutlineColumn().setCollapsed(1, true)\n\n        //Print the headings&gridlines.\n        worksheet.getPageSetup().setPrintHeadings(true)\n        worksheet.getPageSetup().setPrintGridlines(true)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.SaveBackgroundPicturesToPDF": "\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/To_Do_List.xlsx\")\n        workbook.open(fileStream)\n\n        val worksheet = workbook.getWorksheets().get(0)\n\n        // Set a background image for worksheet\n        val stream = this.getResourceStream(\"AcmeLogo.png\")\n\n        // Add a background picture for the worksheet, and the background picture will be rendered into the destination rectangle[10, 10, 500, 370].\n        try {\n            val picture = worksheet.getBackgroundPictures().addPictureInPixel(stream, ImageType.PNG, 10.0, 10.0, 500.0, 370.0)\n\n            // The background picture will be resized to fill the destination dimensions.\n            picture.setBackgroundImageLayout(ImageLayout.Tile)\n\n            // Sets the transparency of the background pictures.\n            picture.setTransparency(0.5)\n        } catch (e: IOException) {\n            // TODO Auto-generated catch block\n            e.printStackTrace()\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.ConvertExcelToPDF": "\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/Employee absence schedule.xlsx\")\n        workbook.open(fileStream!!)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.SaveWorkbookToPDF": "\r\n        val sheet1 = workbook.worksheets.get(0)\r\n\r\n        //set style.\r\n        sheet1.getRange(\"A1\").value = \"Sheet1\"\r\n        sheet1.getRange(\"A1\").font.name = \"Wide Latin\"\r\n        sheet1.getRange(\"A1\").font.color = Color.GetRed()\r\n        sheet1.getRange(\"A1\").interior.color = Color.GetGreen()\r\n\r\n\r\n        val sheet2 = workbook.worksheets.add()\r\n\r\n        //set style.\r\n        sheet2.getRange(\"A1\").value = \"Sheet2\"\r\n        sheet2.getRange(\"A1\").font.name = \"Wide Latin\"\r\n        sheet2.getRange(\"A1\").font.color = Color.GetRed()\r\n        sheet2.getRange(\"A1\").interior.color = Color.GetYellow()\r\n\r\n        //change the path to real export path when save.\r\n        workbook.save(\"dest.pdf\", SaveFileFormat.Pdf)\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.SaveRangeFillToPDF": "\r\n        val worksheet = workbook.worksheets.get(0)\r\n\r\n        worksheet.getRange(\"A1:C2\").merge()\r\n        worksheet.getRange(\"A1:C2\").interior.color = Color.GetGreen()\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.SaveSlicer": "\n\n        val sourceData = arrayOf(arrayOf(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"), \n            arrayOf(1, \"Carrots\", \"Vegetables\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"), \n            arrayOf(2, \"Broccoli\", \"Vegetables\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"), \n            arrayOf(3, \"Banana\", \"Fruit\", 617, GregorianCalendar(2018, 0, 8), \"United States\"), \n            arrayOf(4, \"Banana\", \"Fruit\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"), \n            arrayOf(5, \"Beans\", \"Vegetables\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"), \n            arrayOf(6, \"Orange\", \"Fruit\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"), \n            arrayOf(7, \"Broccoli\", \"Vegetables\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"), \n            arrayOf(8, \"Banana\", \"Fruit\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"), \n            arrayOf(9, \"Apple\", \"Fruit\", 2417, GregorianCalendar(2018, 0, 16), \"France\"), \n            arrayOf(10, \"Apple\", \"Fruit\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"), \n            arrayOf(11, \"Banana\", \"Fruit\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"), \n            arrayOf(12, \"Broccoli\", \"Vegetables\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"), \n            arrayOf(13, \"Carrots\", \"Vegetables\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"), \n            arrayOf(14, \"Broccoli\", \"Vegetables\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"), \n            arrayOf(15, \"Apple\", \"Fruit\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:E\").columnWidth = 15.0\n\n        worksheet.getRange(\"A1:E16\").setValue(sourceData)\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:E16\"), true)\n        table.columns.get(3).dataBodyRange.setNumberFormat(\"$#,##0.00\")\n\n        // create slicer cache for table.\n        val cache = workbook.slicerCaches.add(table, \"Category\", \"categoryCache\")\n\n        val slicer1 = cache.slicers.add(workbook.worksheets.get(\"Sheet1\"), \"cate1\", \"Category\", 150.0, 30.0,\n                100.0, 200.0)\n        slicer1.slicerCache.slicerItems.get(\"Vegetables\").setSelected(false)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.SaveWorksheetToPDF": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        //set style.\r\n        sheet.getRange(\"A1\").value = \"Sheet1\"\r\n        sheet.getRange(\"A1\").font.name = \"Wide Latin\"\r\n        sheet.getRange(\"A1\").font.color = Color.GetRed()\r\n        sheet.getRange(\"A1\").interior.color = Color.GetGreen()\r\n\r\n        //change the path to real export path when save.\r\n        sheet.save(\"dest.pdf\", SaveFileFormat.Pdf)\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.SetDocumentPropertiesToPDF": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1\").setValue(\"GrapeCity Documents for Excel\")\n        worksheet.getRange(\"A1\").font.size = 25.0\n\n        val documentProperties = DocumentProperties()\n        //Sets the name of the person that created the PDF document.\n        documentProperties.setAuthor(\"Jaime Smith\")\n        //Sets the title of the  PDF document.\n        documentProperties.setTitle(\"GcPdf Document Info Sample\")\n        //Set the PDF version.\n        documentProperties.pdfVersion = 1.5f\n        //Set the subject of the PDF document.\n        documentProperties.setSubject(\"GcPdfDocument.DocumentInfo\")\n        //Set the keyword associated with the PDF document.\n        documentProperties.setKeywords(\"Keyword1\")\n        //Set the creation date and time of the PDF document.\n        documentProperties.creationDate = GregorianCalendar(2019, 5, 24)\n        //Set the date and time the PDF document was most recently modified.\n        documentProperties.modifyDate = GregorianCalendar(2020, 5, 24)\n        //Set the name of the application that created the original PDF document.\n        documentProperties.setCreator(\"GcPdfWeb Creator\")\n        //Set the name of the application that created the PDF document.\n        documentProperties.setProducer(\"GcPdfWeb Producer\")\n\n\n        val pdfSaveOptions = PdfSaveOptions()\n        //Sets the document properties of the pdf.\n        pdfSaveOptions.documentProperties = documentProperties\n\n        //Save the workbook into pdf file.\n        workbook.save(outputStream, pdfSaveOptions)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.SetSecurityOptionsToPDF": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1\").setValue(\"GrapeCity Documents for Excel\")\n        worksheet.getRange(\"A1\").font.size = 25.0\n\n        //The security settings of pdf when converting excel to pdf.\n        val securityOptions = PdfSecurityOptions()\n        //Sets the user password.\n        securityOptions.setUserPassword(\"user\")\n        //Sets the owner password.\n        securityOptions.setOwnerPassword(\"owner\")\n        //Allow to print pdf document.\n        securityOptions.printPermission = true\n        //Print the pdf document in high quality.\n        securityOptions.fullQualityPrintPermission = true\n        //Allow to copy or extract the content of the pdf document.\n        securityOptions.extractContentPermission = true\n        //Allow to modify the pdf document.\n        securityOptions.modifyDocumentPermission = true\n        //Allow to insert, rotate, or delete pages and create bookmarks or thumbnail images of the pdf document.\n        securityOptions.assembleDocumentPermission = true\n        //Allow to modify text annotations and fill the form fields of the pdf document.\n        securityOptions.modifyAnnotationsPermission = true\n        //Filling the form fields of the pdf document is not allowed.\n        securityOptions.fillFormsPermission = false\n\n\n        val pdfSaveOptions = PdfSaveOptions()\n        //Sets the secutity settings of the pdf.\n        pdfSaveOptions.securityOptions = securityOptions\n\n        //Save the workbook into pdf file.\n        workbook.save(outputStream, pdfSaveOptions)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.SaveConditionalFormatting": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        //Conditional formatting on merge cell\r\n        sheet.getRange(\"B2:C4\").merge()\r\n        sheet.getRange(\"B2:C4\").value = 123\r\n        val cf = sheet.getRange(\"B2:C4\").formatConditions.add(FormatConditionType.CellValue, FormatConditionOperator.Greater, 0, 0) as IFormatCondition\r\n        cf.borders.themeColor = ThemeColor.Accent1\r\n        cf.borders.lineStyle = BorderLineStyle.Thin\r\n\r\n        //Set cell values\r\n        val data = intArrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n        sheet.getRange(\"B10:B19\").value = data\r\n        sheet.getRange(\"C10:C19\").value = data\r\n        sheet.getRange(\"D10:D19\").value = data\r\n\r\n        //Set conditional formattings\r\n        //Color scale\r\n        val cf1 = sheet.getRange(\"B10:B19\").formatConditions.addColorScale(ColorScaleType.ThreeColorScale)\r\n        cf1.colorScaleCriteria.get(0).type = ConditionValueTypes.LowestValue\r\n        cf1.colorScaleCriteria.get(0).formatColor.color = Color.FromArgb(248, 105, 107)\r\n        cf1.colorScaleCriteria.get(1).type = ConditionValueTypes.Percentile\r\n        cf1.colorScaleCriteria.get(1).value = 50\r\n        cf1.colorScaleCriteria.get(1).formatColor.color = Color.FromArgb(255, 235, 132)\r\n        cf1.colorScaleCriteria.get(2).type = ConditionValueTypes.HighestValue\r\n        cf1.colorScaleCriteria.get(2).formatColor.color = Color.FromArgb(99, 190, 123)\r\n\r\n        //Data bar\r\n        sheet.getRange(\"C14\").value = -5\r\n        sheet.getRange(\"C17\").value = -8\r\n        val cf2 = sheet.getRange(\"C10:C19\").formatConditions.addDatabar()\r\n        cf2.minPoint.type = ConditionValueTypes.AutomaticMin\r\n        cf2.maxPoint.type = ConditionValueTypes.AutomaticMax\r\n        cf2.barFillType = DataBarFillType.Gradient\r\n        cf2.barColor.color = Color.FromArgb(0, 138, 239)\r\n        cf2.barBorder.color.color = Color.FromArgb(0, 138, 239)\r\n        cf2.negativeBarFormat.color.color = Color.FromArgb(255, 0, 0)\r\n        cf2.negativeBarFormat.borderColorType = DataBarNegativeColorType.Color\r\n        cf2.negativeBarFormat.borderColor.color = Color.FromArgb(255, 0, 0)\r\n        cf2.axisColor.color = Color.GetBlack()\r\n        cf2.axisPosition = DataBarAxisPosition.Automatic\r\n\r\n        //Icon set\r\n        val cf3 = sheet.getRange(\"D10:D19\").formatConditions.addIconSetCondition()\r\n        cf3.iconSet = workbook.iconSets.get(IconSetType.Icon3Symbols)\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.SaveBorder": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        //Single cell border\r\n        sheet.getRange(\"B2\").borders.themeColor = ThemeColor.Accent1\r\n        sheet.getRange(\"B2\").borders.lineStyle = BorderLineStyle.SlantDashDot\r\n        sheet.getRange(\"B2\").borders.get(BordersIndex.DiagonalUp).themeColor = ThemeColor.Accent1\r\n        sheet.getRange(\"B2\").borders.get(BordersIndex.DiagonalUp).lineStyle = BorderLineStyle.SlantDashDot\r\n        sheet.getRange(\"B2\").borders.get(BordersIndex.DiagonalDown).themeColor = ThemeColor.Accent1\r\n        sheet.getRange(\"B2\").borders.get(BordersIndex.DiagonalDown).lineStyle = BorderLineStyle.SlantDashDot\r\n\r\n        //Range border\r\n        sheet.getRange(\"D2:E3\").borders.themeColor = ThemeColor.Accent1\r\n        sheet.getRange(\"D2:E3\").borders.lineStyle = BorderLineStyle.DashDot\r\n        sheet.getRange(\"D2:E3\").borders.get(BordersIndex.DiagonalDown).themeColor = ThemeColor.Accent1\r\n        sheet.getRange(\"D2:E3\").borders.get(BordersIndex.DiagonalDown).lineStyle = BorderLineStyle.DashDot\r\n\r\n        //Merge cell border\r\n        sheet.getRange(\"B6:C7\").merge()\r\n        sheet.getRange(\"B6:C7\").borders.themeColor = ThemeColor.Accent1\r\n        sheet.getRange(\"B6:C7\").borders.lineStyle = BorderLineStyle.Double\r\n        sheet.getRange(\"B6:C7\").borders.get(BordersIndex.DiagonalUp).themeColor = ThemeColor.Accent1\r\n        sheet.getRange(\"B6:C7\").borders.get(BordersIndex.DiagonalUp).lineStyle = BorderLineStyle.Double\r\n\r\n        //Border style on table\r\n        val table = sheet.tables.add(sheet.getRange(\"B12:G22\"), true)\r\n\r\n        //Create custom table style\r\n        val customTableStyle = workbook.tableStyles.get(\"TableStyleMedium10\").duplicate()\r\n\r\n        //Set outline border for \"whole table\" style\r\n        val wholeTableStyle = customTableStyle.tableStyleElements.get(TableStyleElementType.WholeTable)\r\n        wholeTableStyle.borders.get(BordersIndex.EdgeTop).themeColor = ThemeColor.Accent1\r\n        wholeTableStyle.borders.get(BordersIndex.EdgeTop).lineStyle = BorderLineStyle.Thick\r\n        wholeTableStyle.borders.get(BordersIndex.EdgeRight).themeColor = ThemeColor.Accent1\r\n        wholeTableStyle.borders.get(BordersIndex.EdgeRight).lineStyle = BorderLineStyle.Thick\r\n        wholeTableStyle.borders.get(BordersIndex.EdgeBottom).themeColor = ThemeColor.Accent1\r\n        wholeTableStyle.borders.get(BordersIndex.EdgeBottom).lineStyle = BorderLineStyle.Thick\r\n        wholeTableStyle.borders.get(BordersIndex.EdgeLeft).themeColor = ThemeColor.Accent1\r\n        wholeTableStyle.borders.get(BordersIndex.EdgeLeft).lineStyle = BorderLineStyle.Thick\r\n\r\n        //Set vertical border for \"first row strip\" style\r\n        val firstRowStripStyle = customTableStyle.tableStyleElements.get(TableStyleElementType.FirstRowStripe)\r\n        firstRowStripStyle.borders.get(BordersIndex.InsideVertical).themeColor = ThemeColor.Accent6\r\n        firstRowStripStyle.borders.get(BordersIndex.InsideVertical).lineStyle = BorderLineStyle.Dashed\r\n\r\n        //Apply custom style to table\r\n        table.tableStyle = customTableStyle\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.SavePictureToPDF": "\r\n        val worksheet = workbook.worksheets.get(0)\r\n\r\n        worksheet.pageSetup.orientation = PageOrientation.Landscape\r\n        val stream = this.getResourceStream(\"logo.png\")\r\n        var picture: IShape? = null\r\n        try {\r\n            picture = worksheet.shapes.addPicture(stream, ImageType.PNG, 20.0, 20.0, 400.0, 100.0)\r\n        } catch (ioe: IOException) {\r\n\r\n        }\r\n\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.text.TextStyle": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        //C# TO JAVA CONVERTER TODO TASK: There is no preprocessor in Java:\r\n        ///#region Aligment\r\n        sheet.getRange(\"A1\").value = \"Alignment\"\r\n\r\n        sheet.getRange(\"B2\").value = \"Left Alignment\"\r\n        sheet.getRange(\"B2\").horizontalAlignment = HorizontalAlignment.Left\r\n\r\n        sheet.getRange(\"C2\").value = \"Center Alignment\"\r\n        sheet.getRange(\"C2\").horizontalAlignment = HorizontalAlignment.Center\r\n\r\n        sheet.getRange(\"D2\").value = \"Right Alignment\"\r\n        sheet.getRange(\"D2\").horizontalAlignment = HorizontalAlignment.Right\r\n\r\n        sheet.getRange(\"B3\").value = \"Top Alignment\"\r\n        sheet.getRange(\"B3\").verticalAlignment = VerticalAlignment.Top\r\n\r\n        sheet.getRange(\"C3\").value = \"Middle Alignment\"\r\n        sheet.getRange(\"C3\").verticalAlignment = VerticalAlignment.Center\r\n\r\n        sheet.getRange(\"D3\").value = \"Bottom Alignment\"\r\n        sheet.getRange(\"D3\").verticalAlignment = VerticalAlignment.Bottom\r\n\r\n        sheet.getRange(\"B4\").value = \"This is  a test string for Justify Alignment. \\nThis is a test string for Justify Alignment. \"\r\n        sheet.getRange(\"B4\").horizontalAlignment = HorizontalAlignment.Justify\r\n        sheet.getRange(\"B4\").verticalAlignment = VerticalAlignment.Justify\r\n\r\n        sheet.getRange(\"C4\").value = \"This is  a test string for Distributed Alignment. \\nThis is a test string for Distributed Alignment. \"\r\n        sheet.getRange(\"C4\").horizontalAlignment = HorizontalAlignment.Distributed\r\n        sheet.getRange(\"C4\").verticalAlignment = VerticalAlignment.Distributed\r\n\r\n        ///#endregion\r\n\r\n        //Wordwrap\r\n        sheet.getRange(\"A6\").value = \"Wordwrap\"\r\n        sheet.getRange(\"B7\").value = \"This is a test string for Wordwrap\"\r\n        sheet.getRange(\"C7\").value = \"This is a test string \\n for Wordwrap\"\r\n        sheet.getRange(\"B7:C7\").wrapText = true\r\n\r\n        //Indent\r\n        sheet.getRange(\"A9\").value = \"Indent\"\r\n        sheet.getRange(\"B10\").value = \"Left Indent\"\r\n        sheet.getRange(\"B10\").indentLevel = 3\r\n        sheet.getRange(\"C10\").value = \"Right Indent\"\r\n        sheet.getRange(\"C10\").indentLevel = 3\r\n        sheet.getRange(\"C10\").horizontalAlignment = HorizontalAlignment.Right\r\n\r\n        //Shrink to fit\r\n        sheet.getRange(\"A12\").value = \"Shrink to fit\"\r\n        sheet.getRange(\"B13\").value = \"This is a test string for \\\"Shrink to fit\\\"\"\r\n        sheet.getRange(\"B13\").shrinkToFit = true\r\n\r\n        //Underline\r\n        sheet.getRange(\"A15\").value = \"Underline\"\r\n        sheet.getRange(\"B16\").value = \"Single Underline\"\r\n        sheet.getRange(\"B16\").font.underline = UnderlineType.Single\r\n\r\n        //Strikthrough\r\n        sheet.getRange(\"A18\").value = \"Strikthrough\"\r\n        sheet.getRange(\"B19\").value = \"Strikthrough\"\r\n        sheet.getRange(\"B19\").font.strikethrough = true\r\n\r\n        //Other settings\r\n        sheet.columns.get(0).font.bold = true\r\n        sheet.columns.get(0).columnWidthInPixel = 100.0\r\n        sheet.columns.get(1).columnWidthInPixel = 200.0\r\n        sheet.columns.get(2).columnWidthInPixel = 245.0\r\n        sheet.columns.get(3).columnWidthInPixel = 234.0\r\n        sheet.rows.get(2).rowHeightInPixel = 72.0\r\n        sheet.rows.get(3).rowHeightInPixel = 123.0\r\n        sheet.rows.get(6).rowHeightInPixel = 48.0\r\n\r\n        sheet.getRange(\"A1:D19\").borders.lineStyle = BorderLineStyle.Thin\r\n        sheet.pageSetup.paperSize = PaperSize.A3\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.text.NumberFormating": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        sheet.getRange(\"B3:B7\").value = 123456.789\r\n        sheet.getRange(\"B9:B13\").value = -123456.789\r\n\r\n        sheet.getRange(\"B4, B10\").numberFormat = \"0.00;[Red]0.00\"\r\n        sheet.getRange(\"B5, B11\").numberFormat = \"$#,##0.00;[Red]$#,##0.00\"\r\n        sheet.getRange(\"B6, B12\").numberFormat = \"0.00E+00\"\r\n        sheet.getRange(\"B7, B13\").numberFormat = \"_($* #,##0.00_);_($* (#,##0.00);_($* \\\" - \\\"??_);_(@_)\"\r\n\r\n        //Other settings\r\n        sheet.columns.get(1).columnWidthInPixel = 100.0\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.text.ExportCellRichText": "\r\n        val worksheet = workbook.worksheets.get(0)\r\n\r\n        val a1 = worksheet.getRange(\"A1\")\r\n\r\n        a1.font.size = 18.0\r\n        a1.font.bold = true\r\n        a1.verticalAlignment = VerticalAlignment.Center\r\n\r\n        a1.entireRow.rowHeight = 42.0\r\n        a1.entireColumn.columnWidth = 35.0\r\n        a1.value = \"Perfect square trinomial\"\r\n\r\n        val run = a1.characters(8, 7)\r\n        run.font.italic = true\r\n        run.font.themeColor = ThemeColor.Accent1\r\n\r\n        val b1 = worksheet.getRange(\"B1\")\r\n        b1.font.size = 26.0\r\n        b1.entireColumn.columnWidth = 40.0\r\n\r\n        b1.value = \"(a+b)2 = a2+2ab+b2\"\r\n\r\n        val superRun1 = b1.characters(5, 1)\r\n        superRun1.font.superscript = true\r\n        superRun1.font.color = Color.GetRed()\r\n\r\n        val superRun2 = b1.characters(10, 1)\r\n        superRun2.font.superscript = true\r\n        superRun2.font.color = Color.GetGreen()\r\n\r\n        val superRun3 = b1.characters(17, 1)\r\n        superRun3.font.superscript = true\r\n        superRun3.font.color = Color.GetBlue()\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.text.VerticalText": "\r\n        val worksheet = workbook.worksheets.get(0)\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        val a1 = sheet.getRange(\"A1\")\r\n        a1.font.name = \"@MS UI Gothic\"\r\n        a1.value = \"日本語（にほんご、にっぽんご）は、主として、日本列島で使用されてきた言語である。\"\r\n        a1.horizontalAlignment = HorizontalAlignment.Right\r\n        a1.verticalAlignment = VerticalAlignment.Top\r\n        a1.orientation = -90\r\n        a1.wrapText = true\r\n\r\n        a1.columnWidth = 27.0\r\n        a1.rowHeight = 190.0\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.text.Overflow": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        sheet.getRange(\"F2, F4\").value = \"This is a test string of overflow\"\r\n\r\n        sheet.getRange(\"F6, F8\").value = \"This is a test string of overflow with right alignment\"\r\n        sheet.getRange(\"F6, F8\").horizontalAlignment = HorizontalAlignment.Right\r\n\r\n        sheet.getRange(\"D8, H4\").value = 123\r\n\r\n        //Other settings\r\n        sheet.getRange(\"A1:J10\").borders.lineStyle = BorderLineStyle.Thin\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.exportshape.ShapeWithLine": "\n        val sheet = workbook.worksheets.get(0)\n\n        val rectangle = sheet.shapes.addShape(AutoShapeType.Rectangle, 20.0, 50.0, 200.0, 200.0)\n        rectangle.line.dashStyle = LineDashStyle.Dash\n        rectangle.line.style = LineStyle.Single\n        rectangle.line.weight = 7.0\n        rectangle.line.color.rgb = Color.GetYellow()\n\n        val donut = sheet.shapes.addShape(AutoShapeType.Donut, 260.0, 50.0, 200.0, 200.0)\n        donut.line.dashStyle = LineDashStyle.DashDotDot\n        donut.line.style = LineStyle.Single\n        donut.line.weight = 7.0\n        donut.line.color.rgb = Color.GetRed()\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.exportshape.BasicShape": "\n\n        val sheet = workbook.worksheets.get(0)\n\n        // Add a rectangle\n        sheet.shapes.addShape(AutoShapeType.Rectangle, 20.0, 10.0, 100.0, 100.0)\n\n        // Add an oval\n        sheet.shapes.addShape(AutoShapeType.Oval, 20.0, 160.0, 100.0, 100.0)\n\n        // Add a triangle\n        sheet.shapes.addShape(AutoShapeType.IsoscelesTriangle, 20.0, 310.0, 100.0, 100.0)\n\n        // Add a \"Not Allowed\" symbol\n        sheet.shapes.addShape(AutoShapeType.NoSymbol, 20.0, 460.0, 100.0, 100.0)\n\n        // Add a \"Smile Face\" symbol\n        sheet.shapes.addShape(AutoShapeType.SmileyFace, 20.0, 600.0, 100.0, 100.0)\n\n        // Add a \"Heart\" symbol\n        sheet.shapes.addShape(AutoShapeType.Heart, 170.0, 10.0, 100.0, 100.0)\n\n        // Add a \"Sun\" symbol\n        sheet.shapes.addShape(AutoShapeType.Sun, 170.0, 160.0, 100.0, 100.0)\n\n        // Add a RightArrow\n        sheet.shapes.addShape(AutoShapeType.RightArrow, 170.0, 310.0, 100.0, 100.0)\n\n        // Add a CurvedRightArrow\n        sheet.shapes.addShape(AutoShapeType.CurvedRightArrow, 170.0, 460.0, 100.0, 100.0)\n\n        // Add a QuadArrow\n        sheet.shapes.addShape(AutoShapeType.QuadArrow, 170.0, 600.0, 100.0, 100.0)\n\n        // Add a MathNotEqual\n        sheet.shapes.addShape(AutoShapeType.MathNotEqual, 320.0, 10.0, 100.0, 100.0)\n\n        // Add a FlowchartMultidocument\n        sheet.shapes.addShape(AutoShapeType.FlowchartMultidocument, 320.0, 160.0, 100.0, 100.0)\n\n        // Add a five points star\n        sheet.shapes.addShape(AutoShapeType.Shape5pointStar, 320.0, 310.0, 100.0, 100.0)\n\n        // Add a CurvedUpRibbon\n        sheet.shapes.addShape(AutoShapeType.CurvedUpRibbon, 320.0, 460.0, 100.0, 100.0)\n\n        // Add a OvalCallout\n        sheet.shapes.addShape(AutoShapeType.OvalCallout, 320.0, 580.0, 100.0, 100.0)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.exportshape.ShapeWithTextAlignment": "\n\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/WebsiteFlowChart[Template].xlsx\")\n        workbook.open(fileStream)\n\n        val worksheet = workbook.getWorksheets().get(0)\n\n        for (shape in worksheet.getShapes()) {\n            //Centers text vertically.\n            shape.getTextFrame().setVerticalAnchor(VerticalAnchor.AnchorMiddle)\n            //Centers text horizontally.\n            shape.getTextFrame().setHorizontalAnchor(HorizontalAnchor.Center)\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.exportshape.ExportFlowChart": "\n\n        //Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/Flowcharts.xlsx\")\n        workbook.open(fileStream!!)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.exportshape.SetShapeNotToPrint": "\n        val sheet = workbook.worksheets.get(0)\n\n        // Add a rectangle\n        val rectangle = sheet.shapes.addShape(AutoShapeType.Rectangle, 20.0, 15.0, 100.0, 100.0)\n\n        // Add an oval\n        val oval = sheet.shapes.addShape(AutoShapeType.Oval, 160.0, 15.0, 100.0, 100.0)\n\n        //set oval not to print\n        oval.isPrintable = false\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.exportshape.ShapeWithRotation": "\n\n        val sheet = workbook.worksheets.get(0)\n\n        sheet.getRange(\"D2\").value = \"rectangle with 30 degrees\"\n        sheet.getRange(\"H2\").value = \"right arrow with 40 degrees\"\n\n        // Add a rectangle with rotation\n        val rectangle = sheet.shapes.addShape(AutoShapeType.Rectangle, 50.0, 50.0, 200.0, 50.0)\n        rectangle.rotation = 30.0\n\n        // Add a right arrow with rotation\n        val rightArrowWithRotation = sheet.shapes.addShape(AutoShapeType.RightArrow, 270.0, 50.0, 200.0, 100.0)\n        rightArrowWithRotation.rotation = 40.0\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.exportshape.ShapeWithPictureOrTextureFill": "\n\n        val sheet = workbook.worksheets.get(0)\n\n        try {\n            // Get stream of picture\n            val stream1 = this.getResourceStream(\"logo.png\")\n\n            // Add a rectangle\n            val rectangle = sheet.shapes.addShape(AutoShapeType.Rectangle, 20.0, 20.0, 250.0, 50.0)\n            // Set picture fill\n            rectangle.fill.userPicture(stream1, ImageType.PNG)\n            rectangle.line.transparency = 1.0\n\n            // Get stream of picture\n            val stream2 = this.getResourceStream(\"logo.png\")\n\n            // Add a oval\n            val oval = sheet.shapes.addShape(AutoShapeType.Oval, 20.0, 90.0, 250.0, 50.0)\n            // Set picture fill\n            oval.fill.userPicture(stream2, ImageType.PNG)\n            oval.line.color.rgb = Color.FromArgb(0x49129E)\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n\n        // Add a five point star\n        val star = sheet.shapes.addShape(AutoShapeType.Shape5pointStar, 300.0, 20.0, 100.0, 100.0)\n        // Set picture fill\n        star.fill.presetTextured(PresetTexture.WaterDroplets)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.exportshape.ShapeWithText": "\n\n        val sheet = workbook.worksheets.get(0)\n\n        // Add a rectangle\n        val rectangle = sheet.shapes.addShape(AutoShapeType.Rectangle, 50.0, 30.0, 300.0, 200.0)\n\n        // Add rich text to rectangle\n        rectangle.fill.color.rgb = Color.GetWhite()\n\n        // Add first paragraph\n        val run1 = rectangle.textFrame.textRange.paragraphs.get(0).runs.add(\"         Doc\")\n        run1.font.color.rgb = Color.GetTomato()\n        val run2 = rectangle.textFrame.textRange.paragraphs.get(0).runs.add(\"ume\")\n        run2.font.color.rgb = Color.GetYellow()\n        val run3 = rectangle.textFrame.textRange.paragraphs.get(0).runs.add(\"nts\")\n        run3.font.color.rgb = Color.GetLightBlue()\n        val paragraph0 = rectangle.textFrame.textRange.paragraphs.get(0)\n        paragraph0.font.size = 36.0\n        paragraph0.font.bold = true\n\n        rectangle.textFrame.textRange.paragraphs.add(\" \")\n\n        // Add second paragraph\n        val paragraph1 = rectangle.textFrame.textRange.paragraphs.add()\n        val run4 = paragraph1.runs.add(\"Fast, efficient Excel, Word, and PDF APIs for .NET Standard 2.0 and Java\")\n        run4.font.color.rgb = Color.GetBlack()\n        run4.font.size = 20.0\n        run4.font.name = \"Agency FB\"\n\n        rectangle.textFrame.textRange.paragraphs.add(\" \")\n\n        // Add third paragraph\n        val paragraph2 = rectangle.textFrame.textRange.paragraphs.add()\n        val run5 = paragraph2.runs.add(\"Take total document control with ultra-fast, low-footprint document APIs for enterprise apps\")\n        run5.font.color.rgb = Color.GetBlack()\n        run5.font.size = 16.0\n        run5.font.name = \"Times New Roman\"\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.exportshape.CustomShape": "\n        //Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/CustomShapes.xlsx\")\n        workbook.open(fileStream!!)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.pdfpagesetup.ConfigureBestFitRowColumn": "\n        val sheet = workbook.worksheets.get(0)\n\n        // Set text for some cells.\n        sheet.getRange(\"A1\").setValue(\"Grapecity\")\n        sheet.getRange(\"A2\").setValue(\"Document For .NET\")\n        sheet.getRange(\"B1\").setValue(\"Grapecity\")\n        sheet.getRange(\"B2\").setValue(\"Excel for .NET\")\n        //Set font size of cell \"A2\"\n        sheet.getRange(\"A2\").font.size = 20.0\n\n        // Set bestFitColumns/bestFitRows as true.\n        sheet.pageSetup.bestFitColumns = true\n        sheet.pageSetup.bestFitRows = true\n\n        // Set print gridline and heading.\n        sheet.pageSetup.printGridlines = true\n        sheet.pageSetup.printHeadings = true\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.pdfpagesetup.ConfigureScaling": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        val stream = this.getResourceStream(\"logo.png\")\r\n        var picture: IShape? = null\r\n        try {\r\n            picture = sheet.shapes.addPicture(stream, ImageType.PNG, 20.0, 20.0, 395.0, 60.0)\r\n        } catch (ioe: IOException) {\r\n\r\n        }\r\n\r\n        sheet.getRange(\"B2:D4\").value = \"Text\"\r\n\r\n        sheet.pageSetup.printGridlines = true\r\n\r\n        //Set scaling.\r\n        sheet.pageSetup.zoom = 200\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.pdfpagesetup.ConfigureHeaderFooter": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        //Set data.\r\n        sheet.getRange(\"A1:G10\").value = \"Text\"\r\n\r\n        //Set page header.\r\n        sheet.pageSetup.leftHeader = \"&\\\"Arial,Italic\\\"LeftHeader\"\r\n        sheet.pageSetup.rightHeader = \"&KFF0000com.grapecity\"\r\n        sheet.pageSetup.centerHeader = \"&P\"\r\n\r\n        //Set page footer picture.\r\n        val stream = this.getResourceStream(\"logo.png\")\r\n        sheet.pageSetup.centerFooter = \"&G\"\r\n        sheet.pageSetup.centerFooterPicture.setGraphicStream(stream, ImageType.PNG)\r\n        sheet.pageSetup.centerFooterPicture.width = 100.0\r\n        sheet.pageSetup.centerFooterPicture.height = 13.0\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.pdfpagesetup.ConfigurePrintTails": "\n        workbook.open(this.getResourceStream(\"xlsx/RepeatTails.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        //Repeat the columns \"I\" at the left of each page when saving worksheet2 to pdf.\n        val worksheet1 = workbook.worksheets.get(0)\n        worksheet1.pageSetup.printTailColumns = \"\\$I:\\$I\"\n\n        //Repeat the row 50th at the bottom of each page when saving worksheet1 to pdf.\n        val worksheet2 = workbook.worksheets.get(1)\n        worksheet2.pageSetup.printTailRows = \"$50:$50\"\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.pdfpagesetup.ConfigurePageSetup": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        //Set data.\r\n        sheet.getRange(\"A1:G10\").value = \"Text\"\r\n\r\n        //Print rowheader and columnheader.\r\n        sheet.pageSetup.printHeadings = true\r\n\r\n        //Print gridlines.\r\n        sheet.pageSetup.printGridlines = true\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.pdfpagesetup.ConfigurePrintTitles": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        val row = 50\r\n        val column = 14\r\n        val data = Array<Array<Any?>>(row) { arrayOfNulls(column) }\r\n        for (i in 0 until row) {\r\n            for (j in 0 until column) {\r\n                data[i][j] = \"R\" + i + \"C\" + j\r\n            }\r\n        }\r\n\r\n        //Set data.\r\n        sheet.getRange(\"A1:N50\").value = data\r\n\r\n        sheet.getRange(\"A2:N4\").value = \"TitleRows\"\r\n        sheet.getRange(\"A2:N4\").interior.color = Color.GetGreen()\r\n\r\n        sheet.getRange(\"C1:E50\").value = \"TitleColumns\"\r\n        sheet.getRange(\"C1:E50\").interior.color = Color.GetYellow()\r\n\r\n        sheet.pageSetup.printHeadings = true\r\n\r\n        //Set print titles.\r\n        sheet.pageSetup.printTitleRows = \"$2:$4\"\r\n        sheet.pageSetup.printTitleColumns = \"\\$C:\\$E\"\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.pdfpagesetup.ConfigurePageBreaks": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        sheet.getRange(\"A1:B5\").value = arrayOf(arrayOf<Any?>(1, 2), arrayOf<Any?>(3, 4), arrayOf<Any?>(5, 6), arrayOf<Any?>(7, 8), arrayOf<Any?>(9, 10))\r\n\r\n        //Add page break\r\n        sheet.hPageBreaks.add(sheet.getRange(\"B3\"))\r\n        sheet.vPageBreaks.add(sheet.getRange(\"B3\"))\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.pdfpagesetup.ConfigurePagination": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        val row = 50\r\n        val column = 14\r\n        val data = Array<Array<Any?>>(row) { arrayOfNulls(column) }\r\n        for (i in 0 until row) {\r\n            for (j in 0 until column) {\r\n                data[i][j] = \"R\" + i + \"C\" + j\r\n            }\r\n        }\r\n\r\n        //Set data\r\n        sheet.getRange(\"A1:N50\").value = data\r\n\r\n        //Set paper size\r\n        sheet.pageSetup.paperSize = PaperSize.A5\r\n\r\n        //With API the margin's unit is pound, with Excel the margins display unit is inch.\r\n        //One inch eaquals to 72 pounds. If the top margin is 0.8 inch, then please set PageSetup.TopMargin = 0.8*72(57.6);\r\n        sheet.pageSetup.topMargin = 57.6\r\n\r\n        //Top margin in excel is 0.8 inch\r\n        sheet.pageSetup.bottomMargin = 21.6\r\n        sheet.pageSetup.leftMargin = 28.8\r\n        sheet.pageSetup.rightMargin = 0.0\r\n        sheet.pageSetup.headerMargin = 0.0\r\n        sheet.pageSetup.footerMargin = 93.6\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.pdfpagesetup.ConfigurePrintArea": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        val row = 50\r\n        val column = 14\r\n        val data = Array<Array<Any?>>(row) { arrayOfNulls(column) }\r\n        for (i in 0 until row) {\r\n            for (j in 0 until column) {\r\n                data[i][j] = \"R\" + i + \"C\" + j\r\n            }\r\n        }\r\n\r\n        //Set data.\r\n        sheet.getRange(\"A1:N50\").value = data\r\n        sheet.getRange(\"C10:H20\").value = \"PrintArea\"\r\n        sheet.getRange(\"C10:H20\").interior.color = Color.GetYellow()\r\n        sheet.pageSetup.printHeadings = true\r\n\r\n        //Set print area.\r\n        sheet.pageSetup.printArea = \"\\$C$10:\\$H$20\"\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.pdfpagesetup.ConfigureOritation": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        sheet.getRange(\"A1:G10\").value = \"Text\"\r\n\r\n        //Set page orientation.\r\n        sheet.pageSetup.orientation = PageOrientation.Landscape\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.pdfpagesetup.ConfigurePrintPageRange": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        //Set pages' data.\r\n        sheet.getRange(\"A1:J46\").value = \"Page1\"\r\n        sheet.getRange(\"A1:J46\").interior.color = Color.GetLightGreen()\r\n\r\n        sheet.getRange(\"A47:J92\").value = \"Page2\"\r\n        sheet.getRange(\"A47:J92\").interior.color = Color.GetLightYellow()\r\n\r\n        sheet.getRange(\"K1:T46\").value = \"Page3\"\r\n        sheet.getRange(\"K1:T46\").interior.color = Color.GetOrangeRed()\r\n\r\n        sheet.getRange(\"K47:T92\").value = \"Page4\"\r\n        sheet.getRange(\"K47:T92\").interior.color = Color.GetDarkOrange()\r\n\r\n        sheet.getRange(\"U1:AD46\").value = \"Page5\"\r\n        sheet.getRange(\"U1:AD46\").interior.color = Color.GetLightBlue()\r\n\r\n        sheet.getRange(\"U47:AD92\").value = \"Page6\"\r\n        sheet.getRange(\"U47:AD92\").interior.color = Color.GetIndianRed()\r\n        sheet.pageSetup.printHeadings = true\r\n\r\n        //Set print page range, print p1, p3 to p5.\r\n        sheet.pageSetup.printPageRange = \"1,3-5\"\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.pdfpagesetup.ConfigureBlackAndWhite": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        val stream = this.getResourceStream(\"logo.png\")\r\n        var picture: IShape? = null\r\n        try {\r\n            picture = sheet.shapes.addPicture(stream, com.grapecity.documents.excel.drawing.ImageType.PNG, 20.0, 20.0, 395.0, 60.0)\r\n        } catch (ioe: IOException) {\r\n\r\n        }\r\n\r\n        //Set text font color.\r\n        sheet.getRange(\"A1:D4\").value = \"Font\"\r\n        sheet.getRange(\"A1:D4\").font.color = Color.GetRed()\r\n\r\n        //Set cell color\r\n        sheet.getRange(\"A7:D10\").value = \"Green\"\r\n        sheet.getRange(\"A7:D10\").interior.color = Color.GetGreen()\r\n\r\n        //Set print black and white.\r\n        sheet.pageSetup.blackAndWhite = true\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.pdfpagesetup.ConfigureDraft": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        //Set text.\r\n        sheet.getRange(\"A1:G10\").value = \"Text\"\r\n\r\n        //Add picture in sheet.\r\n        val stream = this.getResourceStream(\"logo.png\")\r\n        var picture: IShape? = null\r\n        try {\r\n            picture = sheet.shapes.addPicture(stream, ImageType.PNG, 20.0, 20.0, 395.0, 60.0)\r\n        } catch (ioe: IOException) {\r\n\r\n        }\r\n\r\n        //Add header graphic.\r\n        val stream1 = this.getResourceStream(\"logo.png\")\r\n        sheet.pageSetup.centerHeader = \"&G\"\r\n        sheet.pageSetup.centerHeaderPicture.setGraphicStream(stream1, ImageType.PNG)\r\n        sheet.pageSetup.centerHeaderPicture.width = 100.0\r\n        sheet.pageSetup.centerHeaderPicture.height = 13.0\r\n\r\n        //Set print without graphics in page content area.\r\n        sheet.pageSetup.draft = true\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.pdfpagesetup.ConfigurePageOrder": "\r\n        val sheet = workbook.worksheets.get(0)\r\n\r\n        //Set pages' data.\r\n        sheet.getRange(\"A1:J46\").value = \"Page1\"\r\n        sheet.getRange(\"A1:J46\").interior.color = Color.GetLightGreen()\r\n\r\n        sheet.getRange(\"A47:J92\").value = \"Page2\"\r\n        sheet.getRange(\"A47:J92\").interior.color = Color.GetLightYellow()\r\n\r\n        sheet.getRange(\"K1:T46\").value = \"Page3\"\r\n        sheet.getRange(\"K1:T46\").interior.color = Color.GetOrangeRed()\r\n\r\n        sheet.getRange(\"K47:T92\").value = \"Page4\"\r\n        sheet.getRange(\"K47:T92\").interior.color = Color.GetDarkOrange()\r\n\r\n        sheet.pageSetup.printHeadings = true\r\n\r\n        //Set page order. Now the page order is p1-p3-p2-p4. Origin is p1-p2-p3-p4.\r\n        sheet.pageSetup.order = Order.OverThenDown\r\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.printmanager.ManageHeadersOnDifferentPages": "\n        workbook.open(this.getResourceStream(\"xlsx/MultipleHeaders.xlsx\")!!)\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val repeatSettings = ArrayList<RepeatSetting>()\n\n        //The title rows of the \"B2:F87\" is \"$2:$2\"\n        val repeatSetting = RepeatSetting()\n        repeatSetting.titleRowStart = 1\n        repeatSetting.titleRowEnd = 1\n        repeatSetting.range = worksheet.getRange(\"B2:F87\")\n        repeatSettings.add(repeatSetting)\n\n        //The title rows of the \"B91:F189\" is \"$91:$91\"\n        val repeatSetting2 = RepeatSetting()\n        repeatSetting2.titleRowStart = 88\n        repeatSetting2.titleRowEnd = 88\n        repeatSetting2.range = worksheet.getRange(\"B89:F149\")\n        repeatSettings.add(repeatSetting2)\n\n        //Create a PrintManager.\n        val printManager = PrintManager()\n\n        //Get the pagination information of the worksheet.\n        val pages = printManager.paginate(worksheet, null, repeatSettings)\n\n        //Save the modified pages into pdf file.\n        printManager.savePageInfosToPDF(outputStream, pages)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.printmanager.SaveMultipleWorkbooksToPDF": "\n        workbook.open(this.getResourceStream(\"xlsx/Any year calendar1.xlsx\")!!)\n\n        val workbook2 = Workbook()\n        workbook2.open(this.getResourceStream(\"xlsx/Any year calendar (Ion theme)1.xlsx\")!!)\n\n        //Create a PrintManager.\n        val printManager = PrintManager()\n\n        //Save the workbook1 and workbook2 into one pdf file.\n        val workbooks = ArrayList<IWorkbook>()\n        workbooks.add(workbook)\n        workbooks.add(workbook2)\n        printManager.saveWorkbooksToPDF(outputStream, workbooks)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.printmanager.CustomPageInfos": "\n        workbook.open(this.getResourceStream(\"xlsx/KeepTogether.xlsx\")!!)\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //Firstly, create a printManager.\n        val printManager = PrintManager()\n\n        //Get the natural pagination information of the worksheet.\n        //The first page of the natural pagination is \"A1:F37\", the second page is from row \"A38:F73\"\n        val pages = printManager.paginate(worksheet)\n\n        //Custom the pageInfos.\n        pages[0].pageContent.range = worksheet.getRange(\"A1:F36\") // The first page is \"A1:F36\".\n        pages[0].pageSettings.centerHeader = \"&KFF0000&20 Budget summary report\" // The center header of the first page will show the text \"Budget summary report\".\n        pages[0].pageSettings.centerFooter = \"&KFF0000&20 Page &P\" // The center footer of the first page will show the page number \"1\".\n        pages[1].pageContent.range = worksheet.getRange(\"A37:F73\")// The second page is \"A37:F73\".\n\n        //Save the modified pages into pdf file.\n        printManager.savePageInfosToPDF(outputStream, pages)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.printmanager.PrintMultipleWorksheetsToOnePage": "\n        workbook.open(this.getResourceStream(\"xlsx/Multiple sheets one page.xlsx\")!!)\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //Create a pdf document.\n        val doc = PDDocument()\n        //This page will save datas for multiple pages.\n        val page = PDPage()\n        doc.addPage(page)\n\n        //Create a PrintManager.\n        val printManager = PrintManager()\n\n        //Get the pagination information of the workbook.\n        val pages = printManager.paginate(workbook)\n\n        //Divide the multiple pages into 1 rows and 2 columns and printed them on one page.\n        printManager.draw(doc, page, pages, 1, 2)\n\n        //Save the modified pages into pdf file.\n        try {\n            doc.save(outputStream)\n            doc.close()\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.printmanager.DrawRangeInsideAPDF": "\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A4:C4\").value = arrayOf(\"Device\", \"Quantity\", \"Unit Price\")\n        worksheet.getRange(\"A5:C8\").value = arrayOf(arrayOf(\"T540p\", 12, 9850), arrayOf(\"T570\", 5, 7460), arrayOf(\"Y460\", 6, 5400), arrayOf(\"Y460F\", 8, 6240))\n\n        //Set style\n        worksheet.getRange(\"A4:C4\").font.bold = true\n        worksheet.getRange(\"A4:C4\").font.color = Color.GetWhite()\n        worksheet.getRange(\"A4:C4\").interior.color = Color.GetLightBlue()\n        worksheet.getRange(\"A5:C8\").borders.get(BordersIndex.InsideHorizontal).color = Color.GetOrange()\n        worksheet.getRange(\"A5:C8\").borders.get(BordersIndex.InsideHorizontal).lineStyle = BorderLineStyle.DashDot\n\n        //Create a pdf document.\n        val doc = PDDocument()\n        val page = PDPage()\n        doc.addPage(page)\n\n        //Create a PrintManager.\n        val printManager = PrintManager()\n\n        // Draw the Range\"A4:C8\" to the specified location on the page.\n        printManager.draw(doc, page, Point(30.0, 100.0), worksheet.getRange(\"A4:C8\"))\n\n        //Save the modified pages into pdf file.\n        try {\n            doc.save(outputStream)\n            doc.close()\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.printmanager.RenderExcelRangesInsideAPDF": "\n        workbook.open(this.getResourceStream(\"xlsx/FinancialReport.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        //Create a pdf document.\n        var doc: PDDocument? = null\n        try {\n            doc = PDDocument.load(this.getResourceStream(\"Acme-Financial Report 2018.pdf\"))\n        } catch (e1: IOException) {\n            e1.printStackTrace()\n        }\n\n        //Create a PrintManager.\n        val printManager = PrintManager()\n\n        //Draw the contents of the sheet3 to the fourth page.\n        val printArea1 = workbook.worksheets.get(2).getRange(\"A3:C24\")\n        val size1 = printManager.getSize(printArea1)\n        printManager.draw(doc, doc!!.getPage(3), Rectangle(306.0, 215.0, size1.width, size1.height), printArea1)\n\n        //Draw the contents of the sheet1 to the fifth page.\n        val printArea2 = workbook.worksheets.get(0).getRange(\"A4:E29\")\n        val size2 = printManager.getSize(printArea2)\n        printManager.draw(doc, doc.getPage(4), Rectangle(71.0, 250.0, size2.width, size2.height), printArea2)\n\n        //Draw the contents of the sheet2 to the sixth page.\n        val printArea3 = workbook.worksheets.get(1).getRange(\"A2:E28\")\n        val size3 = printManager.getSize(printArea3)\n        printManager.draw(doc, doc.getPage(5), Rectangle(71.0, 230.0, 783.0, size3.height), printArea3)\n\n        //Save the modified pages into pdf file.\n        try {\n            doc.save(outputStream)\n            doc.close()\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.printmanager.KeepTogether": "\n        workbook.open(this.getResourceStream(\"xlsx/KeepTogether.xlsx\")!!)\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //The first page of the natural pagination is from row 1th to 37th, the second page is from row 38th to 73th.\n        val keepTogetherRanges = ArrayList<IRange>()\n        //The row 37th and 38th need to keep together. So the pagination results are: the first page if from row 1th to 36th, the second page is from row 37th to 73th.\n        keepTogetherRanges.add(worksheet.getRange(\"37:38\"))\n\n        //Create a PrintManager.\n        val printManager = PrintManager()\n\n        //Get the pagination information of the worksheet.\n        val pages = printManager.paginate(worksheet, keepTogetherRanges, null)\n\n        //Save the pages into pdf file.\n        printManager.savePageInfosToPDF(outputStream, pages)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.printmanager.PrintSpecificPages": "\n        workbook.open(this.getResourceStream(\"xlsx/PrintSpecificPDFPages.xlsx\")!!)\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //Create a PrintManager.\n        val printManager = PrintManager()\n\n        //Get the natural pagination information of the workbook.\n        val pages = printManager.paginate(workbook)\n\n        //Pick some pages to print.\n        val newPages = ArrayList<PageInfo>()\n        newPages.add(pages[0])\n        newPages.add(pages[2])\n\n        //Update the page number and the page settings of each page. The page number is continuous.\n        printManager.updatePageNumberAndPageSettings(newPages)\n\n        //Save the pages into pdf file.\n        printManager.savePageInfosToPDF(outputStream, newPages)\n    ",
  "com.grapecity.documents.excel.examples.features.pdfexporting.printmanager.GetPaginationInfo": "\n\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/Medical office start-up expenses 1.xlsx\")\n        workbook.open(fileStream)\n\n        val worksheet = workbook.getWorksheets().get(1)\n\n        val printManager = PrintManager()\n\n        // The columnIndexs is [4, 12, 20], this means that the horizontal direction is split after the column 5th, 13th, and 21th.\n        val columnIndexs = printManager.GetPaginationInfo(worksheet, PaginationOrientation.Horizontal)\n        // The rowIndexs is [42, 61], this means that the vertical direction is split after the row 43th and 62th.\n        val rowIndexs = printManager.GetPaginationInfo(worksheet, PaginationOrientation.Vertical)\n\n        // Save the pages into pdf file.\n        val pages = printManager.paginate(worksheet)\n        printManager.savePageInfosToPDF(outputStream, pages)\n    ",
  "com.grapecity.documents.excel.examples.features.pagesetup.ConfigPrintTailRows": "\n        workbook.open(this.getResourceStream(\"xlsx/RepeatTails.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(1)\n\n        //Repeat the row 50th at the bottom of each page when saving pdf.\n        worksheet.pageSetup.printTailRows = \"$50:$50\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.pagesetup.ConfigPrintTailColumns": "\n        workbook.open(this.getResourceStream(\"xlsx/RepeatTails.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        // Repeat the column \"I\" at the right of each page when saving pdf.\n        worksheet.pageSetup.printTailColumns = \"\\$I:\\$I\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.pagesetup.ConfigPageOrientation": "\n        workbook.open(this.getResourceStream(\"xlsx/PageSetup Demo.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        //Set page orientation, default is portrait.\n        worksheet.pageSetup.orientation = PageOrientation.Landscape\n\n    ",
  "com.grapecity.documents.excel.examples.features.pagesetup.ConfigPaperSize": "\n        workbook.open(this.getResourceStream(\"xlsx/PageSetup Demo.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        //Set A4 paper size\n        worksheet.pageSetup.paperSize = PaperSize.A4\n\n    ",
  "com.grapecity.documents.excel.examples.features.pagesetup.ConfigSheetPrintSettings": "\n        workbook.open(this.getResourceStream(\"xlsx/PageSetup Demo.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        //Set sheet\n        worksheet.pageSetup.printGridlines = true\n        worksheet.pageSetup.printHeadings = true\n        worksheet.pageSetup.blackAndWhite = true\n        worksheet.pageSetup.printComments = PrintLocation.InPlace\n        worksheet.pageSetup.printErrors = PrintErrors.Dash\n\n    ",
  "com.grapecity.documents.excel.examples.features.pagesetup.ConfigPageMargins": "\n        workbook.open(this.getResourceStream(\"xlsx/PageSetup Demo.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        //Set margins, in points.\n        worksheet.pageSetup.topMargin = 36.0\n        worksheet.pageSetup.bottomMargin = 36.0\n        worksheet.pageSetup.rightMargin = 72.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.pagesetup.ConfigPaperScaling": "\n        workbook.open(this.getResourceStream(\"xlsx/PageSetup Demo.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        //Set paper scaling\n        //Method 1: Set percent scale\n        worksheet.pageSetup.isPercentScale = true\n        worksheet.pageSetup.zoom = 150\n\n        //Or Method 2: Fit to page's wide & tall\n        //worksheet.getPageSetup().setIsPercentScale(false);\n        //worksheet.getPageSetup().setFitToPagesWide(3);\n        //worksheet.getPageSetup().setFitToPagesTall(4);\n\n    ",
  "com.grapecity.documents.excel.examples.features.pagesetup.ConfigHeaderFooter": "\n        workbook.open(this.getResourceStream(\"xlsx/PageSetup Demo.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        //Set page headerfooter\n        worksheet.pageSetup.leftHeader = \"&\\\"Arial,Italic\\\"LeftHeader\"\n        worksheet.pageSetup.centerHeader = \"&P\"\n\n        //Set page headerfooter's graphic\n        worksheet.pageSetup.centerFooter = \"&G\"\n        val stream = this.getResourceStream(\"logo.png\")\n        worksheet.pageSetup.centerFooterPicture.setGraphicStream(stream, ImageType.PNG)\n\n        //If you have picture resources locally, you can also set graphic in this way.\n        //worksheet.getPageSetup().setCenterFooter(\"&G\");\n        //worksheet.getPageSetup().getCenterFooterPicture().setFilename(\"C:\\\\picture.png\");\n        //worksheet.PageSetup.CenterFooterPicture.Filename = @\"C:\\picture.png\";\n\n    ",
  "com.grapecity.documents.excel.examples.features.pagesetup.ConfigPrintArea": "\n        workbook.open(this.getResourceStream(\"xlsx/PageSetup Demo.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        //Set print area & print titles\n        worksheet.pageSetup.printArea = \"\\$D$5:\\$G$10\"\n        worksheet.pageSetup.printTitleRows = \"$5:$10\"\n        worksheet.pageSetup.printTitleColumns = \"\\$D:\\$G\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.pagesetup.ConfigPrintTitleColumns": "\n        workbook.open(this.getResourceStream(\"xlsx/PageSetup Demo.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        //Set columns to repeat at left\n        worksheet.pageSetup.printTitleColumns = \"\\$D:\\$G\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.pagesetup.ConfigFirstPageHeaderFooter": "\n        workbook.open(this.getResourceStream(\"xlsx/PageSetup Demo.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        //Set first page headerfooter\n        worksheet.pageSetup.differentFirstPageHeaderFooter = true\n\n        worksheet.pageSetup.firstPage.centerHeader.text = \"&T\"\n        worksheet.pageSetup.firstPage.rightFooter.text = \"&D\"\n\n        //Set first page headerfooter's graphic\n        worksheet.pageSetup.firstPage.leftFooter.text = \"&G\"\n        val stream = this.getResourceStream(\"logo.png\")\n        worksheet.pageSetup.firstPage.leftFooter.picture.setGraphicStream(stream, ImageType.PNG)\n        worksheet.pageSetup.firstPage.leftFooter.picture.width = 100.0\n        worksheet.pageSetup.firstPage.leftFooter.picture.height = 13.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.pagesetup.ConfigPageCenter": "\n        workbook.open(this.getResourceStream(\"xlsx/PageSetup Demo.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        //Set center, default is false.\n        worksheet.pageSetup.centerHorizontally = true\n        worksheet.pageSetup.centerVertically = true\n\n    ",
  "com.grapecity.documents.excel.examples.features.pagesetup.ConfigEvenPageHeaderFooter": "\n        workbook.open(this.getResourceStream(\"xlsx/PageSetup Demo.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        //Set even page headerfooter\n        worksheet.pageSetup.oddAndEvenPagesHeaderFooter = true\n\n        worksheet.pageSetup.evenPage.centerHeader.text = \"&T\"\n        worksheet.pageSetup.evenPage.rightFooter.text = \"&D\"\n\n        //Set even page headerfooter's graphic\n        worksheet.pageSetup.evenPage.leftFooter.text = \"&G\"\n        val stream = this.getResourceStream(\"logo.png\")\n        worksheet.pageSetup.evenPage.leftFooter.picture.setGraphicStream(stream, ImageType.PNG)\n\n    ",
  "com.grapecity.documents.excel.examples.features.pagesetup.ConfigPrintTitleRows": "\n        workbook.open(this.getResourceStream(\"xlsx/PageSetup Demo.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        //Set rows to repeat at top\n        worksheet.pageSetup.printTitleRows = \"$5:$10\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.pagesetup.ConfigFirstPageNumber": "\n        workbook.open(this.getResourceStream(\"xlsx/PageSetup Demo.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.pageSetup.centerFooter = \"&P\"\n\n        //Set first page number, default is p1.\n        worksheet.pageSetup.firstPageNumber = 3\n\n    ",
  "com.grapecity.documents.excel.examples.features.pagesetup.ConfigPageOrder": "\n        workbook.open(this.getResourceStream(\"xlsx/PageSetup Demo.xlsx\")!!)\n        val worksheet = workbook.worksheets.get(0)\n\n        //Set page order, default is DownThenOver.\n        worksheet.pageSetup.order = Order.OverThenDown\n\n    ",
  "com.grapecity.documents.excel.examples.features.filtering.ClearFilter": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n        worksheet.getRange(\"A1:F7\").autoFilter(4, \"<80\")\n        worksheet.getRange(\"A1:F7\").autoFilter(0, \"*e*\")\n        worksheet.getRange(\"A1:F7\").autoFilter(1, \"=Washington\")\n\n        // clear second column filter only.\n        worksheet.getRange(\"A1:F7\").autoFilter(1)\n\n        // clear all filters\n        worksheet.autoFilter.showAllData()\n\n        // another way to clear all filters, same as AutoFilter.ShowAllData()\n        worksheet.showAllData()\n\n    ",
  "com.grapecity.documents.excel.examples.features.filtering.MultiSelectFilter": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n        worksheet.getRange(\"E2:E7\").numberFormat = \"0.00\"\n        //multi select, selcet the weight equals to 62.00 and 76.00.\n        worksheet.getRange(\"A1:F7\").autoFilter(4, arrayOf<Any?>(\"62.00\", \"76.00\"), AutoFilterOperator.Values)\n\n    ",
  "com.grapecity.documents.excel.examples.features.filtering.ReApplyFilter": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n        //Weight less than 72.\n        worksheet.getRange(\"A1:F7\").autoFilter(4, \"<72\")\n\n        //change filter range data.\n        worksheet.getRange(\"E4\").value = 71\n        //re-apply filter condition, row 4 will be shown.\n        worksheet.autoFilter.applyFilter()\n\n    ",
  "com.grapecity.documents.excel.examples.features.filtering.ChangeWorksheetFilterRange": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"D3\").value = \"Numbers\"\n        worksheet.getRange(\"D4\").value = 1\n        worksheet.getRange(\"D5\").value = 2\n        worksheet.getRange(\"D6\").value = 3\n\n        //first time invoke. worksheet's filter range will be D3:D6.\n        worksheet.getRange(\"D3:D6\").autoFilter(0, \"<>2\")\n\n        //set AutoFilterMode to false. must set this property before, otherwise, subsequent code can not take effort.\n        worksheet.autoFilterMode = false\n\n        worksheet.getRange(\"A5\").value = \"Numbers\"\n        worksheet.getRange(\"A6\").value = 1\n        worksheet.getRange(\"A7\").value = 2\n        worksheet.getRange(\"A8\").value = 3\n\n        //second time invoke. worksheet's filter range will change to A5:A8.\n        worksheet.getRange(\"A5:A8\").autoFilter(0, \"<>2\")\n\n    ",
  "com.grapecity.documents.excel.examples.features.filtering.datefiltering.DateDynamicFilter": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n        //filter all dates in February.\n        worksheet.getRange(\"A1:F7\").autoFilter(2, DynamicFilterType.M2, AutoFilterOperator.Dynamic)\n\n    ",
  "com.grapecity.documents.excel.examples.features.filtering.datefiltering.DateFilter": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        val criteria1 = GregorianCalendar(1972, 6, 3).time.toString()\n        val criteria2 = GregorianCalendar(1993, 1, 15).time.toString()\n        //filter date between 1972.7.3 and 1993.2.15\n        worksheet.getRange(\"A1:F7\").autoFilter(2, \">=$criteria1\", AutoFilterOperator.And, \"<=$criteria2\")\n\n    ",
  "com.grapecity.documents.excel.examples.features.filtering.filteringbycolor.FilterByAutomaticFontColor": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n        worksheet.getRange(\"E2\").font.color = Color.GetGreen()\n        worksheet.getRange(\"E5\").font.color = Color.GetGreen()\n        worksheet.getRange(\"E6\").font.color = Color.GetRed()\n\n        //filter in the rows which font color is automatic color.\n        worksheet.getRange(\"A1:F7\").autoFilter(4, null, AutoFilterOperator.AutomaticFontColor)\n\n    ",
  "com.grapecity.documents.excel.examples.features.filtering.filteringbycolor.FilterByNoFill": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n        worksheet.getRange(\"E2\").interior.color = Color.GetGreen()\n        worksheet.getRange(\"E5\").interior.color = Color.GetGreen()\n        worksheet.getRange(\"E6\").interior.color = Color.GetRed()\n\n        //filter in the rows which cell color is no fill.\n        worksheet.getRange(\"A1:F7\").autoFilter(4, null, AutoFilterOperator.NoFill)\n\n    ",
  "com.grapecity.documents.excel.examples.features.filtering.filteringbycolor.FilterByFontColor": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n        worksheet.getRange(\"E2\").font.color = Color.GetGreen()\n        worksheet.getRange(\"E5\").font.color = Color.GetGreen()\n        worksheet.getRange(\"E6\").font.color = Color.GetRed()\n\n        //filter in the rows which font color is green.\n        worksheet.getRange(\"A1:F7\").autoFilter(4, worksheet.getRange(\"E2\").font.color, AutoFilterOperator.FontColor)\n\n    ",
  "com.grapecity.documents.excel.examples.features.filtering.filteringbycolor.FilterByCellColor": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n        worksheet.getRange(\"E2\").interior.color = Color.GetGreen()\n        worksheet.getRange(\"E5\").interior.color = Color.GetGreen()\n        worksheet.getRange(\"E6\").interior.color = Color.GetRed()\n\n        //filter in the rows which cell color is green.\n        worksheet.getRange(\"A1:F7\").autoFilter(4, worksheet.getRange(\"E2\").interior.color, AutoFilterOperator.CellColor)\n\n    ",
  "com.grapecity.documents.excel.examples.features.filtering.textfiltering.TextFilter": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        //Name contains \"e\".\n        worksheet.getRange(\"A1:F7\").autoFilter(0, \"*e*\")\n\n    ",
  "com.grapecity.documents.excel.examples.features.filtering.numberfiltering.NumberFilter": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        //Weight less than 72.\n        worksheet.getRange(\"A1:F7\").autoFilter(4, \"<72\")\n\n    ",
  "com.grapecity.documents.excel.examples.features.filtering.filteringbyicon.FilterByIcon": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        val iconset = worksheet.getRange(\"E2:E7\").formatConditions.addIconSetCondition()\n        iconset.iconSet = workbook.iconSets.get(IconSetType.Icon3TrafficLights1)\n\n        //filter in the rows which icon is green light.\n        worksheet.getRange(\"A1:F7\").autoFilter(4, workbook.iconSets.get(IconSetType.Icon3TrafficLights1).get(2), AutoFilterOperator.Icon)\n\n    ",
  "com.grapecity.documents.excel.examples.features.filtering.filteringbyicon.FilterByNoIcon": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        val iconset = worksheet.getRange(\"E2:E7\").formatConditions.addIconSetCondition()\n        iconset.iconSet = workbook.iconSets.get(IconSetType.Icon3TrafficLights1)\n\n        val condition = worksheet.getRange(\"E2:E7\").formatConditions.add(FormatConditionType.CellValue, FormatConditionOperator.Between, \"71\", \"79\") as IFormatCondition\n        condition.stopIfTrue = true\n\n        //filter in the rows which has no icon.\n        worksheet.getRange(\"A1:F7\").autoFilter(4, null, AutoFilterOperator.NoIcon)\n\n    ",
  "com.grapecity.documents.excel.examples.features.slicer.AddSlicersForPivotTable": "\n\n        val sourceData = arrayOf(arrayOf<Any?>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"), arrayOf(1, \"Carrots\", \"Vegetables\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"), arrayOf(2, \"Broccoli\", \"Vegetables\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"), arrayOf(3, \"Banana\", \"Fruit\", 617, GregorianCalendar(2018, 0, 8), \"United States\"), arrayOf(4, \"Banana\", \"Fruit\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"), arrayOf(5, \"Beans\", \"Vegetables\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"), arrayOf(6, \"Orange\", \"Fruit\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"), arrayOf(7, \"Broccoli\", \"Vegetables\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"), arrayOf(8, \"Banana\", \"Fruit\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"), arrayOf(9, \"Apple\", \"Fruit\", 2417, GregorianCalendar(2018, 0, 16), \"France\"), arrayOf(10, \"Apple\", \"Fruit\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"), arrayOf(11, \"Banana\", \"Fruit\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"), arrayOf(12, \"Broccoli\", \"Vegetables\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"), arrayOf(13, \"Carrots\", \"Vegetables\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"), arrayOf(14, \"Broccoli\", \"Vegetables\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"), arrayOf(15, \"Apple\", \"Fruit\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1:F16\").value = sourceData\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        //Create pivot cache.\n        val pivotcache = workbook.pivotCaches.create(worksheet.getRange(\"A1:F16\"))\n        //Create pivot tables.\n        val pivottable1 = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"K5\"), \"pivottable1\")\n        val pivottable2 = worksheet.pivotTables.add(pivotcache, worksheet.getRange(\"N3\"), \"pivottable2\")\n        worksheet.getRange(\"D2:D16\").numberFormat = \"$#,##0.00\"\n\n        //Config pivot fields\n        val field_product1 = pivottable1.pivotFields.get(1)\n        field_product1.orientation = PivotFieldOrientation.RowField\n\n        val field_Amount1 = pivottable1.pivotFields.get(3)\n        field_Amount1.orientation = PivotFieldOrientation.DataField\n\n        val field_product2 = pivottable2.pivotFields.get(5)\n        field_product2.orientation = PivotFieldOrientation.RowField\n\n        val field_Amount2 = pivottable2.pivotFields.get(2)\n        field_Amount2.orientation = PivotFieldOrientation.DataField\n        field_Amount2.function = ConsolidationFunction.Count\n\n        //create slicer cache, the slicers base the slicer cache just control pivot table1.\n        val cache = workbook.slicerCaches.add(pivottable1, \"Product\")\n        val slicer1 = cache.slicers.add(workbook.worksheets.get(\"Sheet1\"), \"p1\", \"Product\", 30.0, 550.0, 100.0, 200.0)\n\n        //add pivot table2 for slicer cache, the slicers base the slicer cache will control pivot tabl1 and pivot table2.\n        cache.pivotTables.addPivotTable(pivottable2)\n\n    ",
  "com.grapecity.documents.excel.examples.features.slicer.AddSlicersForTable": "\n\n        val sourceData = arrayOf(arrayOf<Any?>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"), arrayOf(1, \"Carrots\", \"Vegetables\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"), arrayOf(2, \"Broccoli\", \"Vegetables\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"), arrayOf(3, \"Banana\", \"Fruit\", 617, GregorianCalendar(2018, 0, 8), \"United States\"), arrayOf(4, \"Banana\", \"Fruit\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"), arrayOf(5, \"Beans\", \"Vegetables\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"), arrayOf(6, \"Orange\", \"Fruit\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"), arrayOf(7, \"Broccoli\", \"Vegetables\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"), arrayOf(8, \"Banana\", \"Fruit\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"), arrayOf(9, \"Apple\", \"Fruit\", 2417, GregorianCalendar(2018, 0, 16), \"France\"), arrayOf(10, \"Apple\", \"Fruit\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"), arrayOf(11, \"Banana\", \"Fruit\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"), arrayOf(12, \"Broccoli\", \"Vegetables\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"), arrayOf(13, \"Carrots\", \"Vegetables\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"), arrayOf(14, \"Broccoli\", \"Vegetables\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"), arrayOf(15, \"Apple\", \"Fruit\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        worksheet.getRange(\"A1:F16\").value = sourceData\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:F16\"), true)\n        table.columns.get(3).dataBodyRange.numberFormat = \"$#,##0.00\"\n\n        //create slicer cache for table.\n        val cache = workbook.slicerCaches.add(table, \"Category\", \"categoryCache\")\n\n        //add two slicers for Category column.\n        val slicer1 = cache.slicers.add(workbook.worksheets.get(\"Sheet1\"), \"cate1\", \"Category\", 30.0, 550.0, 100.0, 200.0)\n        val slicer2 = cache.slicers.add(workbook.worksheets.get(\"Sheet1\"), \"cate2\", \"Category\", 30.0, 700.0, 100.0, 200.0)\n\n    ",
  "com.grapecity.documents.excel.examples.features.slicer.SlicerDuplicate": "\n        val sourceData = arrayOf(arrayOf<Any?>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"), arrayOf(1, \"Carrots\", \"Vegetables\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"), arrayOf(2, \"Broccoli\", \"Vegetables\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"), arrayOf(3, \"Banana\", \"Fruit\", 617, GregorianCalendar(2018, 0, 8), \"United States\"), arrayOf(4, \"Banana\", \"Fruit\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"), arrayOf(5, \"Beans\", \"Vegetables\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"), arrayOf(6, \"Orange\", \"Fruit\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"), arrayOf(7, \"Broccoli\", \"Vegetables\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"), arrayOf(8, \"Banana\", \"Fruit\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"), arrayOf(9, \"Apple\", \"Fruit\", 2417, GregorianCalendar(2018, 0, 16), \"France\"), arrayOf(10, \"Apple\", \"Fruit\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"), arrayOf(11, \"Banana\", \"Fruit\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"), arrayOf(12, \"Broccoli\", \"Vegetables\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"), arrayOf(13, \"Carrots\", \"Vegetables\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"), arrayOf(14, \"Broccoli\", \"Vegetables\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"), arrayOf(15, \"Apple\", \"Fruit\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        worksheet.getRange(\"A1:F16\").value = sourceData\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:F16\"), true)\n        table.columns.get(3).dataBodyRange.numberFormat = \"$#,##0.00\"\n\n        //Create slicer cache for table.\n        val cache = workbook.slicerCaches.add(table, \"Category\", \"categoryCache\")\n\n        //Add slicer\n        val slicer = cache.slicers.add(workbook.worksheets.get(\"Sheet1\"), \"cate1\", \"Category\", 30.0, 550.0, 100.0, 200.0)\n\n        //Duplicate slicer\n        val newShape = slicer.shape.duplicate()\n\n    ",
  "com.grapecity.documents.excel.examples.features.slicer.ApplySlicerStyle": "\n\n        val sourceData = arrayOf(arrayOf<Any?>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"), arrayOf(1, \"Carrots\", \"Vegetables\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"), arrayOf(2, \"Broccoli\", \"Vegetables\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"), arrayOf(3, \"Banana\", \"Fruit\", 617, GregorianCalendar(2018, 0, 8), \"United States\"), arrayOf(4, \"Banana\", \"Fruit\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"), arrayOf(5, \"Beans\", \"Vegetables\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"), arrayOf(6, \"Orange\", \"Fruit\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"), arrayOf(7, \"Broccoli\", \"Vegetables\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"), arrayOf(8, \"Banana\", \"Fruit\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"), arrayOf(9, \"Apple\", \"Fruit\", 2417, GregorianCalendar(2018, 0, 16), \"France\"), arrayOf(10, \"Apple\", \"Fruit\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"), arrayOf(11, \"Banana\", \"Fruit\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"), arrayOf(12, \"Broccoli\", \"Vegetables\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"), arrayOf(13, \"Carrots\", \"Vegetables\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"), arrayOf(14, \"Broccoli\", \"Vegetables\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"), arrayOf(15, \"Apple\", \"Fruit\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        worksheet.getRange(\"A1:F16\").value = sourceData\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:F16\"), true)\n        table.columns.get(3).dataBodyRange.numberFormat = \"$#,##0.00\"\n\n        //create slicer cache for table.\n        val cache = workbook.slicerCaches.add(table, \"Category\", \"categoryCache\")\n\n        //add slicer\n        val slicer = cache.slicers.add(workbook.worksheets.get(\"Sheet1\"), \"cate1\", \"Category\", 30.0, 550.0, 100.0, 200.0)\n\n        //set slicer style to build in style.\n        slicer.style = workbook.tableStyles.get(\"SlicerStyleLight2\")\n\n    ",
  "com.grapecity.documents.excel.examples.features.slicer.SlicerCopy": "\n\n        val sourceData = arrayOf(arrayOf<Any?>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"), arrayOf(1, \"Carrots\", \"Vegetables\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"), arrayOf(2, \"Broccoli\", \"Vegetables\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"), arrayOf(3, \"Banana\", \"Fruit\", 617, GregorianCalendar(2018, 0, 8), \"United States\"), arrayOf(4, \"Banana\", \"Fruit\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"), arrayOf(5, \"Beans\", \"Vegetables\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"), arrayOf(6, \"Orange\", \"Fruit\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"), arrayOf(7, \"Broccoli\", \"Vegetables\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"), arrayOf(8, \"Banana\", \"Fruit\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"), arrayOf(9, \"Apple\", \"Fruit\", 2417, GregorianCalendar(2018, 0, 16), \"France\"), arrayOf(10, \"Apple\", \"Fruit\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"), arrayOf(11, \"Banana\", \"Fruit\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"), arrayOf(12, \"Broccoli\", \"Vegetables\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"), arrayOf(13, \"Carrots\", \"Vegetables\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"), arrayOf(14, \"Broccoli\", \"Vegetables\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"), arrayOf(15, \"Apple\", \"Fruit\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        worksheet.getRange(\"A1:F16\").value = sourceData\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:F16\"), true)\n        table.columns.get(3).dataBodyRange.numberFormat = \"$#,##0.00\"\n\n        //Create slicer cache for table.\n        val cache = workbook.slicerCaches.add(table, \"Category\", \"categoryCache\")\n\n        //Add slicer, slicer's range is Range[\"H3:J16\"]\n        val slicer = cache.slicers.add(workbook.worksheets.get(\"Sheet1\"), \"cate1\", \"Category\", 30.0, 550.0, 100.0, 200.0)\n\n        //Range[\"H3:J16\"] must contain slicer's range, copy a new shape to Range[\"K3:M16\"]\n        worksheet.getRange(\"H3:J16\").copy(worksheet.getRange(\"K3\"))\n        //worksheet.getRange(\"H3:J16\").copy(worksheet.getRange(\"K3:M16\"));\n\n        //Cross sheet copy, copy a new shape to worksheet2's Range[\"K3:M16\"]\n        //IWorksheet worksheet2 = workbook.getWorksheets().add();\n        //worksheet.getRange(\"H3:J16\").copy(worksheet2.getRange(\"K3\"));\n        //worksheet.getRange(\"H3:J16\").copy(worksheet2.getRange(\"K3:M16\"));\n\n    ",
  "com.grapecity.documents.excel.examples.features.slicer.ConfigSlicerLayout": "\n\n        val sourceData = arrayOf(arrayOf<Any?>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"), arrayOf(1, \"Carrots\", \"Vegetables\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"), arrayOf(2, \"Broccoli\", \"Vegetables\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"), arrayOf(3, \"Banana\", \"Fruit\", 617, GregorianCalendar(2018, 0, 8), \"United States\"), arrayOf(4, \"Banana\", \"Fruit\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"), arrayOf(5, \"Beans\", \"Vegetables\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"), arrayOf(6, \"Orange\", \"Fruit\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"), arrayOf(7, \"Broccoli\", \"Vegetables\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"), arrayOf(8, \"Banana\", \"Fruit\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"), arrayOf(9, \"Apple\", \"Fruit\", 2417, GregorianCalendar(2018, 0, 16), \"France\"), arrayOf(10, \"Apple\", \"Fruit\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"), arrayOf(11, \"Banana\", \"Fruit\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"), arrayOf(12, \"Broccoli\", \"Vegetables\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"), arrayOf(13, \"Carrots\", \"Vegetables\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"), arrayOf(14, \"Broccoli\", \"Vegetables\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"), arrayOf(15, \"Apple\", \"Fruit\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        worksheet.getRange(\"A1:F16\").value = sourceData\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:F16\"), true)\n        table.columns.get(3).dataBodyRange.numberFormat = \"$#,##0.00\"\n\n        //create slicer cache for table.\n        val cache = workbook.slicerCaches.add(table, \"Product\", \"productCache\")\n\n        //add slicer\n        val slicer1 = cache.slicers.add(workbook.worksheets.get(\"Sheet1\"), \"product1\", \"Product\", 30.0, 550.0, 100.0, 200.0)\n\n        //config slicer's layout.\n        slicer1.numberOfColumns = 2\n        slicer1.rowHeight = 25.0\n        slicer1.displayHeader = false\n        slicer1.shape.placement = Placement.Move\n\n    ",
  "com.grapecity.documents.excel.examples.features.slicer.AddCustomSlicerStyle": "\n\n        val sourceData = arrayOf(arrayOf<Any?>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"), arrayOf(1, \"Carrots\", \"Vegetables\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"), arrayOf(2, \"Broccoli\", \"Vegetables\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"), arrayOf(3, \"Banana\", \"Fruit\", 617, GregorianCalendar(2018, 0, 8), \"United States\"), arrayOf(4, \"Banana\", \"Fruit\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"), arrayOf(5, \"Beans\", \"Vegetables\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"), arrayOf(6, \"Orange\", \"Fruit\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"), arrayOf(7, \"Broccoli\", \"Vegetables\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"), arrayOf(8, \"Banana\", \"Fruit\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"), arrayOf(9, \"Apple\", \"Fruit\", 2417, GregorianCalendar(2018, 0, 16), \"France\"), arrayOf(10, \"Apple\", \"Fruit\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"), arrayOf(11, \"Banana\", \"Fruit\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"), arrayOf(12, \"Broccoli\", \"Vegetables\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"), arrayOf(13, \"Carrots\", \"Vegetables\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"), arrayOf(14, \"Broccoli\", \"Vegetables\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"), arrayOf(15, \"Apple\", \"Fruit\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        worksheet.getRange(\"A1:F16\").value = sourceData\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:F16\"), true)\n        table.columns.get(3).dataBodyRange.numberFormat = \"$#,##0.00\"\n\n        //create slicer cache for table.\n        val cache = workbook.slicerCaches.add(table, \"Category\", \"categoryCache\")\n\n        //add slicer\n        val slicer = cache.slicers.add(workbook.worksheets.get(\"Sheet1\"), \"cate2\", \"Category\", 30.0, 550.0, 100.0, 200.0)\n\n        //create custom slicer style.\n        val slicerStyle = workbook.tableStyles.add(\"test\")\n        //set ShowAsAvailableSlicerStyle to true, the style will be treated as slicer style.\n        slicerStyle.showAsAvailableSlicerStyle = true\n        slicerStyle.tableStyleElements.get(TableStyleElementType.WholeTable).font.name = \"Arial\"\n        slicerStyle.tableStyleElements.get(TableStyleElementType.WholeTable).font.bold = false\n        slicerStyle.tableStyleElements.get(TableStyleElementType.WholeTable).font.italic = false\n        slicerStyle.tableStyleElements.get(TableStyleElementType.WholeTable).font.color = Color.GetWhite()\n        slicerStyle.tableStyleElements.get(TableStyleElementType.WholeTable).borders.color = Color.GetLightPink()\n        slicerStyle.tableStyleElements.get(TableStyleElementType.WholeTable).interior.color = Color.GetLightGreen()\n\n        //set slicer style to custom style.\n        slicer.style = slicerStyle\n\n    ",
  "com.grapecity.documents.excel.examples.features.slicer.SlicerCut": "\n\n        val sourceData = arrayOf(arrayOf<Any?>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"), arrayOf(1, \"Carrots\", \"Vegetables\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"), arrayOf(2, \"Broccoli\", \"Vegetables\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"), arrayOf(3, \"Banana\", \"Fruit\", 617, GregorianCalendar(2018, 0, 8), \"United States\"), arrayOf(4, \"Banana\", \"Fruit\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"), arrayOf(5, \"Beans\", \"Vegetables\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"), arrayOf(6, \"Orange\", \"Fruit\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"), arrayOf(7, \"Broccoli\", \"Vegetables\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"), arrayOf(8, \"Banana\", \"Fruit\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"), arrayOf(9, \"Apple\", \"Fruit\", 2417, GregorianCalendar(2018, 0, 16), \"France\"), arrayOf(10, \"Apple\", \"Fruit\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"), arrayOf(11, \"Banana\", \"Fruit\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"), arrayOf(12, \"Broccoli\", \"Vegetables\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"), arrayOf(13, \"Carrots\", \"Vegetables\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"), arrayOf(14, \"Broccoli\", \"Vegetables\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"), arrayOf(15, \"Apple\", \"Fruit\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        worksheet.getRange(\"A1:F16\").value = sourceData\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:F16\"), true)\n        table.columns.get(3).dataBodyRange.numberFormat = \"$#,##0.00\"\n\n        //Create slicer cache for table.\n        val cache = workbook.slicerCaches.add(table, \"Category\", \"categoryCache\")\n\n        //Add slicer, slicer's range is Range[\"H3:J16\"]\n        val slicer = cache.slicers.add(workbook.worksheets.get(\"Sheet1\"), \"cate1\", \"Category\", 30.0, 550.0, 100.0, 200.0)\n\n        //Range[\"H3:J16\"] must contain slicer's range, cut a new shape to Range[\"K3:M16\"]\n        worksheet.getRange(\"H3:J16\").cut(worksheet.getRange(\"K3\"))\n        //worksheet.getRange(\"H3:J16\").cut(worksheet.getRange(\"K3:M16\"));\n\n        //Cross sheet cut, cut a new shape to worksheet2's Range[\"K3:M16\"]\n        //IWorksheet worksheet2 = workbook.getWorksheets().add();\n        //worksheet.getRange(\"H3:J16\").cut(worksheet2.getRange(\"K3\"));\n        //worksheet.getRange(\"H3:J16\").cut(worksheet2.getRange(\"K3:M16\"));\n\n    ",
  "com.grapecity.documents.excel.examples.features.slicer.UseSlicerToClearFilter": "\n\n        val sourceData = arrayOf(arrayOf<Any?>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"), arrayOf(1, \"Carrots\", \"Vegetables\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"), arrayOf(2, \"Broccoli\", \"Vegetables\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"), arrayOf(3, \"Banana\", \"Fruit\", 617, GregorianCalendar(2018, 0, 8), \"United States\"), arrayOf(4, \"Banana\", \"Fruit\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"), arrayOf(5, \"Beans\", \"Vegetables\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"), arrayOf(6, \"Orange\", \"Fruit\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"), arrayOf(7, \"Broccoli\", \"Vegetables\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"), arrayOf(8, \"Banana\", \"Fruit\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"), arrayOf(9, \"Apple\", \"Fruit\", 2417, GregorianCalendar(2018, 0, 16), \"France\"), arrayOf(10, \"Apple\", \"Fruit\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"), arrayOf(11, \"Banana\", \"Fruit\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"), arrayOf(12, \"Broccoli\", \"Vegetables\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"), arrayOf(13, \"Carrots\", \"Vegetables\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"), arrayOf(14, \"Broccoli\", \"Vegetables\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"), arrayOf(15, \"Apple\", \"Fruit\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        worksheet.getRange(\"A1:F16\").value = sourceData\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:F16\"), true)\n        table.columns.get(3).dataBodyRange.numberFormat = \"$#,##0.00\"\n\n        //Create slicer cache for table.\n        val cache = workbook.slicerCaches.add(table, \"Category\", \"categoryCache\")\n\n        //Add slicer\n        val slicer1 = cache.slicers.add(workbook.worksheets.get(\"Sheet1\"), \"cate1\", \"Category\", 30.0, 550.0, 100.0, 200.0)\n\n        //do filter operation. filter out vegetables.\n        slicer1.slicerCache.slicerItems.get(\"Vegetables\").selected = false\n\n        //clear slicer filter.\n        slicer1.slicerCache.clearAllFilters()\n\n    ",
  "com.grapecity.documents.excel.examples.features.slicer.UseSlicerDoFilter": "\n\n        val sourceData = arrayOf(arrayOf<Any?>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"), arrayOf(1, \"Carrots\", \"Vegetables\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"), arrayOf(2, \"Broccoli\", \"Vegetables\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"), arrayOf(3, \"Banana\", \"Fruit\", 617, GregorianCalendar(2018, 0, 8), \"United States\"), arrayOf(4, \"Banana\", \"Fruit\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"), arrayOf(5, \"Beans\", \"Vegetables\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"), arrayOf(6, \"Orange\", \"Fruit\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"), arrayOf(7, \"Broccoli\", \"Vegetables\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"), arrayOf(8, \"Banana\", \"Fruit\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"), arrayOf(9, \"Apple\", \"Fruit\", 2417, GregorianCalendar(2018, 0, 16), \"France\"), arrayOf(10, \"Apple\", \"Fruit\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"), arrayOf(11, \"Banana\", \"Fruit\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"), arrayOf(12, \"Broccoli\", \"Vegetables\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"), arrayOf(13, \"Carrots\", \"Vegetables\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"), arrayOf(14, \"Broccoli\", \"Vegetables\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"), arrayOf(15, \"Apple\", \"Fruit\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        worksheet.getRange(\"A1:F16\").value = sourceData\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:F16\"), true)\n        table.columns.get(3).dataBodyRange.numberFormat = \"$#,##0.00\"\n\n        //Create slicer cache for table.\n        val cache = workbook.slicerCaches.add(table, \"Category\", \"categoryCache\")\n\n        //Add slicer\n        val slicer1 = cache.slicers.add(workbook.worksheets.get(\"Sheet1\"), \"cate1\", \"Category\", 30.0, 550.0, 100.0, 200.0)\n\n        //do filter operation. filter out vegetables.\n        slicer1.slicerCache.slicerItems.get(\"Vegetables\").selected = false\n\n    ",
  "com.grapecity.documents.excel.examples.features.slicer.DoTableFilter": "\n\n        val sourceData = arrayOf(arrayOf<Any?>(\"Order ID\", \"Product\", \"Category\", \"Amount\", \"Date\", \"Country\"), arrayOf(1, \"Carrots\", \"Vegetables\", 4270, GregorianCalendar(2018, 0, 6), \"United States\"), arrayOf(2, \"Broccoli\", \"Vegetables\", 8239, GregorianCalendar(2018, 0, 7), \"United Kingdom\"), arrayOf(3, \"Banana\", \"Fruit\", 617, GregorianCalendar(2018, 0, 8), \"United States\"), arrayOf(4, \"Banana\", \"Fruit\", 8384, GregorianCalendar(2018, 0, 10), \"Canada\"), arrayOf(5, \"Beans\", \"Vegetables\", 2626, GregorianCalendar(2018, 0, 10), \"Germany\"), arrayOf(6, \"Orange\", \"Fruit\", 3610, GregorianCalendar(2018, 0, 11), \"United States\"), arrayOf(7, \"Broccoli\", \"Vegetables\", 9062, GregorianCalendar(2018, 0, 11), \"Australia\"), arrayOf(8, \"Banana\", \"Fruit\", 6906, GregorianCalendar(2018, 0, 16), \"New Zealand\"), arrayOf(9, \"Apple\", \"Fruit\", 2417, GregorianCalendar(2018, 0, 16), \"France\"), arrayOf(10, \"Apple\", \"Fruit\", 7431, GregorianCalendar(2018, 0, 16), \"Canada\"), arrayOf(11, \"Banana\", \"Fruit\", 8250, GregorianCalendar(2018, 0, 16), \"Germany\"), arrayOf(12, \"Broccoli\", \"Vegetables\", 7012, GregorianCalendar(2018, 0, 18), \"United States\"), arrayOf(13, \"Carrots\", \"Vegetables\", 1903, GregorianCalendar(2018, 0, 20), \"Germany\"), arrayOf(14, \"Broccoli\", \"Vegetables\", 2824, GregorianCalendar(2018, 0, 22), \"Canada\"), arrayOf(15, \"Apple\", \"Fruit\", 6946, GregorianCalendar(2018, 0, 24), \"France\"))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        worksheet.getRange(\"A1:F16\").value = sourceData\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:F16\"), true)\n        table.columns.get(3).dataBodyRange.numberFormat = \"$#,##0.00\"\n\n        //create slicer cache for table.\n        val cache = workbook.slicerCaches.add(table, \"Category\", \"categoryCache\")\n\n        //add slicer\n        val slicer1 = cache.slicers.add(workbook.worksheets.get(\"Sheet1\"), \"cate1\", \"Category\", 20.0, 550.0, 100.0, 200.0)\n\n        //Apply table filter, this will synchronize to the slicer, the slicer1's selected item is \"Fruit\".\n        worksheet.getRange(\"A1:F16\").autoFilter(2, \"Fruit\")\n\n    ",
  "com.grapecity.documents.excel.examples.features.conditionalformatting.CreateExpressionRule": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n        worksheet.getRange(\"A1:F7\").value = data\n\n        //expression rule, format weight greater than 68.\n        val condition = worksheet.getRange(\"E2:E7\").formatConditions.add(FormatConditionType.Expression, FormatConditionOperator.None, \"=E2>68\", null) as IFormatCondition\n        condition.interior.color = Color.GetLightPink()\n\n    ",
  "com.grapecity.documents.excel.examples.features.conditionalformatting.CreateTwoColorScaleRule": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n        worksheet.getRange(\"A1:F7\").value = data\n\n        //two color scale.\n        val twoColorScaleRule = worksheet.getRange(\"E2:E7\").formatConditions.addColorScale(ColorScaleType.TwoColorScale)\n        twoColorScaleRule.colorScaleCriteria.get(0).type = ConditionValueTypes.Number\n        twoColorScaleRule.colorScaleCriteria.get(0).value = 62\n        twoColorScaleRule.colorScaleCriteria.get(0).formatColor.color = Color.GetRed()\n\n        twoColorScaleRule.colorScaleCriteria.get(1).type = ConditionValueTypes.Number\n        twoColorScaleRule.colorScaleCriteria.get(1).value = 76\n        twoColorScaleRule.colorScaleCriteria.get(1).formatColor.color = Color.GetGreen()\n\n    ",
  "com.grapecity.documents.excel.examples.features.conditionalformatting.CreateIconSetRule": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n        worksheet.getRange(\"A1:F7\").value = data\n\n        //icon set rule.\n        val condition = worksheet.getRange(\"E2:E7\").formatConditions.addIconSetCondition()\n        condition.iconSet = workbook.iconSets.get(IconSetType.Icon3Symbols)\n        condition.iconCriteria.get(1).operator = FormatConditionOperator.GreaterEqual\n        condition.iconCriteria.get(1).value = 30\n        condition.iconCriteria.get(1).type = ConditionValueTypes.Percent\n        condition.iconCriteria.get(2).operator = FormatConditionOperator.GreaterEqual\n        condition.iconCriteria.get(2).value = 70\n        condition.iconCriteria.get(2).type = ConditionValueTypes.Percent\n\n    ",
  "com.grapecity.documents.excel.examples.features.conditionalformatting.CreateThreeColorScaleRule": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n        worksheet.getRange(\"A1:F7\").value = data\n\n        //three color scale.\n        val threeColorScaleRule = worksheet.getRange(\"E2:E7\").formatConditions.addColorScale(ColorScaleType.ThreeColorScale)\n        threeColorScaleRule.colorScaleCriteria.get(0).type = ConditionValueTypes.LowestValue\n        threeColorScaleRule.colorScaleCriteria.get(0).formatColor.color = Color.GetRed()\n\n        threeColorScaleRule.colorScaleCriteria.get(1).type = ConditionValueTypes.Percent\n        threeColorScaleRule.colorScaleCriteria.get(1).value = 30\n        threeColorScaleRule.colorScaleCriteria.get(1).formatColor.color = Color.GetYellow()\n\n        threeColorScaleRule.colorScaleCriteria.get(2).type = ConditionValueTypes.HighestValue\n        threeColorScaleRule.colorScaleCriteria.get(2).formatColor.color = Color.GetGreen()\n\n    ",
  "com.grapecity.documents.excel.examples.features.conditionalformatting.CreateDatabBarRule": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n        worksheet.getRange(\"A1:F7\").value = data\n\n        //data bar rule.\n        val dataBar = worksheet.getRange(\"E2:E7\").formatConditions.addDatabar()\n\n        dataBar.minPoint.type = ConditionValueTypes.LowestValue\n        dataBar.minPoint.value = null\n        dataBar.maxPoint.type = ConditionValueTypes.HighestValue\n        dataBar.maxPoint.value = null\n\n        dataBar.barFillType = DataBarFillType.Gradient\n        dataBar.barColor.color = Color.GetGreen()\n        dataBar.direction = DataBarDirection.Context\n        dataBar.axisColor.color = Color.GetRed()\n        dataBar.axisPosition = DataBarAxisPosition.Automatic\n        dataBar.negativeBarFormat.borderColorType = DataBarNegativeColorType.Color\n        dataBar.negativeBarFormat.borderColor.color = Color.GetBlue()\n        dataBar.negativeBarFormat.colorType = DataBarNegativeColorType.Color\n        dataBar.negativeBarFormat.color.color = Color.GetPink()\n        dataBar.showValue = false\n    ",
  "com.grapecity.documents.excel.examples.features.conditionalformatting.CreateTopBottomRule": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n        worksheet.getRange(\"A1:F7\").value = data\n\n        //top bottom rule.\n        val condition = worksheet.getRange(\"E2:E7\").formatConditions.addTop10()\n        condition.topBottom = TopBottom.Top\n        condition.rank = 50\n        condition.percent = true\n        condition.interior.color = Color.GetRed()\n\n    ",
  "com.grapecity.documents.excel.examples.features.conditionalformatting.CreateAverageRule": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"B:C\").columnWidth = 17.0\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n        worksheet.getRange(\"A1:F7\").value = data\n\n        //weight above 1 std dev average, set its interior color to green.\n        val averageCondition = worksheet.getRange(\"E2:E7\").formatConditions.addAboveAverage()\n        averageCondition.aboveBelow = AboveBelow.BelowAverage\n        averageCondition.numStdDev = 1\n        averageCondition.interior.color = Color.GetPink()\n\n    ",
  "com.grapecity.documents.excel.examples.features.conditionalformatting.CreateCellValueRule": "\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"B:C\").columnWidth = 17.0\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n        worksheet.getRange(\"A1:F7\").value = data\n\n        //weight between 66 and 70, set its interior color to light green.\n        val condition = worksheet.getRange(\"E2:E7\").formatConditions.add(FormatConditionType.CellValue, FormatConditionOperator.Between, 66, 70) as IFormatCondition\n        condition.interior.color = Color.GetLightGreen()\n\n    ",
  "com.grapecity.documents.excel.examples.features.conditionalformatting.CreateMultiRuleForRange": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n        worksheet.getRange(\"A1:F7\").value = data\n\n        //iconset rule\n        val iconset = worksheet.getRange(\"E2:E7\").formatConditions.addIconSetCondition()\n        iconset.iconSet = workbook.iconSets.get(IconSetType.Icon3TrafficLights1)\n\n        //cell value rule added later, it has the highest priority, set StopIfTrue to true, if cell match condition, it will not apply icon set rule.\n        val cellvalueRule = worksheet.getRange(\"E2:E7\").formatConditions.add(FormatConditionType.CellValue, FormatConditionOperator.Between, \"66\", \"70\") as IFormatCondition\n        cellvalueRule.font.themeColor = ThemeColor.Accent1\n        cellvalueRule.stopIfTrue = true\n\n    ",
  "com.grapecity.documents.excel.examples.features.conditionalformatting.CreateUniqueRule": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 80, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 72, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 71, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 80, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 58, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 71, 145))\n        worksheet.getRange(\"A1:F7\").value = data\n\n        //Unique rule.\n        val condition = worksheet.getRange(\"E2:E7\").formatConditions.addUniqueValues()\n        condition.dupeUnique = DupeUnique.Unique\n        condition.font.name = \"Arial\"\n        condition.interior.color = Color.GetPink()\n\n    ",
  "com.grapecity.documents.excel.examples.features.conditionalformatting.DeleteConditionalFormatRules": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n        worksheet.getRange(\"A1:F7\").value = data\n\n        //iconset rule\n        val iconset = worksheet.getRange(\"E2:E7\").formatConditions.addIconSetCondition()\n        iconset.iconSet = workbook.iconSets.get(IconSetType.Icon3TrafficLights1)\n\n        //cell value rule added later, it has the highest priority, set StopIfTrue to true, if cell match condition, it will not apply icon set rule.\n        val cellvalueRule = worksheet.getRange(\"E2:E7\").formatConditions.add(FormatConditionType.CellValue, FormatConditionOperator.Between, \"66\", \"70\") as IFormatCondition\n        cellvalueRule.stopIfTrue = true\n\n        //delete icon set rule.\n        (worksheet.getRange(\"E2:E7\").formatConditions.get(1) as IIconSetCondition).delete()\n\n        //delete all the rules\n        worksheet.getRange(\"E2:E7\").formatConditions.delete()\n\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.ToJsonFromJsonForWorksheet": "\n        //ToJson&FromJson can be used in combination with spread.sheets product:http://spread.grapecity.com/spreadjs/sheets/\n        \n        //GrapeCity Documents for Excel import an excel file.\n        //Change the path to real source file path.\n        val source = \"source.xlsx\"\n        workbook.open(source)\n        \n        //Open the same user file\n        val new_workbook = Workbook()\n        new_workbook.open(source)\n        \n        for (worksheet in workbook.getWorksheets()) {\n        \t//Do any change of worksheet\n        \t//...\n        \t\n        \t//GrapeCity Documents for Excel export a worksheet to a json string.\n        \tval json = worksheet.toJson()\n        \t//Use the json string to initialize spread.sheets product.\n        \t//Product spread.sheets will show the excel file contents.\n        \t\n        \t//Use spread.sheets product export a json string of worksheet.\n        \t//GrapeCity Documents for Excel use the json string to update content of the corresponding worksheet.\n        \tnew_workbook.getWorksheets().get(worksheet.getName()).fromJson(json)\n        }\n        \n        //GrapeCity Documents for Excel export workbook to an excel file.\n        //Change the path to real export file path.\n        val export = \"export.xlsx\"\n        new_workbook.save(export)\n\t",
  "com.grapecity.documents.excel.examples.features.worksheets.ControlAdjustingPageBreaks": "\n        val sheet = workbook.worksheets.get(0)\n        sheet.getRange(\"A1:E5\").value = arrayOf(arrayOf<Any?>(1, 2, 3, 4, 5), arrayOf<Any?>(6, 7, 8, 9, 10), arrayOf<Any?>(11, 12, 13, 14, 15), arrayOf<Any?>(16, 17, 18, 19, 20), arrayOf<Any?>(21, 22, 23, 24, 25))\n\n        // Add page break\n        sheet.hPageBreaks.add(sheet.getRange(\"D4\")) // Add a horizontal page break before the fourth row.\n        sheet.vPageBreaks.add(sheet.getRange(\"D4\")) // Add a vertical page break before the fourth column.\n\n        // Delete rows and columns before the page breaks, the page breaks will be adjusted.\n        sheet.getRange(\"1:1\").delete() // The hPageBreak is before the third row.\n        sheet.getRange(\"A:A\").delete() // The vPageBreak is before the third column.\n\n        // Set the page breaks are fixed, it will not be adjusted when inserting/deleting rows/columns.\n        sheet.fixedPageBreaks = true\n\n        sheet.getRange(\"1:1\").delete() // The hPageBreak is still before the third row.\n        sheet.getRange(\"A:A\").delete() // The vPageBreak is still before the third column.\n\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.UnprotectWorksheetWithPassword": "\n\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/Medical office start-up expenses 1.xlsx\")\n        workbook.open(fileStream)\n\n        //Use a password to protect all the worksheet. If you forget the password, you cannot unprotect the worksheet.\n        for (worksheet in workbook.getWorksheets()) {\n            worksheet.protect(\"Y6dh!et5\")\n        }\n\n        // Use the correct password to remove the above protection from the worksheet.\n        for (worksheet in workbook.getWorksheets()) {\n            worksheet.unprotect(\"Y6dh!et5\")\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.AddWorksheet": "\n\n        // Add a new worksheet to the workbook. The worksheet will be inserted into the end of the existing worksheet collection.\n        workbook.worksheets.add()\n\n        //Add a new worksheet to the specified position in the collection of worksheets.\n        workbook.worksheets.addBefore(workbook.worksheets.get(0))\n        workbook.worksheets.addAfter(workbook.worksheets.get(1))\n\n        //Set worksheet's name.\n        workbook.worksheets.get(2).name = \"Product Plan\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.ConfigureWorksheetView": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        // Worksheet view settings.\n        val sheetView = worksheet.sheetView\n        sheetView.displayFormulas = false\n        sheetView.displayRightToLeft = true\n        sheetView.gridlineColor = Color.GetRed()\n        sheetView.zoom = 200\n\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.ConfigWorksheet": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //Set worksheet tab color.\n        worksheet.tabColor = Color.GetGreen()\n\n        //Set worksheet default row height.\n        worksheet.standardHeight = 20.0\n        //Set worksheet default column width.\n        worksheet.standardWidth = 50.0\n\n        //Split worksheet to panes.\n        worksheet.splitPanes(worksheet.getRange(\"B3\").row, worksheet.getRange(\"B3\").column)\n\n        val worksheet1 = workbook.worksheets.add()\n        //Hide worksheet.\n        worksheet1.visible = Visibility.Hidden\n\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.DeleteWorksheet": "\n\n        val worksheet = workbook.worksheets.add()\n\n        //workbook must contain one visible worksheet at least, if delete the one visible worksheet, it will throw exception.\n        worksheet.delete()\n\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.MoveWorksheetBetweenWorkbooks": "\n        //Load template file Home inventory.xlsx from resource to the source workbook\n        val source_workbook = Workbook()\n        val source_fileStream = this.getResourceStream(\"xlsx/Home inventory.xlsx\")\n        source_workbook.open(source_fileStream!!)\n\n        //Move content of active sheet from source workbook to the current workbook before the first sheet\n        val move_worksheet = source_workbook.activeSheet.moveBefore(workbook.worksheets.get(0))\n        move_worksheet.name = \"Move of Home inventory\"\n        move_worksheet.activate()\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.ConfigFreezeTrailingRowCol": "\n\n        //Use sheet index to get worksheet.\n        val worksheet = workbook.worksheets[0]\n\n        // freeze pane\n        worksheet.freezePanes(2, 2)\n\n        // freeze trailing pane\n        worksheet.freezeTrailingPanes(2, 3)\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.Tag": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //Add tag for worksheet\n        worksheet.setTag(\"This is a Tag for sheet.\")\n\n        //Add tag for range A1:B2\n        worksheet.getRange(\"A1:B2\").setTag(\"This is a Tag for A1:B2\")\n\n        //Add tag for row 4\n        worksheet.getRange(\"A4\").entireRow.setTag(\"This is a Tag for Row 4\")\n\n        //Add tag for column F\n        worksheet.getRange(\"F5\").entireColumn.setTag(\"This is a Tag for Column F\")\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.AccessWorksheet": "\n\n        //Use sheet index to get worksheet.\n        val worksheet = workbook.worksheets.get(0)\n\n        //Use sheet name to get worksheet.\n        val worksheet1 = workbook.worksheets.get(\"Sheet1\")\n\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.AddChartSheet": "\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"A1:D6\").setValue(arrayOf(arrayOf(null, \"S1\", \"S2\", \"S3\"), arrayOf(\"Item1\", 10, 25, 25), arrayOf(\"Item2\", 51, 36, 27), arrayOf(\"Item3\", 52, 85, 30), arrayOf(\"Item4\", 22, 65, 65), arrayOf(\"Item5\", 23, 69, 69)))\n\n        //Add a chart sheet.\n        val chartSheet = workbook.worksheets.add(SheetType.Chart)\n\n        //Add the main chart for the chart sheet.\n        val mainChart = chartSheet.shapes.addChart(ChartType.ColumnClustered, 100.0, 100.0, 200.0, 200.0)\n        mainChart.chart.seriesCollection.add(worksheet.getRange(\"A1:D6\"))\n\n        //Make the chart sheet the active sheet.\n        chartSheet.activate()\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.ProtectWorksheetWithPassword": "\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/Medical office start-up expenses 1.xlsx\")\n        workbook.open(fileStream)\n\n        //Use a password to protect all the worksheet. If you forget the password, you cannot unprotect the worksheet.\n        for (worksheet in workbook.getWorksheets()) {\n            worksheet.protect(\"Y6dh!et5\")\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.SetBackgroundImage": "\n\n        //Use sheet index to get worksheet.\n        val worksheet = workbook.worksheets.get(0)\n\n        val inputStream = this.getResourceStream(\"logo.png\")\n        try {\n            val bytes = ByteArray(inputStream!!.available())\n            inputStream.read(bytes, 0, bytes.size)\n            worksheet.backgroundPicture = bytes\n        } catch (ioe: IOException) {\n            ioe.printStackTrace()\n        }\n\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.ProtectWorksheet": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //protect worksheet, allow insert column.\n        worksheet.protection = true\n        worksheet.protectionSettings.allowInsertingColumns = true\n\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.MoveWorksheet": "\n        //Load template file AgingReport.xlsx from resource\n        val fileStream = this.getResourceStream(\"xlsx/AgingReport.xlsx\")\n        workbook.open(fileStream!!)\n\n        //Move the active sheet to the end of current workbook\n        val move_worksheet = workbook.activeSheet.move()\n        move_worksheet.name = \"Move of \" + workbook.activeSheet.name\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.ConfigFrozenLineColor": "\n\n        //Use sheet index to get worksheet.\n        val worksheet = workbook.worksheets[0]\n\n        // freeze pane\n        worksheet.freezePanes(5, 5)\n\n        // Set frozen line color as dark blue.\n        worksheet.frozenLineColor = Color.GetDarkBlue()\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.CopyWorksheetBetweenWorkbooks": "\n        //Load template file Home inventory.xlsx from resource to the source workbook\n        val source_workbook = Workbook()\n        val source_fileStream = this.getResourceStream(\"xlsx/Home inventory.xlsx\")\n        source_workbook.open(source_fileStream!!)\n\n        //Copy content of active sheet from source workbook to the current workbook before the first sheet\n        val copy_worksheet = source_workbook.activeSheet.copyBefore(workbook.worksheets.get(0))\n        copy_worksheet.name = \"Copy of Home inventory\"\n        copy_worksheet.activate()\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.ConfigShowHVGridlinesSeparately": "\n\n        //Use sheet index to get worksheet.\n        val worksheet = workbook.worksheets[0]\n\n        // Set not to show horizontal gridlines\n        worksheet.sheetView.displayHorizontalGridlines = false\n\n        // Set to show vertical gridlines\n        worksheet.sheetView.displayVerticalGridlines = true\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.ActivateWorksheet": "\n\n        val worksheet = workbook.worksheets.add()\n        //Activate new created worksheet.\n        worksheet.activate()\n\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.AutoFit": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        // Auto fit column width of range 'A1'\n        worksheet.getRange(\"A1\").value = \"Grapecity Documents for Excel\"\n        worksheet.getRange(\"A1\").columns.autoFit()\n\n        //Auto fit row height of range 'B2'\n        worksheet.getRange(\"B2\").value = \"Grapecity\"\n        worksheet.getRange(\"B2\").font.size = 20.0\n        worksheet.getRange(\"B2\").rows.autoFit()\n\n        //Auto fit column width and row height of range 'C3'\n        worksheet.getRange(\"C3\").value = \"Grapecity Documents for Excel\"\n        worksheet.getRange(\"C3\").font.size = 32.0\n        worksheet.getRange(\"C3\").autoFit()\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.CopyWorksheet": "\n        //Load template file AgingReport.xlsx from resource\n        val fileStream = this.getResourceStream(\"xlsx/AgingReport.xlsx\")\n        workbook.open(fileStream!!)\n\n        //Copy the active sheet to the end of current workbook\n        val copy_worksheet = workbook.activeSheet.copy()\n        copy_worksheet.name = \"Copy of \" + workbook.activeSheet.name\n    ",
  "com.grapecity.documents.excel.examples.features.worksheets.UnprotectWorksheet": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //protect worksheet, allow insert column.\n        worksheet.protection = true\n        worksheet.protectionSettings.allowInsertingColumns = true\n\n        //Unprotect worksheet.\n        worksheet.protection = false\n\n    ",
  "com.grapecity.documents.excel.examples.features.htmlexporting.SaveRangeToHtml": "\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/BreakEven.xlsx\")\n        workbook.open(fileStream)\n\n        val options = HtmlSaveOptions()\n\n        // Export first sheet\n        options.setExportSheetName(workbook.getWorksheets().get(0).getName())\n\n        // Set export area\n        options.setExportArea(\"D2:G23\")\n\n        // Set exported html file name\n        options.setExportFileName(\"range\")\n\n        workbook.save(outputStream, options)\n    ",
  "com.grapecity.documents.excel.examples.features.htmlexporting.SaveWorkbookToHtml": "\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/Project tracker.xlsx\")\n        workbook.open(fileStream)\n\n        workbook.save(outputStream, SaveFileFormat.Html)\n    ",
  "com.grapecity.documents.excel.examples.features.htmlexporting.SaveWorksheetToHtml": "\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/BreakEven.xlsx\")\n        workbook.open(fileStream)\n\n        val options = HtmlSaveOptions()\n\n        // Export first sheet\n        options.setExportSheetName(workbook.getWorksheets().get(0).getName())\n\n        // Set exported html file name\n        options.setExportFileName(\"Analysis\")\n\n        workbook.save(outputStream, options)\n    ",
  "com.grapecity.documents.excel.examples.features.htmlexporting.SaveWorksheetToSingleHtml": "\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/BreakEven.xlsx\")\n        workbook.open(fileStream)\n\n        val options = HtmlSaveOptions()\n\n        // Export first sheet\n        options.setExportSheetName(workbook.getWorksheets().get(0).getName())\n\n        // Set exported image as base64\n        options.setExportImageAsBase64(true)\n\n        // Set exported css style in html file\n        options.setExportCssSeparately(false)\n\n        // Set not to export single tab in html\n        options.setExportSingleTab(false)\n\n        workbook.save(outputStream, options)\n    ",
  "com.grapecity.documents.excel.examples.features.htmlexporting.SaveHtmlWithHeadingsAndGridlines": "\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/Home maintenance schedule and task list.xlsx\")\n        workbook.open(fileStream)\n\n        val options = HtmlSaveOptions()\n\n        // Set exporting row/column headings\n        options.setExportHeadings(true)\n\n        // Set exporting gridlines\n        options.setExportGridlines(true)\n\n        // Set exported html file name\n        options.setExportFileName(\"schedule\")\n\n        workbook.save(outputStream, options)\n    ",
  "com.grapecity.documents.excel.examples.features.htmlexporting.SaveHtmlWithScalableWidth": "\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/NetProfit.xlsx\")\n        workbook.open(fileStream)\n\n        val options = HtmlSaveOptions()\n\n        // Set html with scalable width\n        options.setIsWidthScalable(true)\n\n        // Set exported html file name\n        options.setExportFileName(\"NetProfit\")\n\n        workbook.save(outputStream, options)\n    ",
  "com.grapecity.documents.excel.examples.features.shape.ShapeCut": "\n\n        val worksheet = workbook.worksheets.get(0)\n        //Create a shape in worksheet, shape's range is Range[\"A7:B7\"]\n        val shape = worksheet.shapes.addShape(AutoShapeType.Rectangle, 1.0, 1.0, 100.0, 100.0)\n        //Range[\"A1:D10\"] must contain Range[\"A7:B7\"], cut a new shape to Range[\"C1:F7\"]\n        worksheet.getRange(\"A1:D10\").cut(worksheet.getRange(\"E1\"))\n        worksheet.getRange(\"A1:D10\").cut(worksheet.getRange(\"E1:I9\"))\n\n        //Cross sheet cut, cut a new shape to worksheet2's Range[\"C1:F7\"]\n        //IWorksheet worksheet2 = workbook.getWorksheets().add();\n        //worksheet.getRange(\"A1:D10\").cut(worksheet2.getRange(\"E1\"));\n        //worksheet.getRange(\"A1:D10\").cut(worksheet2.getRange(\"E1:I9\"));\n    ",
  "com.grapecity.documents.excel.examples.features.shape.ConfigShapeWithPictureFill": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addShape(AutoShapeType.Parallelogram, 20.0, 20.0, 200.0, 100.0)\n        val stream = this.getResourceStream(\"logo.png\")\n\n        try {\n            shape.fill.userPicture(stream, ImageType.JPG)\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n\n        shape.pictureFormat.colorType = PictureColorType.Grayscale\n        shape.pictureFormat.brightness = 0.6\n        shape.pictureFormat.contrast = 0.3\n        shape.pictureFormat.crop.pictureOffsetX = 10.0\n        shape.pictureFormat.crop.pictureOffsetY = -5.0\n        shape.pictureFormat.crop.pictureWidth = 120.0\n        shape.pictureFormat.crop.pictureHeight = 80.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.shape.ConfigShapeWithPatternFill": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addShape(AutoShapeType.Parallelogram, 1.0, 1.0, 200.0, 100.0)\n        shape.fill.patterned(PatternType.Percent10)\n        shape.fill.color.objectThemeColor = ThemeColor.Accent2\n        shape.fill.patternColor.objectThemeColor = ThemeColor.Accent6\n\n    ",
  "com.grapecity.documents.excel.examples.features.shape.SetShapeZOrder": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shapes = worksheet.shapes\n\n        val rectangle = shapes.addShape(AutoShapeType.Rectangle, 20.0, 20.0, 100.0, 100.0)\n        rectangle.fill.color.rgb = Color.FromArgb(169, 209, 142)\n\n        val oval = shapes.addShape(AutoShapeType.Oval, 50.0, 50.0, 100.0, 100.0)\n        oval.fill.color.rgb = Color.FromArgb(157, 195, 230)\n\n        val triangle = shapes.addShape(AutoShapeType.IsoscelesTriangle, 80.0, 80.0, 100.0, 100.0)\n        triangle.fill.color.rgb = Color.FromArgb(255, 230, 153)\n\n        // Set rectangle above oval\n        rectangle.zOrder(ZOrderType.BringForward)\n\n        // Set triangle to bottom\n        triangle.zOrder(ZOrderType.SendToBack)\n    ",
  "com.grapecity.documents.excel.examples.features.shape.ConfigAdjustmentPoints": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addShape(AutoShapeType.RightArrowCallout, 20.0, 20.0, 200.0, 100.0)\n\n        val adjustments = shape.adjustments\n        adjustments.set(0, 0.5)// arrow neck width\n        adjustments.set(1, 0.4)// arrow head width\n        adjustments.set(2, 0.5)// arrow head height\n        adjustments.set(3, 0.6)// text box width\n\n    ",
  "com.grapecity.documents.excel.examples.features.shape.ShapeCopy": "\n\n        val worksheet = workbook.worksheets.get(0)\n        //Create a shape in worksheet, shape's range is Range[\"A7:B7\"]\n        val shape = worksheet.shapes.addShape(AutoShapeType.Rectangle, 1.0, 1.0, 100.0, 100.0)\n        //Range[\"A1:D10\"] must contain Range[\"A7:B7\"], copy a new shape to Range[\"C1:F7\"]\n        worksheet.getRange(\"A1:D10\").copy(worksheet.getRange(\"E1\"))\n        worksheet.getRange(\"A1:D10\").copy(worksheet.getRange(\"E1:I9\"))\n\n        //Cross sheet copy, copy a new shape to worksheet2's Range[\"C1:F7\"]\n        //IWorksheet worksheet2 = workbook.getWorksheets().add();\n        //worksheet.getRange(\"A1:D10\").copy(worksheet2.getRange(\"E1\"));\n        //worksheet.getRange(\"A1:D10\").copy(worksheet2.getRange(\"E1:I9\"));\n    ",
  "com.grapecity.documents.excel.examples.features.shape.ConfigShapeLine": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addShape(AutoShapeType.Parallelogram, 1.0, 1.0, 200.0, 100.0)\n        shape.line.dashStyle = LineDashStyle.Dash\n        shape.line.style = LineStyle.Single\n        shape.line.weight = 2.0\n        shape.line.color.objectThemeColor = ThemeColor.Accent6\n        shape.line.transparency = 0.3\n\n    ",
  "com.grapecity.documents.excel.examples.features.shape.ShapeGroup": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shapes = worksheet.shapes\n        val pentagon = shapes.addShape(AutoShapeType.RegularPentagon, 89.4, 57.0, 153.6, 90.6)\n        val pie = shapes.addShape(AutoShapeType.Pie, 344.4, 156.8, 50.4, 60.0)\n        val shpRange = shapes.getRange(arrayOf<String>(pentagon.name, pie.name))\n\n        // Group the shape range\n        val grouped = shpRange.group()\n\n        grouped.getLine().setVisible(true)\n        grouped.getLine().getColor().setRGB(Color.GetOrange())\n    ",
  "com.grapecity.documents.excel.examples.features.shape.AddShapeWithCustomName": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addShape(\"custom parallelogram\", AutoShapeType.Parallelogram, 1.0, 1.0, 200.0, 100.0)\n\n        // Get shape by name\n        val parallelogram = worksheet.shapes[\"custom parallelogram\"]\n        parallelogram.fill.color.rgb = Color.GetRed()\n    ",
  "com.grapecity.documents.excel.examples.features.shape.ConfigShapeWithSolidFill": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addShape(AutoShapeType.Parallelogram, 1.0, 1.0, 200.0, 100.0)\n        shape.fill.solid()\n        shape.fill.color.rgb = Color.GetRed()\n\n    ",
  "com.grapecity.documents.excel.examples.features.shape.ShapeDuplicate": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //Create shape\n        val shape = worksheet.shapes.addShape(AutoShapeType.Rectangle, 50.0, 50.0, 200.0, 200.0)\n\n        //Duplicate shape\n        val newShape = shape.duplicate()\n    ",
  "com.grapecity.documents.excel.examples.features.shape.ConfigShape3DFormat": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addShape(AutoShapeType.Parallelogram, 50.0, 30.0, 200.0, 100.0)\n        shape.threeD.rotationX = 50.0\n        shape.threeD.rotationY = 20.0\n        shape.threeD.rotationZ = 30.0\n        shape.threeD.depth = 7.0\n        shape.threeD.z = 20.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.shape.ConnectShapesByConnector": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shapeBegin = worksheet.shapes.addShape(AutoShapeType.Rectangle, 1.0, 1.0, 100.0, 100.0)\n        val endBegin = worksheet.shapes.addShape(AutoShapeType.Rectangle, 200.0, 200.0, 100.0, 100.0)\n        val ConnectorShape = worksheet.shapes.addConnector(ConnectorType.Straight, 1f, 1f, 101f, 101f)\n\n        //connect shapes by connector shape.\n        ConnectorShape.connectorFormat.beginConnect(shapeBegin, 3)\n        ConnectorShape.connectorFormat.endConnect(endBegin, 0)\n\n    ",
  "com.grapecity.documents.excel.examples.features.shape.SetShapeText": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addShape(AutoShapeType.Parallelogram, 1.0, 1.0, 200.0, 100.0)\n        shape.width = 500.0\n        shape.height = 200.0\n\n        shape.textFrame.textRange.font.color.rgb = Color.FromArgb(0, 255, 0)\n        shape.textFrame.textRange.font.bold = true\n        shape.textFrame.textRange.font.italic = true\n        shape.textFrame.textRange.font.size = 20.0\n        shape.textFrame.textRange.font.strikethrough = true\n\n        shape.textFrame.textRange.paragraphs.add(\"This is a parallelogram shape.\")\n        shape.textFrame.textRange.paragraphs.add(\"My name is XXX\")\n        shape.textFrame.textRange.paragraphs.get(1).runs.add(\"Hello World!\")\n\n        shape.textFrame.textRange.paragraphs.get(1).runs.get(0).font.strikethrough = false\n        shape.textFrame.textRange.paragraphs.get(1).runs.get(0).font.size = 35.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.shape.ShapeUngroup": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val shapes = worksheet.shapes\n        val pentagon = shapes.addShape(AutoShapeType.RegularPentagon, 89.4, 57.0, 153.6, 90.6)\n        val pie = shapes.addShape(AutoShapeType.Pie, 344.4, 156.8, 50.4, 60.0)\n        var shpRange = shapes.getRange(arrayOf<String>(pentagon.name, pie.name))\n\n        // Group the shape range\n        val grouped = shpRange.group()\n\n        // Ungroup the group shape\n        shpRange = grouped.ungroup()\n    ",
  "com.grapecity.documents.excel.examples.features.shape.ConfigGradientFillWithPathShape": "\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/WebsiteFlowChart.xlsx\")\n        workbook.open(fileStream!!)\n\n        val worksheet = workbook.worksheets[0]\n\n        //Get \"Idea\"\n        val idea = worksheet.shapes[\"Idea\"]\n        idea.fill.twoColorGradient(GradientStyle.FromCenter, 1)\n\n        idea.fill.gradientStops[0].position = 0.33\n        idea.fill.gradientStops[0].color.rgb = com.grapecity.documents.excel.Color.FromArgb(0, 112, 192)\n\n        idea.fill.gradientStops[1].position = 1.0\n        idea.fill.gradientStops[1].color.rgb = com.grapecity.documents.excel.Color.GetWhite()\n\n        //Set gradient path type as \"Path\"\n        idea.fill.gradientPathType = PathShapeType.Path\n\n        //Get \"Functionality\"\n        val functionality = worksheet.shapes[\"Functionality\"]\n        functionality.fill.twoColorGradient(GradientStyle.FromCenter, 1)\n\n        functionality.fill.gradientStops[0].position = 0.33\n        functionality.fill.gradientStops[0].color.rgb = com.grapecity.documents.excel.Color.FromArgb(0, 112, 192)\n\n        functionality.fill.gradientStops[1].position = 1.0\n        functionality.fill.gradientStops[1].color.rgb = com.grapecity.documents.excel.Color.GetWhite()\n\n        //Set gradient path type as \"Path\"\n        functionality.fill.gradientPathType = PathShapeType.Path\n    ",
  "com.grapecity.documents.excel.examples.features.shape.SetShapeTextAlignment": "\n\n        // Open an excel file\n        val fileStream = this.getResourceStream(\"xlsx/WebsiteFlowChart[Template].xlsx\")\n        workbook.open(fileStream)\n\n        val worksheet = workbook.getWorksheets().get(0)\n\n        for (shape in worksheet.getShapes()) {\n            //Centers text vertically.\n            shape.getTextFrame().setVerticalAnchor(VerticalAnchor.AnchorMiddle)\n            //Centers text horizontally.\n            shape.getTextFrame().setHorizontalAnchor(HorizontalAnchor.Center)\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.shape.ConfigShapeWithTextureFill": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addShape(AutoShapeType.Parallelogram, 1.0, 1.0, 200.0, 100.0)\n        shape.fill.presetTextured(PresetTexture.Canvas)\n        shape.fill.textureAlignment = TextureAlignment.Center\n        shape.fill.textureOffsetX = 2.5\n        shape.fill.textureOffsetY = 3.2\n        shape.fill.textureHorizontalScale = 0.9\n        shape.fill.textureVerticalScale = 0.2\n        shape.fill.transparency = 0.5\n\n    ",
  "com.grapecity.documents.excel.examples.features.shape.ConfigShapeWithGradientFill": "\n\n        val worksheet = workbook.worksheets.get(0)\n        val shape = worksheet.shapes.addShape(AutoShapeType.Parallelogram, 1.0, 1.0, 200.0, 100.0)\n        shape.fill.presetGradient(GradientStyle.Vertical, 3, PresetGradientType.Silver)\n        shape.fill.rotateWithObject = false\n\n    ",
  "com.grapecity.documents.excel.examples.features.customfunctions.MyConditionalSumFunction": "\n        Workbook.AddCustomFunction(MyConditionalSumFunctionX())\n        val worksheet = workbook.activeSheet\n        worksheet.getRange(\"A1:A10\").value = arrayOf(arrayOf<Any?>(1), arrayOf<Any?>(2), arrayOf<Any?>(3), arrayOf<Any?>(4), arrayOf<Any?>(5), arrayOf<Any?>(6), arrayOf<Any?>(7), arrayOf<Any?>(8), arrayOf<Any?>(9), arrayOf<Any?>(10))\n        val cellValueRule = worksheet.getRange(\"A1:A10\").formatConditions.add(FormatConditionType.CellValue, FormatConditionOperator.Greater, 5, null) as IFormatCondition\n        cellValueRule.interior.color = Color.GetRed()\n\n        //Sum cells value which display format interior color are red.\n        worksheet.getRange(\"C1\").formula = \"=MyConditionalSum(A1:A10)\"\n\n        //Range[\"C1\"]'s value is 40.\n        val result = worksheet.getRange(\"C1\").value\n\n\n        /* Implementation of MyAddFunctionX\n\n              class MyConditionalSumFunctionX extends CustomFunction {\n                public MyConditionalSumFunctionX() {\n                    super(\"MyConditionalSum\", FunctionValueType.Number, CreateParameters());\n                }\n\n                private static Parameter[] CreateParameters() {\n                    Parameter[] parameters = new Parameter[254];\n                    for (int i = 0; i < 254; i++) {\n                        parameters[i] = new Parameter(FunctionValueType.Object, true);\n                    }\n\n                    return parameters;\n                }\n\n                @Override\n                public Object evaluate(Object[] arguments, ICalcContext context) {\n                    double sum = 0d;\n                    for (Object argument : arguments) {\n                        Iterable<Object> iterator = toIterable(argument);\n                        for (Object item : iterator) {\n                            if (item instanceof CalcError) {\n                                return item;\n                            } else if (item instanceof Double) {\n                                sum += (double) item;\n                            }\n                        }\n                    }\n\n                    return sum;\n                }\n\n                private static Iterable<Object> toIterable(Object obj) {\n                    if (obj instanceof Iterable) {\n                        return (Iterable) obj;\n                    } else if (obj instanceof Object[][]) {\n                        List<Object> list = new ArrayList<Object>();\n                        Object[][] array = (Object[][]) obj;\n                        for (int i = 0; i < array.length; i++) {\n                            for (int j = 0; j < array[i].length; j++) {\n                                list.add(array[i][j]);\n                            }\n                        }\n                        return list;\n                    } else if (obj instanceof CalcReference) {\n                        List<Object> list = new ArrayList<Object>();\n                        CalcReference reference = (CalcReference) obj;\n                        for (IRange range : reference.getRanges()) {\n                            int rowCount = range.getRows().getCount();\n                            int colCount = range.getColumns().getCount();\n                            for (int i = 0; i < rowCount; i++) {\n                                for (int j = 0; j < colCount; j++) {\n                                    if (range.getCells().get(i, j).getDisplayFormat().getInterior().getColor().equals(Color.getRed())) {\n                                        list.add(range.getCells().get(i, j).getValue());\n                                    }\n                                }\n                            }\n                        }\n                        return list;\n                    } else {\n                        List<Object> list = new ArrayList<Object>();\n                        list.add(obj);\n                        return list;\n                    }\n                }\n            }\n          */\n    ",
  "com.grapecity.documents.excel.examples.features.customfunctions.MySumFunction": "\n        Workbook.AddCustomFunction(MySumFunctionX())\n\n        val worksheet = workbook.activeSheet\n        worksheet.getRange(\"A1\").value = 1\n        worksheet.getRange(\"B1\").value = 2\n        worksheet.getRange(\"C1\").formula = \"=MySum(A1:B1, 2, {3,4})\"\n\n        //getRange(\"C1\")'s value is 12.\n        val result = worksheet.getRange(\"C1\").value\n\n\n        /* Implementation of MyAddFunctionX\n\n            class MySumFunctionX extends CustomFunction {\n                public MySumFunctionX() {\n                    super(\"MySum\", FunctionValueType.Number, CreateParameters());\n                }\n\n                private static Parameter[] CreateParameters() {\n                    Parameter[] parameters = new Parameter[254];\n                    for (int i = 0; i < 254; i++) {\n                        parameters[i] = new Parameter(FunctionValueType.Object);\n                    }\n\n                    return parameters;\n                }\n\n                @Override\n                public Object evaluate(Object[] arguments, ICalcContext context) {\n                    double sum = 0d;\n                    for (Object argument : arguments) {\n                        Iterable<Object> iterator = toIterable(argument);\n                        for (Object item : iterator) {\n                            if (item instanceof CalcError) {\n                                return item;\n                            }\n                            if (item instanceof Double) {\n                                sum += (double) item;\n                            }\n                        }\n                    }\n\n                    return sum;\n                }\n\n                private static Iterable<Object> toIterable(Object obj) {\n                    if (obj instanceof Iterable) {\n                        return (Iterable) obj;\n                    } else if (obj instanceof Object[][]) {\n                        List<Object> list = new ArrayList<Object>();\n                        Object[][] array = (Object[][]) obj;\n                        for (int i = 0; i < array.length; i++) {\n                            for (int j = 0; j < array[i].length; j++) {\n                                list.add(array[i][j]);\n                            }\n                        }\n                        return list;\n                    } else {\n                        List<Object> list = new ArrayList<Object>();\n                        list.add(obj);\n                        return list;\n                    }\n                }\n            }\n\n          */\n    ",
  "com.grapecity.documents.excel.examples.features.customfunctions.MyAddFunction": "\n        Workbook.AddCustomFunction(MyAddFunctionX())\n        val worksheet = workbook.activeSheet\n        worksheet.getRange(\"A1\").value = 1\n        worksheet.getRange(\"B1\").value = 2\n        worksheet.getRange(\"C1\").formula = \"=MyAdd(A1, B1)\"\n\n        // Range C1's value is 3\n        val result = worksheet.getRange(\"C1\").value\n\n        worksheet.getRange(\"E1:F2\").value = arrayOf(arrayOf<Any?>(1, 3), arrayOf<Any?>(2, 4))\n\n        worksheet.getRange(\"G1:G2\").formulaArray = \"=MyAdd(E1:E2, F1:F2)\"\n\n        //Range G1's value is 4, Range G2's value is 6.\n        val resultG1 = worksheet.getRange(\"G1\").value\n        val resultG2 = worksheet.getRange(\"G2\").value\n\n        /* Implementation of MyAddFunctionX\n\n            class MyAddFunctionX extends CustomFunction {\n                public MyAddFunctionX() {\n                    super(\"MyAdd\", FunctionValueType.Number, new Parameter[]{new Parameter(FunctionValueType.Number), new Parameter(FunctionValueType.Number)});\n                }\n\n                @Override\n                public Object evaluate(Object[] arguments, ICalcContext context) {\n                    return (double) arguments[0] + (double) arguments[1];\n                }\n            }\n\n          */\n    ",
  "com.grapecity.documents.excel.examples.features.customfunctions.MyConcatenateFunction": "\n        Workbook.AddCustomFunction(MyConcatenateFunctionX())\n\n        val worksheet = workbook.activeSheet\n        worksheet.getRange(\"A1\").formula = \"=MyConcatenate(\\\"I\\\", \\\" \\\", \\\"live\\\", \\\" \\\", \\\"in\\\", \\\" \\\", \\\"Xi'an\\\", \\\".\\\")\"\n        worksheet.getRange(\"A2\").formula = \"=MyConcatenate(A1, \\\"haha.\\\")\"\n\n        worksheet.getRange(\"B1\").value = 12\n        worksheet.getRange(\"B2\").value = 34\n        worksheet.getRange(\"B3\").formula = \"=MyConcatenate(B1, B2)\"\n\n        worksheet.getRange(\"M5:N5\").formulaArray = \"=CONCATENATE({\\\"aa\\\",\\\"bb\\\"}, 12, 34)\"\n\n        //\"I live in Xi'an.\"\n        val resultA1 = worksheet.getRange(\"A1\").value\n        //\"I live in Xi'an.haha.\"\n        val resultA2 = worksheet.getRange(\"A2\").value\n        //\"12.034.0\"\n        val resultB3 = worksheet.getRange(\"B3\").value\n        //\"aa1234\"\n        val resultM5 = worksheet.getRange(\"M5\").value\n        //\"bb1234\"\n        val resultN5 = worksheet.getRange(\"N5\").value\n\n\n        /* Implementation of MyAddFunctionX\n\n            class MyConcatenateFunctionX extends CustomFunction {\n                public MyConcatenateFunctionX() {\n                    super(\"MyConcatenate\", FunctionValueType.Text, CreateParameters());\n                }\n\n                static Parameter[] CreateParameters() {\n                    Parameter[] parameters = new Parameter[254];\n                    for (int i = 0; i < 254; i++) {\n                        parameters[i] = new Parameter(FunctionValueType.Variant);\n                    }\n\n                    return parameters;\n                }\n\n                @Override\n                public Object evaluate(Object[] arguments, ICalcContext context) {\n                    StringBuilder sb = new StringBuilder();\n\n                    for (Object argument : arguments) {\n                        if (argument instanceof CalcError) {\n                            return argument;\n                        }\n                        if (argument instanceof String || argument instanceof Double) {\n                            sb.append(argument);\n                        }\n                    }\n\n                    return sb.toString();\n                }\n            }\n\n          */\n    ",
  "com.grapecity.documents.excel.examples.features.customfunctions.MyIsMergedRangeFunction": "\n        Workbook.AddCustomFunction(MyIsMergedRangeFunctionX())\n\n        val worksheet = workbook.activeSheet\n\n        worksheet.getRange(\"A1:B2\").merge()\n\n        worksheet.getRange(\"C1\").formula = \"=MyIsMergedRange(A1)\"\n        worksheet.getRange(\"C2\").formula = \"=MyIsMergedRange(H2)\"\n\n        //A1 is a merged cell, getRange(\"C1\")'s value is true.\n        val resultC1 = worksheet.getRange(\"C1\").value\n\n        //H2 is not a merged cell, getRange(\"C2\")'s value is false.\n        val resultC2 = worksheet.getRange(\"C2\").value\n\n        /* Implementation of MyAddFunctionX\n\n            class MyIsMergedRangeFunctionX extends CustomFunction {\n                public MyIsMergedRangeFunctionX() {\n                    super(\"MyIsMergedRange\", FunctionValueType.Boolean, new Parameter[]{new Parameter(FunctionValueType.Object, true)});\n                }\n\n                @Override\n                public Object evaluate(Object[] arguments, ICalcContext context) {\n                    if (arguments[0] instanceof CalcReference) {\n                        if (arguments[0] instanceof CalcReference) {\n                            List<IRange> ranges = ((CalcReference) arguments[0]).getRanges();\n                            for (IRange range : ranges) {\n                                return range.getMergeCells();\n                            }\n                        }\n                    }\n\n                    return false;\n                }\n            }\n\n          */\n    ",
  "com.grapecity.documents.excel.examples.features.customfunctions.MyIsErrorFunction": "\n        Workbook.AddCustomFunction(MyIsErrorFunctionX())\n\n        val worksheet = workbook.activeSheet\n\n        worksheet.getRange(\"A1\").value = CalcError.Num\n        worksheet.getRange(\"A2\").value = 100\n\n        worksheet.getRange(\"B1\").formula = \"=MyIsError(A1)\"\n        worksheet.getRange(\"B2\").formula = \"=MyIsError(A2)\"\n\n        //getRange(\"B1\")'s value is true.\n        val resultB1 = worksheet.getRange(\"B1\").value\n\n        //getRange(\"B2\")'s value is false.\n        val resultB2 = worksheet.getRange(\"B2\").value\n\n        /* Implementation of MyAddFunctionX\n\n            class MyIsErrorFunctionX extends CustomFunction {\n                public MyIsErrorFunctionX() {\n                    super(\"MyIsError\", FunctionValueType.Boolean, new Parameter[]{new Parameter(FunctionValueType.Variant)});\n                }\n\n                @Override\n                public Object evaluate(Object[] arguments, ICalcContext context) {\n                    if (arguments[0] instanceof CalcError) {\n                        if ((CalcError) arguments[0] != CalcError.None && (CalcError) arguments[0] != CalcError.GettingData) {\n                            return true;\n                        } else {\n                            return false;\n                        }\n                    }\n\n                    return false;\n                }\n            }\n\n          */\n    ",
  "com.grapecity.documents.excel.examples.features.findandreplace.FindWithAfter": "\n        val worksheet = workbook.worksheets.get(0)\n\n        // Prepare data\n        val CorrectWord = \"Macro\"\n        worksheet.getRange(\"A1:D5\").value = CorrectWord\n\n        val MisspelledWord = \"marco\"\n        worksheet.getRange(\"A2,C3,D1\").value = MisspelledWord\n\n        // Find all misspelled words and mark them with red background\n        val searchRange = worksheet.getRange(\"A1:D5\")\n        var misspelledCell: IRange? = null\n        do {\n            misspelledCell = searchRange.find(MisspelledWord, misspelledCell)\n            if (misspelledCell == null) {\n                break\n            }\n            misspelledCell.interior.color = Color.GetRed()\n        } while (true)\n    ",
  "com.grapecity.documents.excel.examples.features.findandreplace.FindWithLookIn": "\n        val worksheet = workbook.worksheets.get(0)\n\n        // Prepare data\n\n        // Add day to date\n        // Day Date Result\n        // 1 2019-05-01 2019-05-02\n        worksheet.getRange(\"A2:C2\").value = arrayOf(\"Day\", \"Date\", \"Result\")\n        worksheet.getRange(\"A1\").value = \"Add day to date\"\n        worksheet.getRange(\"A3\").value = 1\n        worksheet.getRange(\"A3\").addComment(\"Enter the day offset\")\n        worksheet.getRange(\"B3\").formula = \"=DATE(2019,5,1)\"\n        worksheet.getRange(\"B3\").numberFormat = \"yyyy-mm-dd;@\"\n        worksheet.getRange(\"C3\").formula = \"=B3+1\"\n        worksheet.getRange(\"C3\").numberFormat = \"yyyy-mm-dd;@\"\n        worksheet.usedRange.autoFit()\n\n        // Find the first occurrence of \"2019\" in the formula bar\n        // and mark it with green foreground color\n\n        val searchRange = worksheet.getRange(\"A1:C3\")\n        val tempVar = FindOptions()\n        tempVar.lookIn = FindLookIn.Formulas\n\n        val first2019InFormulaBar = searchRange.find(\"2019\", null, tempVar)\n        first2019InFormulaBar.font.color = Color.GetGreen()\n\n        // Find the first occurrence of 1 in text\n        // and mark it with blue foreground\n        val tempVar2 = FindOptions()\n        tempVar2.lookIn = FindLookIn.Texts\n\n        val firstValue1 = searchRange.find(1, null, tempVar2)\n        firstValue1.font.color = Color.GetBlue()\n\n        // Find the first occurrence of \"day\" in comments\n        // and mark it with yellow background\n        val tempVar3 = FindOptions()\n        tempVar3.lookIn = FindLookIn.Comments\n\n        val firstDayComments = searchRange.find(\"day\", null, tempVar3)\n        firstDayComments.interior.color = Color.GetYellow()\n\n        // Find the last occurrence of \"2019\" in the formula property\n        // and mark it with purple foreground\n        val tempVar4 = FindOptions()\n        tempVar4.lookIn = FindLookIn.OnlyFormulas\n        tempVar4.searchDirection = SearchDirection.Previous\n\n        val last2019OnlyFormula = searchRange.find(\"2019\", null, tempVar4)\n        last2019OnlyFormula.font.color = Color.GetPurple()\n    ",
  "com.grapecity.documents.excel.examples.features.findandreplace.FindBasicUsage": "\n        val worksheet = workbook.worksheets.get(0)\n\n        // Prepare data\n        val CorrectWord = \"Macro\"\n        worksheet.getRange(\"A1:D5\").value = CorrectWord\n\n        val MisspelledWord = \"marco\"\n        worksheet.getRange(\"A2,C3,D1\").value = MisspelledWord\n\n        // Find the first misspelled word\n        val searchRange = worksheet.getRange(\"A1:D5\")\n        val firstMisspelled = searchRange.find(MisspelledWord)\n\n        // Mark it with red foreground\n        firstMisspelled.font.color = Color.GetRed()\n    ",
  "com.grapecity.documents.excel.examples.features.findandreplace.ReplaceBasicUsage": "\n        val worksheet = workbook.worksheets.get(0)\n\n        // Prepare data\n        worksheet.getRange(\"A1:A3\").value = arrayOf(\"Render Excel ranges inside PDF in .NET Core\", \"Control pagination when printing Excel document to PDF in .NET Core (Support Team)\", \"How to format Pivot table styles in .NET Core (Support Team)\")\n\n        // Replace \".NET Core\" with \".NET 5\"\n        worksheet.usedRange.replace(\".NET Core\", \".NET 5\")\n    ",
  "com.grapecity.documents.excel.examples.features.findandreplace.FindMatchByte": "\n        // This option is valid when culture is ja-JP or zh-CN.\n        workbook.culture = Locale.JAPANESE\n        val worksheet = workbook.worksheets.get(0)\n\n        // Prepare data\n        worksheet.getRange(\"A1:A4\").value = arrayOf(\"Mario Games\", \"スーパーマリオブラザーズ\", \"ﾏﾘｵ&ﾙｲｰｼﾞRPG3 DX\", \"マリオ＆ルイージRPG1 DX\")\n\n        // Find the first cell that contains \"マリオ\" (match width)\n        // and mark it with red foreground.\n        val searchRange = worksheet.usedRange\n        val matchByteOptions = FindOptions()\n        matchByteOptions.matchByte = true\n\n        val marioCell = searchRange.find(\"マリオ\", null, matchByteOptions)\n        marioCell.font.color = Color.GetRed()\n\n        // Find the first cell that contains \"ルイージ\" (ignore width)\n        // and mark it with green background.\n        val luigiCell = searchRange.find(\"ルイージ\")\n        luigiCell.interior.color = Color.GetGreen()\n\n    ",
  "com.grapecity.documents.excel.examples.features.findandreplace.ReplaceCustomWrapSearch": "\n        val worksheet = workbook.worksheets.get(0)\n\n        // Prepare data\n        worksheet.getRange(\"A1:A8\").value = arrayOf(\"Whats new in GcExcel v2 sp2\", \"Render Excel ranges inside PDF in .NET Core\", \"Control pagination when printing Excel document to PDF in .NET Core (Support Team)\", \"How to format Pivot table styles in .NET Core (Support Team)\", \"Controlling page breaks when editing Excel files in .NET Core (Support Team)\", \"Combine different workbooks into PDF in .NET Core (Support Team)\", \"Repeating Excel rows/columns on exporting to PDF in .NET Core (Support Team)\", \"Using GcExcel with Kotlin\")\n\n        // Find \".NET Core\" and replace them with \".NET 5\", starting after A4\n        val what = \".NET Core\"\n        val replacement = \".NET 5\"\n        val settings = FindOptions()\n        val target = worksheet.usedRange\n        val after = worksheet.getRange(\"A4\")\n\n        // Search start after A4\n        var cellToReplace = after\n        do {\n            cellToReplace = target.find(what, cellToReplace, settings)\n            if (cellToReplace == null) {\n                break\n            }\n\n            // Replace\n            cellToReplace.value = cellToReplace.text.replace(what, replacement)\n        } while (true)\n\n        // Search reached the bottom of the range.\n        // Wrap search start at the top-left corner.\n        if (after != null) {\n            do {\n                cellToReplace = target.find(what, cellToReplace, settings)\n                if (cellToReplace == null) {\n                    break\n                }\n\n                // Replace\n                cellToReplace.value = cellToReplace.text.replace(what, replacement)\n\n                if (cellToReplace.row == after.row && cellToReplace.column == after.column) {\n                    break\n                }\n            } while (true)\n        }\n    ",
  "com.grapecity.documents.excel.examples.features.findandreplace.FindDisplayFormat": "\n        val worksheet = workbook.worksheets.get(0)\n\n        // Prepare data\n        worksheet.getRange(\"A1:C3\").value = \"Text\"\n\n        val b2 = worksheet.getRange(\"B2\")\n        b2.interior.color = Color.GetRed()\n        b2.font.color = Color.GetWhite()\n        b2.value = \"B2\"\n\n        val a2 = worksheet.getRange(\"A2\")\n        a2.interior.color = Color.GetOrange()\n        a2.font.color = Color.GetWhite()\n        a2.value = \"A2\"\n\n        // Find cells with red background and white foreground,\n        // and highlight them with bold and bigger text\n\n        // Create a temporary sheet to build a IDisplayFormat\n        val displayFormatFactoryWorksheet = workbook.worksheets.add()\n        val displayFormatFactoryRange = displayFormatFactoryWorksheet.getRange(\"A1\")\n        displayFormatFactoryRange.interior.color = Color.GetRed()\n        displayFormatFactoryRange.font.color = Color.GetWhite()\n        val searchFormat = displayFormatFactoryRange.displayFormat\n\n        // Find the first occurrence\n        val searchRange = worksheet.usedRange\n        val options = FindOptions()\n        options.searchFormat = searchFormat\n        val foundCell = searchRange.find(\"*\", null, options)\n\n        // Highlight the found range\n        foundCell.font.bold = true\n        foundCell.font.size = foundCell.font.size + 8\n\n        // Dispose the temporary sheet\n        displayFormatFactoryWorksheet.delete()\n    ",
  "com.grapecity.documents.excel.examples.features.findandreplace.ReplaceWithOptions": "\n        val worksheet = workbook.worksheets.get(0)\n\n        // Prepare data\n\n        // Skew matrix generator\n        // Input:\n        // DegX    135\n        // DegY    45\n        //\n        // Output:\n        // M11 1\t    M12\t1\n        // M21 -1\tM22\t1\n        // M31 0\t    M32\t0\n        worksheet.getRange(\"B1\").value = \"Skew matrix generator\"\n        worksheet.getRange(\"A2:A4\").value = arrayOf(\"Input:\", \"DegX\", \"DegY\")\n        worksheet.getRange(\"B3\").value = 135\n        worksheet.getRange(\"B4\").value = 45\n        worksheet.getRange(\"A6\").value = \"Output:\"\n        worksheet.getRange(\"A7:A9\").value = arrayOf(\"M11\", \"M21\", \"M31\")\n        worksheet.getRange(\"B7\").value = 1\n        worksheet.getRange(\"B8\").formula = \"=TAN(B3/180*3.14)\"\n        worksheet.getRange(\"B9\").value = 0\n        worksheet.getRange(\"C7:C9\").value = arrayOf(\"M12\", \"M22\", \"M32\")\n        worksheet.getRange(\"D7\").formula = \"=TAN(B4/180*3.14)\"\n        worksheet.getRange(\"D8\").value = 1\n        worksheet.getRange(\"D9\").value = 0\n\n        // Replace 3.14 with PI()\n        val searchRange = worksheet.usedRange\n        searchRange.replace(3.14, \"PI()\")\n\n        // Replace M with m (Match case)\n        val tempVar = ReplaceOptions()\n        tempVar.matchCase = true\n        searchRange.replace(\"M\", \"m\", tempVar)\n\n        // Replace m11 with M11 (Match whole word, match byte)\n        val tempVar2 = ReplaceOptions()\n        tempVar2.lookAt = LookAt.Whole\n        tempVar2.matchByte = true\n        searchRange.replace(\"m11\", \"M11\", tempVar2)\n\n    ",
  "com.grapecity.documents.excel.examples.features.findandreplace.FindLookAtSearchOrderDirectionMatchCase": "\n        val worksheet = workbook.worksheets.get(0)\n\n        // Prepare data\n\n        // Add day to date\n        // Day Date Result\n        // 1 2019-05-01 2019-05-02\n        worksheet.getRange(\"A2:C2\").value = arrayOf(\"Day\", \"Date\", \"Result\")\n        worksheet.getRange(\"A1\").value = \"Add day to date\"\n        worksheet.getRange(\"A3\").value = 1\n        worksheet.getRange(\"B3\").formula = \"=DATE(2019,5,1)\"\n        worksheet.getRange(\"B3\").numberFormat = \"yyyy-mm-dd;@\"\n        worksheet.getRange(\"C3\").formula = \"=B3+1\"\n        worksheet.getRange(\"C3\").numberFormat = \"yyyy-mm-dd;@\"\n        worksheet.usedRange.autoFit()\n\n        val searchRange = worksheet.getRange(\"A1:C3\")\n\n        // Find the last occurrence of 1 in text (match whole word, backward and by\n        // columns)\n        // and mark it with blue foreground and bigger font\n        val tempVar = FindOptions()\n        tempVar.lookIn = FindLookIn.Texts\n        tempVar.searchDirection = SearchDirection.Previous\n        tempVar.lookAt = LookAt.Whole\n        tempVar.searchOrder = SearchOrder.ByColumns\n\n        val lastValue1 = searchRange.find(1, null, tempVar)\n        lastValue1.font.color = Color.GetBlue()\n        lastValue1.font.size = lastValue1.font.size + 8\n\n    ",
  "com.grapecity.documents.excel.examples.features.tables.TableSort": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        // add table.\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:F7\"), true)\n\n        // sort table\n        val key1 = ValueSortField(worksheet.getRange(\"A1:A2\"), SortOrder.Ascending)\n        table.sort.sortFields.add(key1)\n        table.sort.apply()\n\n    ",
  "com.grapecity.documents.excel.examples.features.tables.ApplyTableStyle": "\n\n        //add table.\n        val worksheet = workbook.worksheets.get(0)\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:F7\"), true)\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        //Add one custom table style.\n        val style = workbook.tableStyles.add(\"test\")\n        //set custom table style for table.\n        table.tableStyle = style\n\n        //Use table style name get one build in table style.\n        val tableStyle = workbook.tableStyles.get(\"TableStyleMedium3\")\n        //set built-in table style for table.\n        table.tableStyle = tableStyle\n\n    ",
  "com.grapecity.documents.excel.examples.features.tables.InsertDeleteTableRowColumns": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        // add table.\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:F7\"), true)\n\n        // add table column before first column.\n        table.columns.add(0)\n        // add table column before second column.\n        table.columns.add(1)\n\n        // delete first table column.\n        table.columns.get(0).delete()\n        // delete \"City\" table column.\n        table.columns.get(\"City\").delete()\n\n        // insert a table row in table's last row.\n        table.rows.add()\n        // delete second table row.\n        table.rows.get(1).delete()\n\n    ",
  "com.grapecity.documents.excel.examples.features.tables.AccessTableRanges": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        // add table.\n        worksheet.tables.add(worksheet.getRange(\"A1:F7\"), true)\n\n        // show totals\n        worksheet.tables.get(0).showTotals = true\n\n        // set each range's interior color.\n        worksheet.tables.get(0).headerRange.interior.color = Color.GetGreen()\n        worksheet.tables.get(0).dataRange.interior.color = Color.GetPink()\n        worksheet.tables.get(0).totalsRange.interior.color = Color.GetLightGray()\n\n    ",
  "com.grapecity.documents.excel.examples.features.tables.CreateTable": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        // add table.\n        worksheet.tables.add(worksheet.getRange(\"A1:F7\"), true)\n\n    ",
  "com.grapecity.documents.excel.examples.features.tables.PerformCalculationsInTable": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        // add table.\n        worksheet.tables.add(worksheet.getRange(\"A1:F7\"), true)\n\n        // \"Name\" column's total row calculation function will be\n        // \"=SUBTOTAL(103,[Name])\"\n        worksheet.tables.get(0).columns.get(0).totalsCalculation = TotalsCalculation.Count\n        // \"Weight\" column's total row calculation function will be\n        // \"=SUBTOTAL(101,[Weight])\"\n        worksheet.tables.get(0).columns.get(4).totalsCalculation = TotalsCalculation.Average\n        worksheet.tables.get(0).showTotals = true\n\n    ",
  "com.grapecity.documents.excel.examples.features.tables.AddCustomTableStyle": "\n\n        //Add one custom table style.\n        val style = workbook.tableStyles.add(\"test\")\n\n        //Set WholeTable element style.\n        style.tableStyleElements.get(TableStyleElementType.WholeTable).font.italic = true\n        style.tableStyleElements.get(TableStyleElementType.WholeTable).font.color = Color.GetWhite()\n        style.tableStyleElements.get(TableStyleElementType.WholeTable).font.strikethrough = true\n        style.tableStyleElements.get(TableStyleElementType.WholeTable).borders.lineStyle = BorderLineStyle.Dotted\n        style.tableStyleElements.get(TableStyleElementType.WholeTable).borders.color = Color.FromArgb(0, 193, 213)\n        style.tableStyleElements.get(TableStyleElementType.WholeTable).interior.color = Color.FromArgb(59, 92, 170)\n\n        //Set FirstColumnStripe element style.\n        style.tableStyleElements.get(TableStyleElementType.FirstColumnStripe).font.bold = true\n        style.tableStyleElements.get(TableStyleElementType.FirstColumnStripe).font.color = Color.FromArgb(255, 0, 0)\n        style.tableStyleElements.get(TableStyleElementType.FirstColumnStripe).borders.lineStyle = BorderLineStyle.Thick\n        style.tableStyleElements.get(TableStyleElementType.FirstColumnStripe).borders.themeColor = ThemeColor.Accent5\n        style.tableStyleElements.get(TableStyleElementType.FirstColumnStripe).interior.color = Color.FromArgb(255, 255, 0)\n        style.tableStyleElements.get(TableStyleElementType.FirstColumnStripe).stripeSize = 2\n\n        //Set SecondColumnStripe element style.\n        style.tableStyleElements.get(TableStyleElementType.SecondColumnStripe).font.color = Color.FromArgb(255, 0, 255)\n        style.tableStyleElements.get(TableStyleElementType.SecondColumnStripe).borders.lineStyle = BorderLineStyle.DashDot\n        style.tableStyleElements.get(TableStyleElementType.SecondColumnStripe).borders.color = Color.FromArgb(42, 105, 162)\n        style.tableStyleElements.get(TableStyleElementType.SecondColumnStripe).interior.color = Color.FromArgb(204, 204, 255)\n\n        //add table.\n        val worksheet = workbook.worksheets.get(0)\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:F7\"), true)\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        //set custom table style to table.\n        table.tableStyle = style\n\n    ",
  "com.grapecity.documents.excel.examples.features.tables.RemoveTable": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1:F7\").value = data\n\n        // add table.\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:F7\"), true)\n\n        // remove table\n        table.delete()\n\n    ",
  "com.grapecity.documents.excel.examples.features.tables.TableFilter": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Name\", \"City\", \"Birthday\", \"Eye color\", \"Weight\", \"Height\"), arrayOf(\"Richard\", \"New York\", GregorianCalendar(1968, 5, 8), \"Blue\", 67, 165), arrayOf(\"Nia\", \"New York\", GregorianCalendar(1972, 6, 3), \"Brown\", 62, 134), arrayOf(\"Jared\", \"New York\", GregorianCalendar(1964, 2, 2), \"Hazel\", 72, 180), arrayOf(\"Natalie\", \"Washington\", GregorianCalendar(1972, 7, 8), \"Blue\", 66, 163), arrayOf(\"Damon\", \"Washington\", GregorianCalendar(1986, 1, 2), \"Hazel\", 76, 176), arrayOf(\"Angela\", \"Washington\", GregorianCalendar(1993, 1, 15), \"Brown\", 68, 145))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"A1:F7\").value = data\n        worksheet.getRange(\"A:F\").columnWidth = 15.0\n\n        //add table.\n        val table = worksheet.tables.add(worksheet.getRange(\"A1:F7\"), true)\n\n        //Filter table\n        table.range.autoFilter(0, arrayOf<Any?>(\"Richard\", \"Nia\"), AutoFilterOperator.Values)\n\n    ",
  "com.grapecity.documents.excel.examples.features.comments.ConfigCommentLayout": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val commentC3 = worksheet.getRange(\"C3\").addComment(\"Range C3's comment.\")\n        commentC3.shape.line.color.rgb = Color.GetLightGreen()\n        commentC3.shape.line.weight = 3.0\n        commentC3.shape.line.style = LineStyle.ThickThin\n        commentC3.shape.line.dashStyle = LineDashStyle.Solid\n        commentC3.shape.fill.color.rgb = Color.GetPink()\n        commentC3.shape.width = 100.0\n        commentC3.shape.height = 200.0\n        commentC3.shape.textFrame.textRange.font.bold = true\n        commentC3.visible = true\n\n    ",
  "com.grapecity.documents.excel.examples.features.comments.AddComment": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        //create comment for range C3.\n        val comment = worksheet.getRange(\"C3\").addComment(\"Range C3's comment.\")\n\n        //change comment's text.\n        comment.text = \"Range C3's new comment\"\n\n    ",
  "com.grapecity.documents.excel.examples.features.comments.SetRichTextForComment": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        val commentC3 = worksheet.getRange(\"C3\").addComment(\"This is a rich text comment:\\r\\n\")\n\n        //config the paragraph's style.\n        commentC3.shape.textFrame.textRange.paragraphs.get(0).font.bold = true\n\n        //add runs for the paragraph.\n        commentC3.shape.textFrame.textRange.paragraphs.get(0).runs.add(\"Run1 font size is 15.\", 1)\n        commentC3.shape.textFrame.textRange.paragraphs.get(0).runs.add(\"Run2 font strikethrough.\", 2)\n        commentC3.shape.textFrame.textRange.paragraphs.get(0).runs.add(\"Run3 font italic, green color.\")\n\n        //config the first run of the paragraph's style.\n        commentC3.shape.textFrame.textRange.paragraphs.get(0).runs.get(1).font.size = 15.0\n        //config the second run of the paragraph's style.\n        commentC3.shape.textFrame.textRange.paragraphs.get(0).runs.get(2).font.strikethrough = true\n\n        //config the third run of the paragraph's style.\n        commentC3.shape.textFrame.textRange.paragraphs.get(0).runs.get(3).font.italic = true\n        commentC3.shape.textFrame.textRange.paragraphs.get(0).runs.get(3).font.color.rgb = Color.GetGreen()\n\n        //show comment.\n        commentC3.visible = true\n\n        commentC3.shape.widthInPixel = 300.0\n        commentC3.shape.heightInPixel = 100.0\n\n    ",
  "com.grapecity.documents.excel.examples.features.comments.ClearComment": "\n\n        val worksheet = workbook.worksheets.get(0)\n\n        worksheet.getRange(\"C3\").addComment(\"Range C3's comment.\")\n        worksheet.getRange(\"D4\").addComment(\"Range D4's comment.\")\n        worksheet.getRange(\"D5\").addComment(\"Range D5's comment.\")\n\n        // delete a single cell comment.\n        worksheet.getRange(\"D5\").comment.delete()\n\n        // clear a range of cells comment.\n        worksheet.getRange(\"C3:D4\").clearComments()\n\n    ",
  "com.grapecity.documents.excel.examples.features.sparklines.CreateSparklines": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Number\", \"Date\", \"Customer\", \"Description\", \"Trend\", \"0-30 Days\", \"30-60 Days\", \"60-90 Days\", \">90 Days\", \"Amount\"), arrayOf<Any?>(\"1001\", GregorianCalendar(2017, 4, 21), \"Customer A\", \"Invoice 1001\", null, 1200.15, 1916.18, 1105.23, 1806.53, null), arrayOf<Any?>(\"1002\", GregorianCalendar(2017, 2, 18), \"Customer B\", \"Invoice 1002\", null, 896.23, 1005.53, 1800.56, 1150.49, null), arrayOf<Any?>(\"1003\", GregorianCalendar(2017, 5, 15), \"Customer C\", \"Invoice 1003\", null, 827.63, 1009.23, 1869.23, 1002.56, null))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"B2:K5\").value = data\n        worksheet.getRange(\"B:K\").columnWidth = 15.0\n\n        worksheet.tables.add(worksheet.getRange(\"B2:K5\"), true)\n        worksheet.tables.get(0).columns.get(9).dataBodyRange.formula = \"=SUM(Table1[@[0-30 Days]:[>90 Days]])\"\n\n        //create a new group of sparklines.\n        worksheet.getRange(\"F3:F5\").sparklineGroups.add(SparkType.Line, \"G3:J5\")\n    ",
  "com.grapecity.documents.excel.examples.features.sparklines.ClearSparklineGroup": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Number\", \"Date\", \"Customer\", \"Description\", \"Trend\", \"0-30 Days\", \"30-60 Days\", \"60-90 Days\", \">90 Days\", \"Amount\"), arrayOf<Any?>(\"1001\", GregorianCalendar(2017, 4, 21), \"Customer A\", \"Invoice 1001\", null, 1200.15, 1916.18, 1105.23, 1806.53, null), arrayOf<Any?>(\"1002\", GregorianCalendar(2017, 2, 18), \"Customer B\", \"Invoice 1002\", null, 896.23, 1005.53, 1800.56, 1150.49, null), arrayOf<Any?>(\"1003\", GregorianCalendar(2017, 5, 15), \"Customer C\", \"Invoice 1003\", null, 827.63, 1009.23, 1869.23, 1002.56, null))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"B2:K5\").value = data\n        worksheet.getRange(\"B:K\").columnWidth = 15.0\n        worksheet.tables.add(worksheet.getRange(\"B2:K5\"), true)\n        worksheet.tables.get(0).columns.get(9).dataBodyRange.formula = \"=SUM(Table1[@[0-30 Days]:[>90 Days]])\"\n\n        //create a new group of sparklines.\n        worksheet.getRange(\"F3\").sparklineGroups.add(SparkType.Line, \"G3:J3\")\n        //create another new group of sparklines.\n        worksheet.getRange(\"F4:F5\").sparklineGroups.add(SparkType.Column, \"G4:J5\")\n\n        //clear sparkline group, all sparklines in the group will be cleaned.\n        worksheet.getRange(\"F3, F4\").sparklineGroups.clearGroups()\n    ",
  "com.grapecity.documents.excel.examples.features.sparklines.ClearSparklines": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Number\", \"Date\", \"Customer\", \"Description\", \"Trend\", \"0-30 Days\", \"30-60 Days\", \"60-90 Days\", \">90 Days\", \"Amount\"), arrayOf<Any?>(\"1001\", GregorianCalendar(2017, 4, 21), \"Customer A\", \"Invoice 1001\", null, 1200.15, 1916.18, 1105.23, 1806.53, null), arrayOf<Any?>(\"1002\", GregorianCalendar(2017, 2, 18), \"Customer B\", \"Invoice 1002\", null, 896.23, 1005.53, 1800.56, 1150.49, null), arrayOf<Any?>(\"1003\", GregorianCalendar(2017, 5, 15), \"Customer C\", \"Invoice 1003\", null, 827.63, 1009.23, 1869.23, 1002.56, null))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"B2:K5\").value = data\n        worksheet.getRange(\"B:K\").columnWidth = 15.0\n        worksheet.tables.add(worksheet.getRange(\"B2:K5\"), true)\n        worksheet.tables.get(0).columns.get(9).dataBodyRange.formula = \"=SUM(Table1[@[0-30 Days]:[>90 Days]])\"\n\n        //create a new group of sparklines.\n        worksheet.getRange(\"F3\").sparklineGroups.add(SparkType.Line, \"G3:J3\")\n        //create another new group of sparklines.\n        worksheet.getRange(\"F4:F5\").sparklineGroups.add(SparkType.Column, \"G4:J5\")\n\n        //clear F3 and F4 cell's sparkline. F5 cell's sparkline still exist.\n        worksheet.getRange(\"F3, F4\").sparklineGroups.clear()\n    ",
  "com.grapecity.documents.excel.examples.features.sparklines.ConfigSparklineSettings": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Number\", \"Date\", \"Customer\", \"Description\", \"Trend\", \"0-30 Days\", \"30-60 Days\", \"60-90 Days\", \">90 Days\", \"Amount\"), arrayOf<Any?>(\"1001\", GregorianCalendar(2017, 4, 21), \"Customer A\", \"Invoice 1001\", null, 1200.15, 1916.18, 1105.23, 1806.53, null), arrayOf<Any?>(\"1002\", GregorianCalendar(2017, 2, 18), \"Customer B\", \"Invoice 1002\", null, 896.23, 1005.53, 1800.56, 1150.49, null), arrayOf<Any?>(\"1003\", GregorianCalendar(2017, 5, 15), \"Customer C\", \"Invoice 1003\", null, 827.63, 1009.23, 1869.23, 1002.56, null))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"B2:K5\").value = data\n        worksheet.getRange(\"B:K\").columnWidth = 15.0\n\n        worksheet.tables.add(worksheet.getRange(\"B2:K5\"), true)\n        worksheet.tables.get(0).columns.get(9).dataBodyRange.formula = \"=SUM(Table1[@[0-30 Days]:[>90 Days]])\"\n\n        //create a new group of sparklines.\n        worksheet.getRange(\"F3:F5\").sparklineGroups.add(SparkType.Line, \"G3:J5\")\n        val sparklinegroup = worksheet.getRange(\"F3\").sparklineGroups.get(0)\n\n        //Config sparkline settings.\n        sparklinegroup.lineWeight = 2.5\n        sparklinegroup.points.markers.color.themeColor = ThemeColor.Accent2\n        sparklinegroup.points.markers.visible = true\n        sparklinegroup.seriesColor.themeColor = ThemeColor.Accent6\n    ",
  "com.grapecity.documents.excel.examples.features.sparklines.GroupExistSparklines": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Number\", \"Date\", \"Customer\", \"Description\", \"Trend\", \"0-30 Days\", \"30-60 Days\", \"60-90 Days\", \">90 Days\", \"Amount\"), arrayOf<Any?>(\"1001\", GregorianCalendar(2017, 4, 21), \"Customer A\", \"Invoice 1001\", null, 1200.15, 1916.18, 1105.23, 1806.53, null), arrayOf<Any?>(\"1002\", GregorianCalendar(2017, 2, 18), \"Customer B\", \"Invoice 1002\", null, 896.23, 1005.53, 1800.56, 1150.49, null), arrayOf<Any?>(\"1003\", GregorianCalendar(2017, 5, 15), \"Customer C\", \"Invoice 1003\", null, 827.63, 1009.23, 1869.23, 1002.56, null))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"B2:K5\").value = data\n        worksheet.getRange(\"B:K\").columnWidth = 15.0\n\n        worksheet.tables.add(worksheet.getRange(\"B2:K5\"), true)\n        worksheet.tables.get(0).columns.get(9).dataBodyRange.formula = \"=SUM(Table1[@[0-30 Days]:[>90 Days]])\"\n\n        //create a new group of sparklines.\n        worksheet.getRange(\"F3\").sparklineGroups.add(SparkType.Line, \"G3:J3\")\n        //create another new group of sparklines.\n        worksheet.getRange(\"F4:F5\").sparklineGroups.add(SparkType.Column, \"G4:J5\")\n\n        //Create a new group, group exist sparklines, according to Range[\"F4\"]'s sparkline group setting.\n        worksheet.getRange(\"F3:F5\").sparklineGroups.group(worksheet.getRange(\"F4\"))\n    ",
  "com.grapecity.documents.excel.examples.features.sparklines.UseDateAxis": "\n\n        val data = arrayOf(arrayOf<Any?>(\"Number\", \"Date\", \"Customer\", \"Description\", \"Trend\", \"0-30 Days\", \"30-60 Days\", \"60-90 Days\", \">90 Days\", \"Amount\"), arrayOf<Any?>(\"1001\", GregorianCalendar(2017, 4, 21), \"Customer A\", \"Invoice 1001\", null, 1200.15, 1916.18, 1105.23, 1806.53, null), arrayOf<Any?>(\"1002\", GregorianCalendar(2017, 2, 18), \"Customer B\", \"Invoice 1002\", null, 896.23, 1005.53, 1800.56, 1150.49, null), arrayOf<Any?>(\"1003\", GregorianCalendar(2017, 5, 15), \"Customer C\", \"Invoice 1003\", null, 827.63, 1009.23, 1869.23, 1002.56, null))\n\n        val worksheet = workbook.worksheets.get(0)\n        worksheet.getRange(\"B2:K5\").value = data\n        worksheet.getRange(\"B:K\").columnWidth = 15.0\n\n        worksheet.tables.add(worksheet.getRange(\"B2:K5\"), true)\n        worksheet.tables.get(0).columns.get(9).dataBodyRange.formula = \"=SUM(Table1[@[0-30 Days]:[>90 Days]])\"\n\n        //create a new group of sparklines.\n        worksheet.getRange(\"F3:F5\").sparklineGroups.add(SparkType.Line, \"G3:J5\")\n\n        worksheet.getRange(\"G7:J7\").value = arrayOf<Any?>(GregorianCalendar(2011, 11, 16), GregorianCalendar(2011, 11, 17), GregorianCalendar(2011, 11, 18), GregorianCalendar(2011, 11, 19))\n        worksheet.getRange(\"F3\").sparklineGroups.get(0).dateRange = \"G7:J7\"\n        worksheet.getRange(\"F3\").sparklineGroups.get(0).axes.horizontal.axis.visible = true\n        worksheet.getRange(\"F3\").sparklineGroups.get(0).axes.horizontal.axis.color.color = Color.GetGreen()\n\n    "
}