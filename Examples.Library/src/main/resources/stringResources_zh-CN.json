{
  "accessworksheet.name": "访问工作表",
  "activateworksheet.name": "激活工作表",
  "addcustomtablestyle.name": "添加自定义表格样式",
  "addcustomthemes.name": "添加自定义主题",
  "addworksheet.name": "添加工作表",
  "applytablestyle.name": "设置内置表格样式",
  "changeworkbooktheme.name": "修改工作簿主题",
  "clearsparklinegroup.name": "清除迷你图组",
  "clearsparklines.name": "清除迷你图",
  "configsparklinesettings.name": "设置迷你图",
  "configworksheet.name": "设置工作表属性",
  "createnewworkbook.name": "创建新的工作簿",
  "createsparklines.name": "创建迷你图",
  "createtable.name": "创建表格",
  "customsort.name": "根据自定义序列排序",
  "deleteworksheet.name": "删除工作表",
  "filtering.name": "过滤",
  "groupexistsparklines.name": "组合迷你图",
  "importexcelfiletoworkbook.name": "导入Excel文件",
  "importexcelfilewithpassword.name": "导入密码保护的Excel文件",
  "insertdeletetablerowcolumns.name": "插入/删除表格行列",
  "performcalculationsintable.name": "表格内执行计算",
  "protectworksheet.name": "保护工作表",
  "removetable.name": "删除表格",
  "saveworkbooktoexcelfile.name": "保存为Excel",
  "saveworkbookwithpassword.name": "保存为密码保护的Excel",
  "sorting.name": "排序",
  "sortrangebyfontcolor.name": "按字体颜色排序",
  "sortrangebyicon.name": "按图标排序",
  "sortrangebyinterior.name": "按背景色排序",
  "sortrangebyvalue.name": "按值排序",
  "sparklines.name": "迷你图",
  "tablefilter.name": "过滤表格区域",
  "tables.name": "表格",
  "tablesort.name": "排序表格区域",
  "textfilter.name": "应用文本过滤",
  "theme.name": "主题",
  "unprotectworksheet.name": "取消保护工作表",
  "usedateaxis.name": "使用日期轴",
  "valuefilter.descrip": "创建值过滤",
  "valuefilter.name": "值过滤",
  "workbook.name": "工作簿",
  "worksheets.name": "工作表",
  "addslicersfortable.name": "为表格添加切片器",
  "slicer.name": "切片器",
  "addslicersforpivottable.name": "为数据透视表添加切片器",
  "dotablefilter.name": "表格过滤",
  "applyslicerstyle.name": "设置内置切片器样式",
  "useslicerdofilter.name": "使用切片器过滤",
  "configslicerlayout.name": "设置切片器布局",
  "createconnectorshape.name": "创建连接器",
  "shape.name": "形状",
  "connectshapesbyconnector.name": "使用连接器连接形状",
  "configshapewithpicturefill.name": "设置图片填充样式",
  "configshapewithgradientfill.name": "设置渐变填充样式",
  "configshapewithpatternfill.name": "设置图案填充样式",
  "configshapewithtexturefill.name": "设置纹理填充样式",
  "configshapewithsolidfill.name": "设置纯色填充样式",
  "configshapeline.name": "设置形状的线条样式",
  "configshape3dformat.name": "设置形状的3D样式",
  "setshapetext.name": "设置形状文本内容",
  "createpicture.name": "创建图片",
  "deletepicture.name": "删除图片",
  "mergecells.name": "合并单元格",
  "rangeoperations.name": "区域操作",
  "accesseachareaofrange.name": "访问每块区域",
  "getrangerowcountcolumncount.name": "获得行数列数",
  "accesscellsrowscolumns.name": "操作单元格/行/列",
  "getworksheetusedrange.name": "获得使用区域",
  "setrowheightcolumnwidth.name": "设置行高列宽",
  "accessrange.name": "访问区域",
  "insertcellsdeletecells.name": "插入/删除单元格",
  "insertdeleterowscolumns.name": "插入/删除行列",
  "cutcopyrange.name": "剪切/拷贝区域",
  "getfeaturerelatedusedrange.name": "按特性获取使用区域",
  "pivottable.name": "数据透视表",
  "createpivottable.name": "创建数据透视表",
  "changedatafieldsummarizefunction.name": "修改数据字段求和公式",
  "modifysubtotalsforpivotfield.name": "修改数据透视表字段小计",
  "filteritemsinpivottable.name": "过滤数据透视表中的项",
  "refreshpivottable.name": "刷新数据透视表",
  "deletehyperlinks.name": "删除超链接",
  "createrangegroup.name": "创建分组",
  "ungrouprange.name": "取消区域分组",
  "clearoutline.name": "清除分组",
  "showspecificlevel.name": "显示指定层级数据",
  "addcustomname.name": "添加自定义名称",
  "grouping.name": "分组",
  "hyperlinks.name": "超链接",
  "picture.name": "图片",
  "configworkbookreferencestyle.name": "设置工作簿引用样式",
  "formulas.name": "公式",
  "usearrayformula.name": "使用数组公式",
  "usetableformula.name": "使用表格公式",
  "dirtyandcalculation.name": "失效和重新计算",
  "setrangevalue.name": "为区域设值",
  "tojsonfromjson.name": "导入导出JSON",
  "customnumberformat.name": "设置自定义格式",
  "dateandtimeformat.name": "设置日期和时间格式",
  "formatting.name": "样式",
  "numberformat.name": "数字格式",
  "numberformats.name": "设置数字格式",
  "halignvalign.name": "设置水平/垂直对齐",
  "shrinktofit.name": "缩小字体填充",
  "rotatecellcontents.name": "翻转单元格内容",
  "wraptext.name": "文字换行",
  "addborderstocell.name": "设置单元格边框",
  "addingborderstorange.name": "设置区域边框",
  "fontcolor.name": "设置字体颜色",
  "fonteffect.name": "设置字体效果",
  "fontname.name": "设置字体",
  "fontsize.name": "设置字号",
  "fontstyle.name": "设置字体样式",
  "fontunderline.name": "设置下划线",
  "lineargradientfill.name": "设置线性渐变填充",
  "patternfill.name": "设置图案填充",
  "rectangulargradientfill.name": "设置矩形渐变填充",
  "solidfill.name": "设置纯色填充",
  "textorientation.name": "设置文本方向",
  "alignment.name": "对齐",
  "applystyle.name": "设置区域样式",
  "borders.name": "边框",
  "createcustomstyle.name": "创建自定义样式",
  "fill.name": "填充",
  "fonts.name": "字体",
  "getdisplayformat.name": "获取显示样式",
  "protection.name": "保护工作表",
  "setrangeformulahidden.name": "隐藏公式",
  "setrangelocked.name": "锁定区域",
  "addcomment.name": "添加批注",
  "clearcomment.name": "清除批注",
  "comments.name": "批注",
  "configcommentlayout.name": "设置批注布局",
  "setrichtextforcomment.name": "富文本批注",
  "conditionalformatting.name": "条件格式",
  "createaveragerule.name": "创建平均值条件格式",
  "createcellvaluerule.name": "创建单元格值条件格式",
  "createdatabbarrule.name": "创建数据条条件格式",
  "createexpressionrule.name": "创建公式条件格式",
  "createiconsetrule.name": "创建图标集条件格式",
  "createmultiruleforrange.name": "创建多个条件格式",
  "createthreecolorscalerule.name": "创建三色刻度条件格式",
  "createtopbottomrule.name": "创建排名前后条件格式",
  "createtwocolorscalerule.name": "创建双色刻度条件格式",
  "createuniquerule.name": "创建唯一值条件格式",
  "deleteconditionalformatrules.name": "删除条件格式",
  "rootexample.descrip": "GcExcel功能列表",
  "rootexample.name": "All",
  "createcustomvalidation.name": "创建自定义数据验证",
  "createdatevalidation.name": "创建日期型数据验证",
  "createdecimalvalidation.name": "创建小数型数据验证",
  "createlistvalidation.name": "创建序列数据验证",
  "createtextlength.name": "创建文本长度数据验证",
  "createtimevalidation.name": "创建时间型数据验证",
  "createwholenumbervalidation.name": "创建整数数据验证",
  "datavalidation.name": "数据验证",
  "deletevalidation.name": "删除数据验证",
  "modifyvalidation.name": "修改数据验证",
  "addseries.name": "添加数据系列",
  "charts.name": "图表",
  "configbubblechartlayout.name": "设置气泡图布局",
  "configdatalabeltext.name": "设置数据标签显示文本",
  "configdatapointformat.name": "设置数据点样式",
  "createchart.name": "创建图表",
  "createdropline.name": "创建垂直线",
  "createhiloline.name": "创建高低点连线",
  "createsecondaryaxis.name": "设置数据辅轴",
  "createtrendline.name": "创建趋势线",
  "deletechart.name": "删除图表",
  "series.name": "数据系列",
  "setvarycolorforcolumnchart.name": "依据数据点着色",
  "createconnectorline.name": "为复合饼图创建连接线",
  "createseriesline.name": "为柱状图创建数据系列线",
  "extendseries.name": "为数据系列增加数据点",
  "createupdownbars.name": "创建涨跌柱线",
  "accesstableranges.name": "访问表格区域",
  "axes.name": "坐标轴",
  "configcategoryaxesformat.name": "设置横坐标轴样式",
  "configaxistitle.name": "设置坐标轴标题",
  "configcategoryaxisunits.name": "设置时间坐标轴单位",
  "configdisplayunitlabel.name": "设置显示单位样式",
  "configgridlines.name": "设置网格线样式",
  "configtickmarklabel.name": "设置刻度线标签样式",
  "configvalueaxisunits.name": "设置纵轴单位",
  "setaxisscaletype.name": "设置纵轴比例尺类型",
  "setaxistickmark.name": "设置轴刻度位置",
  "chartjustplotvisiblecell.name": "只显示可见单元格",
  "configchartareaformat.name": "设置图表区域样式",
  "configchartfloorstyle.name": "设置基底样式",
  "configcharttitlestyle.name": "设置图表标题样式",
  "configchartwallstyle.name": "设置背景墙样式",
  "configlegendentryfontstyle.name": "设置单个图例字体",
  "configlegendpositionandlayout.name": "设置图例位置",
  "configplotareaformat.name": "设置绘图区域样式",
  "bloodpressuretracker.name": "血压跟踪报告",
  "usecases.name": "案例",
  "todolistwithprogresstracker.name": "任务进度跟踪表",
  "costanalysiswithparetochart.name": "图表成本分析",
  "datedynamicfilter.name": "根据日期动态过滤",
  "bidtracker.name": "目标跟踪",
  "personaladdressbook.name": "个人地址簿",
  "customerprofitabilityanalysis.name": "用户利润分析",
  "datefiltering.name": "日期型过滤",
  "filteringbycolor.name": "按颜色过滤",
  "filteringbyicon.name": "按图标过滤",
  "numberfiltering.name": "数字过滤",
  "textfiltering.name": "文本过滤",
  "changeworksheetfilterrange.name": "修改过滤区域",
  "clearfilter.name": "清除过滤",
  "datefilter.name": "设置日期型过滤",
  "filterbynofill.name": "按无填充过滤",
  "filterbyautomaticfontcolor.name": "按自动字体颜色过滤",
  "filterbycellcolor.name": "按单元格颜色过滤",
  "filterbyfontcolor.name": "按字体颜色过滤",
  "filterbyicon.name": "按图标过滤",
  "filterbynoicon.name": "按无图标过滤",
  "multiselectfilter.name": "多选过滤",
  "numberfilter.name": "应用数字过滤",
  "reapplyfilter.name": "重新过滤",
  "features.name": "特性列表",
  "samples.name": "示例",
  "movielist.name": "电影列表",
  "simpleinvoice.name": "简单发票",
  "createhyperlinks.name": "创建超链接",
  "basicsalesreport.name": "销售报告",
  "axes.descrip": "图表有几种不同类型的坐标轴： **横轴**, **纵轴** 和**系列轴**, 它们都是图表自动生成的，不能通过编程接口添加或删除。\n\n坐标轴的示例程序展示了如何设置坐标轴的各种属性，比如轴标题，轴单位，轴显示单位标签，网格线，刻度线和刻度线标签等等。",
  "charts.descrip": "**GcExcel**提供了一套非常完整的图表API，通过这些图表API你可以：\n - 使用**IWorksheet.getShapes().addChart**方法来向工作表中添加一个图表， 它会返回一个 **IShape** 的实例，然后进一步通过**IShape**接口的**getChart**方法来访问所添加的图表\n - 使用 **IChart.getSeriesCollection().add**方法来为图表添加数据系列\n - 通过 **IChart.getChartTitle**方法来设置图表的标题\n - 通过**IChart.getLegend**方法设置图表的图例\n - 通过**ISeries**接口来访问和修改每条数据系列\n - 通过**IPoint**接口来访问和定制数据系列中的每个数据点\n - 通过**IDataLabel**接口来访问和定制数据标签\n - 通过**IChartGroup**接口来批量修改和更新一组数据系列\n - 通过**IAxis**接口来修改和定制横向轴，纵向轴和系列轴\n - 通过**IChart.Shapes.AddXXX**方法来为图表添加子图形\n\n除了上面那些图表基础特性，你还可以通过改变数据系列的图表类型来创建组合型图表，同时你可以通过**ISeries.getAxisGroup**方法来指定一个数据系列是显示在主轴还是辅轴上。\n\n每个数据系列都会有一个关联的图表组(**IChartGroup**)的概念，基本上拥有同样图表类型的数据系列会在一个图表组中，在使用组合类型的图表时多个图表组会自动创建，你可以通过**IChartGroup**这个接口来为图表组中的所有数据系列设置统一的样式，比如饼图中的起始角度，柱状图中的系列重叠和分类间距，或者在线形图表中是否显示高低点连线和涨跌柱线。\n**IAxis**这个接口提供给用户可以手动指定轴最大值和最小值，同时可以设置轴刻度间距，显示或隐藏主要网格线和次要网格线。\n\n还有很多其它的图表元素，比如图表区域(Chart Area)，图表标题(Chart Title)，图表图例(Legend)，数据系列(ISeries)等等，它们都提供了一个**Format**属性用来设置元素的样式，比如设置纯色填充，渐变填充，不同类型的短划线，透明度等。",
  "series.descrip": "数据系列是图表中使用最频繁的特性，每个图表都会包含一个或多个数据系列，每个数据系列又包含了一组数据点。 \n\n本示例程序中你将了解如何为图表添加数据系列，并配置每个数据系列，比如：\n - 设置数据系列的样式\n - 改变数据系列的类型\n -设置气泡图表中气泡的大小和布局\n - 添加辅轴\n - 在柱状图中让每个数据点显示不同的颜色",
  "personalnetworthcalculator.name": "个人净资产计算器",
  "comments.descrip": "GcExcel允许用户为工作表上的单元格添加批注，这样可以为单元格内容指定一些额外的信息。\n\n你可以使用**IRange.addComment**来为单元格或区域添加批注，它会返回一个**IComment**实例。\n\n使用**setVisible**方法可以始终显示批注。\n\n如果要修改批注的布局，可以通过**IComment.getShape**获取与批注关联的形状。\n\n如果需要使用富文本的批注，可以通过**IShape.getTextFrame**方法。",
  "spreadsheetsviewer.name": "SpreadJS表格控件视图",
  "usecases.descrip": "Another two of GcExcel useage scenario are as follows:\n - Use GcExcel API programming, then export to an excel file -**Programming** Part.\n - Import excel template to GcExcel data model, then use GcExcel API programming, make contents more abundantly, then export to an excel file - **Templates** Part.",
  "excelreporting.name": "创建Excel文档",
  "exceltemplates.name": "编辑Excel模板",
  "hiddenrowcolumn.name": "隐藏行列",
  "homeinventory.name": "家庭调查表",
  "collapsegroup.name": "隐藏明细数据",
  "simplepersonalbudget.name": "简单个人预算",
  "studentcalendar.name": "学生日历",
  "travelexpensereport.name": "差旅费用报告",
  "conditionalformatting.descrip": "GcExcel允许用户为单元格或区域设置条件格式，这样就可以对工作表中的重要信息进行高亮和提醒，当单元格中的内容符合设定的条件后，这些单元格就会自动应用条件格式中的样式。\n\nGcExcel支持Excel中所有类型的条件格式：\n - 值类型条件格式\n - 平均值条件格式\n - 色阶条件格式\n - 数据条条件格式\n - 图标集条件格式\n - 排名靠前或靠后条件格式 \n - 唯一值或重复值条件格式\n - 公式条件格式\n\n可以通过**IRange.getFormatConditions.add**方法为区域设置条件格式. 你也可以使用以下具体的方法来添加具体类型的条件格式:\n - addAboveAverage\n - addColorScale\n - addDatabar\n - addIconSetCondition\n - addTop10\n - addUniqueValues",
  "datavalidation.descrip": "GcExcel支持为区域设置数据验证，这样用户能限制单元格的内容和格式，你可以单独为每个单元格创建数据验证，同时也可以为一片区域设置统一的数据验证，GcExcel支持Excel所有的数据验证类型，包括：整型，小数，日期，时间，文本和自定义数据验证。\n\n通过**IRange.getValidation.add**可以为单元格或区域添加数据验证，这个方法会返回一个**IValidation**类型的实例，通过此接口你可以继续：\n - 使用**InputMesssage**和**ErrorMessage**为数据验证设置提示和错误信息\n - 使用**ShowInputMessage**和**ShowError**设置是否显示错误信息\n - 使用**InCellDropDown**属性设置是否显示下拉列表",
  "monthlybusinessbudget.name": "月度预算",
  "filtering.descrip": "GcExcel支持Excel所有类型的过滤：\n - 数字型过滤\n - 文本型过滤\n - 日期型过滤\n - 颜色型过滤\n - 图标型过滤\n\n通过调用**AutoFilter**方法可以对一片区域进行过滤操作，如果想要对多个列的内容同时进行过滤，你可以多次调用**AutoFilter**方法。\n\n在单元格内容变化后可以使用**IWorksheet.getAutoFilter().applyFilter**方法来对变化后的内容重新进行过滤。",
  "filteringbycolor.descrip": "本示例中的程序讲解了如何使用autoFilter方法对区域进行按颜色过滤，可以作为过滤条件的颜色有：\n - 字体颜色\n - 填充颜色\n - 字体自动颜色\n - 无填充",
  "filteringbyicon.descrip": "本示例中的程序讲解了如何使用autoFilter方法对区域按图标过滤，你可以对**AutoFilterOperator**属性设置下列值来按图标过滤：\n - **Icon**表示过滤此属性指定的图标\n - **NoIcon**表示过滤没有图标的区域\n\n在使用图标过滤之前，你必须先为区域创建**IIconSetCondition**和**IFormatCondition**实例。",
  "simplebudget.name": "简单预算",
  "textfiltering.descrip": "本示例中的代码讲解了如何创建和使用文本过滤，比如你可以过滤出所有包含字母“e”的数据行。",
  "alignment.descrip": "本示例中的所有程序讲解了如何为单元格和区域设置不同的对齐方式：\n - 横向和竖向对齐\n - 文本方向\n - 缩小字体填充\n - 阅读方向\n - 文本自动折行",
  "borders.descrip": "本示例中的程序代码讲解了如何为单元格和区域设置各种边框：\n - 边框的线型\n - 边框的颜色",
  "datefiltering.descrip": "本示例中的所有程序讲解了如何使用**autoFilter**方法来对日期进行筛选：\n - 筛选在一个日期时间段内的数据\n - 筛选所有二月份的数据",
  "fill.descrip": "本示例展示了如何为区域设置各种不同的填充：\n - 纯色填充\n - 纹理填充\n - 线形渐变填充\n - 矩形渐变填充",
  "fonts.descrip": "本示例中的程序讲解了如何为单元格和区域设置字体相关属性：\n - 字体颜色\n - 字号\n - 字体名称\n - 粗体和斜体\n - 下划线\n - 删除线\n - 上标和下标",
  "formatting.descrip": "GcExcel提供了丰富的API来设置区域的样式：\n - **IRange.setNumberFormat** 设置数字格式\n - **IRange.setHorizontalAlignment**,  **IRange.setVerticalAlignment**, **IRange.setIndentLevel** 等设置对齐\n - **IRange.getFont** 设置字体\n - **IRange.getBorders** 设置边框\n - **IRange.getInterior** 设置纯色填充，纹理填充和渐变填充\n - **IRange.setLocked** 和 **IRange.setFormulaHidden** 设置工作表保护\n\n你可以创建自定义命名样式或者使用内置的命名样式，将它们设置到某片区域。",
  "formulas.descrip": "在GcExcel中，用户可以像在Excel中一样为单元格设置公式和表达式，当表达式中所依赖的区域的值发生变化后，也会同步计算和更新，GcExcel提供了450多个内置的函数，可以帮助用户创建非常实用和复杂的公式。\n\nGcExcel的计算引擎提供给用户以下能力：\n - 450+内置函数\n - 自定义名称\n - 数组公式\n - 强制无效和计算\n - 表格公式",
  "grouping.descrip": "拥有大量数据的电子表格经常让人很头疼，你需要花大量的时间去查找，管理和分析这些数据，GcExcel让你可以对大量的数据进行分组，这样再复杂的电子表格也很容易导航到你关心的数据。在数据分组后，用户可以通过下列属性或方法对数据进行分组，取消分组，展开和收缩分组：\n\n - **group**方法可以对指定区域进行分组或增加分组层级\n - **ungroup**方法可以取消指定区域的分组或减少分组层级\n - **setShowDetail**属性可以展开和收缩分组\n -  **showLevels**方法可以展开指定层级的分组",
  "numberformat.descrip": "GcExcel全面支持Excel的各种数字格式，你可以为单元格或一片区域指定某种格式。",
  "protection.descrip": "本示例中的程序讲解了如何设置工作表保护：\n - 隐藏公式\n - 锁定单元格",
  "addcustomslicerstyle.name": "添加自定义切片器样式",
  "bloodsugartracker.name": "血糖跟踪",
  "tutorial.name": "入门教程",
  "hyperlinks.descrip": "可以使用**IWorksheet.getHyperlinks().add**或者 **IRange.getHyperliks().add**方法为区域添加超链接，可以使用**IWorksheet.getHyperlinks().add**方法为图形添加超链接。GcExcel支持下面几种类型的超链接：\n - 链接到一个网页\n - 链接到一片区域\n - 链接到一个外部文件\n - 链接到一个邮件地址",
  "picture.descrip": "GcExcel允许用户在工作表中插入图片，并对图片进行各种设置。",
  "pivottable.descrip": "数据透视表是一个数据分析和总结的工具，使用它可以对工作表中存储的数据进行自动地计数，求和和取平均值，并在相应的表格中显示这些分析总结后的数据。\n创建数据透视表前应该先调用**Workbook.getPivotCaches().create**方法创建一个数据缓存，然后以此数据缓存为基础再调用**IWorksheet.getPivotTables().add**方法进一步创建数据透视表，同时可以使用**PivotFieldOrientation**属性来指定透视透视表的字段是行字段，列字段，值字段还是页面字段。",
  "rangeoperations.descrip": "区域(Range)是 GcExcel中最重要概念，**IWorksheet.getRange**也是用户最常用的一个属性，大部分的特性都要通过IRange接口来使用：\n\n在本示例中，你将学会如何：\n - 访问单元格，行和列\n - 访问IRange中的每片区域\n - 不同访问区域的方法\n - 剪切，复制，黏贴区域\n - 取得已用区域(UsedRange)\n - 获得行数量和列数量\n - 隐藏行或列\n - 插入，删除单元格\n - 插入，删除行和列\n - 合并单元格\n - 为区域填充数据\n - 设置行高和列宽",
  "shape.descrip": "GcExcel让你可以将一张图片或各种形状嵌入到工作表中，你可以嵌入箭头，直线，以及更多常用的形状， 你需要调用**IWorksheet.getShapes().addShape**方法来添加一个形状，它会返回一个**IShape**的实例，然后你可以通过下面几种方法配置形状：\n - 通过**IShape.getFill**方法来配置各种填充效果\n - 通过**IShape.getLine**方法来配置形状的线条\n - 通过**IShape.getThreeD**属性来方法形状的3D效果\n - 通过**IShape.getTextFrame**给形状添加富文本内容",
  "slicer.descrip": "切片器是一种可视化的过滤器，通过它可以对表格或者数据透视表进行过滤操作。创建切片器之前先要为切片器创建切片缓存，每个切片器可以设置一个内置或自定义的切片器样式。",
  "sorting.descrip": "GcExcel支持Excel所有排序方式，比如：\n - 按自定义排序\n - 按字体颜色排序\n - 按图标排序\n - 按背景色排序\n - 按值排序",
  "sparklines.descrip": "GcExcel允许你使用迷你图来高亮并显示数据的变化趋势，迷你图是一种可以显示在单元格中的轻量级的图表，通过它可以快速地进行数据可视化。\n在GcExcel中可以通过**IRange.getSparklineGroups().add**方法来添加一个迷你图组，每个迷你图必须存在于一个迷你图组中，它不可以独立于迷你图组而存在。\nGcExcel支持以下几种类型的迷你图：\n - 折线图\n - 柱状图\n - 盈亏图",
  "spreadsheetsviewer.descrip": "## SpreadJS表格控件视图\n本示例中的程序代码讲解了如何前后端配合使用**GcExcel**和**SpreadJS表格控件**，**SpreadJS表格控件**是葡萄城的一款纯前端电子表格控件, GcExcel工作在服务器端负责导入和导出Excel文件，SpreadJS表格控件则工作在浏览器中负责展示和编辑Excel文件的内容。\n\n本示例中所有页面的工作过程为：\n - 在服务端GcExcel先打开一个Excel文件\n - 在服务端调用Spread.Servcices的**Workbook.toJson**方法将GcExcel的当前状态序列化到一个JSON字符串中，然后将这个JSON串发送到客户端\n - 在客户端浏览器中，SpreadJS表格控件控件则会将服务端传回来JSON串作为参数调用**fromJSON**方法，这样服务端Excel文件的内容就可以完全展示在SpreadJS表格控件中了\n\n点击**Template**按钮可以查看服务端原始Excel文件。\n\n对于这里面的每个示例页面，你都可以编辑SpreadJS表格控件中的内容，然后点击**导出**按钮来取得改变后的Excel文件，**导出**按钮的工作过程为：\n - 在浏览器中SpreadJS表格控件先使用它的**toJSON**方法将SpreadJS表格控件当前的状态序列化到一个JSON字符串（如果你已修改了SpreadJS表格控件的内容，那么它将包含最新的内容），然后将这个字符串发送到服务器端\n - 在服务器端，GcExcel会调用它的**Workbook.fromJson**方法将JSON字符串反序列化回来，然后在使用**Workbook.save**方法保存为一个Excel文件\n - 最后你将能下载并查看已修改的最新的Excel文件\n\n想更多了解**SpreadJS表格控件**，可以访问SpreadJS表格控件官方主页[http://www.gcpowertools.com.cn/products/spreadjs/](http://www.gcpowertools.com.cn/products/spreadjs/)",
  "tables.descrip": "在电子表格中为了更简单高效地管理和分析数据，你可以在一片区域上创建一个表格，一个表格中包含了若干你可以管理和格式化的行和列，在本示例中，你将会学到：\n - 给一个工作表中添加和删除表格\n - 如何对表格中的一列进行过滤\n - 如何对表格中的一列进行排序\n - 为表格设置一个内置的或者自定义的表格样式\n - 取得表格中的每块区域\n - 添加删除表格的一列\n - 对表格的特定区域使用公式进行分析和计算",
  "theme.descrip": "GcExcel提供了一整套内置的主题，让你可以快速地改变整个工作簿的样式，同时也允许你创建自定义的主题，并将它应用给工作簿。本示例中的程序讲解了如何在GcExcel中使用主题，包括设置主题，如何自定义主题等。",
  "workbook.descrip": "一个工作簿就代表了整个电子表格文档，它包含了若干的工作表，本示例中的代码讲解了如何使用工作簿：\n - 创建工作簿\n - 使用工作簿导入Excel文件\n - 使用工作簿导入有密码保护的Excel文件\n - 导出工作簿为Excel文件\n - 导出工作簿为密码保护的Excel文件\n - 工作簿序列化，反序列化JSON\n - 保护工作薄\n - 取消保护工作薄",
  "worksheets.descrip": "本示例中的代码讲解了：\n - 添加一个工作表\n - 删除一个工作表\n - 保护工作表\n - 取消工作表保护\n - 激活工作表\n - 配置工作表\n - 添加一个图表工作表",
  "excelreporting.descrip": "在此类示例中，你可以发现很多完整的使用GcExcel的程序代码，这些示例模拟真实场景，让这些代码运行在服务端并最终生成一个Excel文件或报表，所以在点击**运行**按钮后，在服务端会执行以下操作：\n - 创建一个空的工作簿实例\n - 执行代码窗口中的所有代码\n - 将工作簿保存为一个Excel文件\n\n然后，你就可以在浏览器中下载并查看保存的结果了",
  "exceltemplates.descrip": "在实际开发场景中，你也许已经有自己的Excel模板了，你只是想在服务器端能打开并对文件做一些修改，此时你就可以使用GcExcel先在服务器端打开这个Excel文件，然后继续使用GcExcel丰富的API来修改文件内容，定制一些样式，做任何你想做的修改。\n\n点击 **模板**按钮可以查看原Excel文件， 点击 **运行**按钮后，可以查看执行完代码窗口中的代码后被修改的Excel文件。",
  "useslicertoclearfilter.name": "使用切片器清除过滤",
  "features.descrip": "## 特性列表\n**GcExcel**提供了大量Excel的特性让用户能够在电子表格中存储大量数据，改变主题，设置计算公式，分析数据，添加表格，图表，形状，图片，条件格式，迷你图等。在本示例中，你将会发现大量的程序代码说明每个特性的使用方法。",
  "projectcosttracker.name": "工程成本跟踪",
  "eventbudget.name": "活动预算",
  "numberfiltering.descrip": " ",
  "configvalueaxesformat.name": "设置纵坐标轴样式",
  "changeseriestype.name": "改变数据系列类型",
  "configdatalabelformat.name": "设置数据标签样式",
  "configmarkerstyle.name": "设置标记类型",
  "confignegativepoint.name": "设置负值样式",
  "configseriesformat.name": "设置数据系列样式",
  "deleteseries.name": "删除数据系列",
  "configcharttitlerichtext.name": "为图表标题设置丰富文本",
  "chartarea.name": "图表区域",
  "chartlines.name": "图表的各种标线",
  "charttitle.name": "图表标题",
  "chartwalls.name": "图表背景墙",
  "configchartareafont.name": "设置图表区域字体",
  "configchartbackwall.name": "设置图表背面墙",
  "configchartsidewall.name": "设置图表侧面墙",
  "datalabel.name": "数据标签",
  "datapoint.name": "数据点",
  "legend.name": "图例",
  "chartarea.descrip": "图表区域是指一个完整的图表区域，包括：绘图区，图表标题，图例和轴区域。\n\n本示例程序展示如何设置整个图表区域的字体和图表区域的样式。",
  "chartlines.descrip": "图表的标线包含有： **趋势线**，**垂直线**，**高低点连线**和**数据系列线**。\n - 可以为指定的数据系列添加趋势线\n - 垂直线对折线图和面积图有效\n - 高低点连线对折线图有效\n - 数据系列线对堆积柱形图，条形图有效，还可为复合饼图和复合条形图添加连线\n\n本示例程序展示如何为图表添加这些标线和如何对标线进行设置。",
  "charttitle.descrip": "图表标题指图表的名称，可以为图表设置合适的名称，并对图表的名称进行相应的设置。\n\n本示例展示如何显示图表标题，如何对标题的样式进行设置。",
  "chartwalls.descrip": "图表的**背景墙**包括**背面墙**和**侧面墙**。\n\n本示例展示如何设置背景墙的样式，包括：\n - 设置整个背景墙的样式\n - 分别设置背面墙和侧面墙的样式",
  "chart3dformat.name": "图表的3D样式",
  "configlegendformat.name": "设置图例样式",
  "configsecondarysection.name": "设置复合饼图的第二部分",
  "datalabel.descrip": "数据标签显示指定数据系列的数据信息，可以控制数据标签是否显示图例名称，数据系列名称，显示百分比等。\n\n本示例展示如何显示数据标签和如何设置数据样式的标签。",
  "datapoint.descrip": "每个数据系列都由**数据点**组成。\n\n本示例展示如何设置数据点的样式。",
  "legend.descrip": "本示例展示如何显示图例， 设置图例的样式和位置。",
  "plotarea.descrip": "本示例展示设置绘图区域的样式，和控制隐藏的单元格是否显示在绘图区域中",
  "plotarea.name": "绘图区域",
  "chartgallery.descrip": "图表集中的示例展示了各种类型的图表",
  "chartgallery.name": "图表集",
  "areachart.name": "面积图",
  "areastacked100.name": "百分比堆积面积图",
  "areastackedchart.name": "堆积面积图",
  "barclusteredchart.name": "簇状条形图",
  "barstacked100chart.name": "百分比堆积条形图",
  "barstackedchart.name": "堆积条形图",
  "columnclusteredchart.name": "簇状柱形图",
  "columnstacked100chart.name": "百分比堆积柱形图",
  "columnstackedchart.name": "堆积柱形图",
  "linechart.name": "折线图",
  "linemarkerschart.name": "带数据标记的折线图",
  "linestacked100chart.name": "百分比堆积折线图",
  "linestackedchart.name": "堆积折线图",
  "piechart.name": "饼图",
  "stock_highlowclosestockchart.name": "盘高-盘低-收盘图",
  "stock_openhighlowclosestock.name": "开盘-盘高-盘低-收盘图",
  "stock_volumehighlowclosestock.name": "成交量-盘高-盘低-收盘图",
  "xyscatterchart.name": "散点图",
  "xyscatterlineschart.name": "带直线和数据标记的散点图",
  "xyscattersmooth.name": "带平滑线的散点图",
  "bubblechart.name": "气泡图",
  "configheaderfooter.name": "设置页眉页脚",
  "configevenpageheaderfooter.name": "设置偶数页的页眉页脚",
  "configfirstpagenumber.name": "设置起始页码",
  "configpagecenter.name": "设置居中方式",
  "configpagemargins.name": "设置页边距",
  "configpageorder.name": "设置打印顺序",
  "configpageorientation.name": "设置页面方向",
  "configpaperscaling.name": "设置页面缩放",
  "configpapersize.name": "设置纸张大小",
  "configprintarea.name": "设置打印区域",
  "configsheetprintsettings.name": "设置工作表打印配置",
  "pagesetup.name": "页面设置",
  "combinationchart1.name": "组合图表1",
  "combinationchart2.name": "组合图表2",
  "linemarkerstackedchart.name": "带数据标记的堆积折线图",
  "pie_doughnutchart.name": "圆环图",
  "stock_volumeopenhighlowclose.name": "成交量-开盘-盘高-盘低-收盘图",
  "xyscattersmoothwithmarkers.name": "带数据标记和平滑线的散点图",
  "linemarkerstacked100chart.name": "带数据标记的百分比堆积折线图",
  "chart3dformat.descrip": "本示例中展示了如何设置图表的**3D**样式。包括背景墙和基底",
  "configmarkersformat.name": "设置标记样式",
  "markers.descrip": "本示例展示如何设置标记的类型和样式",
  "markers.name": "标记",
  "pagesetup.descrip": "GcExcel支持对打印页面设置，**页面设置**包含所有页面设置属性（如左边距，下边距，纸张大小等）。",
  "configchart3dformat.name": "设置图表的3D样式",
  "configfirstpageheaderfooter.name": "设置首页的页眉页脚",
  "eventplanningtracker.name": "活动策划跟踪器",
  "familybudget.name": "家庭预算",
  "configprinttitlecolumns.name": "设置打印左端标题列",
  "configprinttailcolumns.name": "设置打印右端标题列",
  "configprinttitlerows.name": "设置打印顶端标题行",
  "configprinttailrows.name": "设置打印底端标题行",
  "importexcelfiledataonly.name": "只导入Excel中的数据",
  "importexcelfilewithoutcalculation.name": "导入Excel后不重新计算",
  "pdfexporting.descrip": "在此类示例中，你可以发现很多完整的使用GcExcel的程序代码，这些示例模拟真实场景，让这些代码运行在服务端并最终生成一个Excel文件或报表，所以在点击**运行**按钮后，在服务端会执行以下操作：\n - 创建一个空的工作簿实例\n - 执行代码窗口中的所有代码\n - 将工作簿保存为一个PDF文件\n\n然后，你就可以在浏览器中查看保存的结果了",
  "pdfexporting.name": "PDF导出",
  "saveworkbooktopdf.name": "将工作簿保存为PDF",
  "saveworksheettopdf.name": "将工作表保存为PDF",
  "configurepagesetup.name": "页面属性",
  "setfontsfolderpath.name": "设置字体文件夹",
  "chartcopy.name": "复制图表",
  "chartcut.name": "剪切图表",
  "chartduplicate.name": "克隆图表",
  "configureworkbookview.name": "设置工作簿视图",
  "configureworksheetview.name": "设置工作表视图",
  "importcsvfiletoworkbook.name": "导入csv文件",
  "importcsvfiletoworkbookwithoptions.name": "使用设置导入csv文件",
  "picturecopy.name": "复制图片",
  "picturecut.name": "剪切图片",
  "pictureduplicate.name": "克隆图片",
  "saveworkbooktocsvfile.name": "保存为csv文件",
  "saveworkbooktocsvfilewithoptions.name": "使用设置保存为csv文件",
  "saveworksheettocsvfile.name": "保存为csv文件",
  "saveworksheettocsvfilewithoptions.name": "使用设置保存为csv文件",
  "shapecopy.name": "复制形状",
  "shapecut.name": "剪切形状",
  "shapeduplicate.name": "克隆形状",
  "slicercopy.name": "复制切片器",
  "slicercut.name": "剪切切片器",
  "slicerduplicate.name": "克隆切片器",
  "text.name": "文本",
  "textstyle.name": "文本样式",
  "numberformating.name": "数字格式化",
  "savesparklinestopdf.name": "将迷你图保存到PDF",
  "overflow.name": "文本溢出",
  "savepicturetopdf.name": "将图片保存到PDF",
  "saverangefilltopdf.name": "将各种填充色保存到PDF",
  "convertexceltopdf.name": "将Execl文件转换为PDF",
  "saveborder.name": "导出边框样式",
  "configureblackandwhite.name": "单色打印",
  "configuredraft.name": "草稿品质",
  "configureheaderfooter.name": "页眉页脚",
  "configureoritation.name": "方向",
  "configurepagebreaks.name": "自定义分页",
  "configurepageorder.name": "打印顺序",
  "configurepagination.name": "自动分页",
  "configureprintarea.name": "打印区域",
  "configureprintpagerange.name": "打印页码范围",
  "configureprinttitles.name": "打印标题",
  "configurescaling.name": "缩放",
  "pdfpagesetup.descrip": "该文件夹中的示例演示了以下情况:\n - 设置分页和插入分隔。\n - 设置页眉页脚。\n - 设置打印区域和标题。\n - 设置页面其他属性，如顺序、方向、缩放等等。",
  "pdfpagesetup.name": "页面设置",
  "saveconditionalformatting.name": "导出条件格式",
  "savetable.name": "导出表格",
  "financialkpis.name": "财务关键绩效指标",
  "incomestatement.name": "收入证明",
  "annualfinancialreport.name": "年度财务报告",
  "agingreport.name": "账龄分析报告",
  "cellinfo.name": "使用CellInfo",
  "customfunctions.descrip": "## 自定义函数\nGcExcel 支持用户自定义函数, 使用户可以很方便地创建自定义算法。",
  "customfunctions.name": "自定义函数",
  "myaddfunction.name": "自定义Add函数",
  "myconcatenatefunction.name": "自定义Concatenate函数",
  "myconditionalsumfunction.name": "自定义ConditionalSum函数",
  "myiserrorfunction.name": "自定义IsError函数",
  "myismergedrangefunction.name": "自定义IsMergedRange函数",
  "mysumfunction.name": "自定义Sum函数",
  "charactercelltext.name": "使用Character方法",
  "addtextrun.name": "使用IRichText接口",
  "cellrichtext.name": "单元格富文本",
  "cellrichtext.descrip": "在GcExcel中可以为单元格应用富文本，文件夹中的demo包括：\n - 使用IRange.RichText接口为单元格添加和格式化富文本\n - 使用IRange.Characters()方法格式化单元格中的一部分文本\n - 如何为富文本中的Tex Run设置不同的字体",
  "configrunfont.name": "设置Text run字体",
  "exportcellrichtext.name": "单元格富文本",
  "verticaltext.name": "导出竖排文本",
  "importxlsmtoworkbook.name": "打开和保存包含宏的文件",
  "createstylebaseon.name": "基于现有style创建新style",
  "setbackgroundimage.name": "设置工作表的背景图片",
  "loadandsavejsonwithshapes.name": "加载和保存含有图形的json",
  "websiteflowchart.name": "网站流程图",
  "setjava8datevalue.name": "设置Java 8日期和时间类型",
  "copypasteoptions.name": "复制粘贴的选项",
  "cutcopyrangebetweenworkbooks.name": "多工作簿之间剪切/拷贝区域",
  "copyworksheet.name": "复制工作表",
  "copyworksheetbetweenworkbooks.name": "在工作薄之间复制工作表",
  "moveworksheet.name": "移动工作表",
  "moveworksheetbetweenworkbooks.name": "在工作薄之间移动工作表",
  "exportshape.name": "导出图形",
  "exportshape.descrip": "## 导出图形\nGrapeCity Documents for Excel 支持导出图形到PDF文件中.\n - 导出基本/自定义图形.\n - 导出带文本的图形.\n - 导出各种填充样式的图形\n - 导出组合图形.",
  "basicshape.name": "基础图形",
  "customshape.name": "自定义图形",
  "exportflowchart.name": "导出FlowChart",
  "setshapenottoprint.name": "设置不导出图形",
  "shapewithline.name": "各种边线样式",
  "shapewithpictureortexturefill.name": "图片与纹理填充",
  "shapewithrotation.name": "旋转图形",
  "shapewithtext.name": "带文本的图形",
  "savepivottable.name": "导出透视表",
  "setbuiltinstyle.name": "设置内建透视表样式",
  "setcustompivotstyle.name": "设置自定义透视表样式",
  "setnumberformatforfield.name": "为透视表区域设置数字格式",
  "setshowtablestyles.name": "设置某些区域样式是否显示",
  "autofit.name": "自适应行高和列宽",
  "importoleobjectstoworkbookandexport.name": "导入和导出 OLE 对象",
  "findandreplace.descrip": "## 查找和替换\n此话题包含以下示例:\n - 在一片区域中查找\n - 在一片区域中替换",
  "findandreplace.name": "查找和替换",
  "findbasicusage.name": "查找的基本用法",
  "finddisplayformat.name": "按格式查找",
  "findlookatsearchorderdirectionmatchcase.name": "使用高级选项查找",
  "findmatchbyte.name": "查找时设置全角半角匹配",
  "findwithafter.name": "枚举所有查找到的结果",
  "findwithlookin.name": "在不同的层面查找",
  "replacebasicusage.name": "替换的基本用法",
  "replacecustomwrapsearch.name": "使用循环查找进行替换",
  "replacewithoptions.name": "替换的高级选项",
  "controladjustingpagebreaks.name": "控制是否调整分页符",
  "configureprinttails.name": "打印尾标",
  "shrinktofitforwrappedtext.name": "为换行文字进行缩小字体填充",
  "custompageinfos.name": "自定义页面信息",
  "printmanager.name": "自定义分页",
  "printmanager.descrip": "## 自定义分页\nGcExcel引入PrintManage类来自定义分页和打印，该功能可以实现将Excel的特定部分打印到PDF文档，以及从PageInfo对象中获取分页结果。分页结果是通过调用PrintManager.Paginate方法产生的一个页面列表，可以对分页结果进行下列操作:\n -添加/删除/修改页面。\n -更改页码，页数，页面内容和页面设置。\n## 注意：要使用此功能，您应拥有GrapeCity Documents for PDF的有效许可证。",
  "keeptogether.name": "不可分割数据",
  "manageheadersondifferentpages.name": "不同页面的重复标题不一样",
  "printmultiplepagestoonepage.name": "将多个页面打印到一个页面上",
  "printspecificpages.name": "打印指定的页面",
  "savemultipleworkbookstopdf.name": "将多个工作薄保存成一个PDF文档",
  "renderexcelrangesinsideapdf.name": "在PDF文档内部渲染Excel(高级用法)",
  "drawrangeinsideapdf.name": "在PDF文档内部渲染Excel(基础用法)",
  "convertshapetoimage.name": "将图形转为图片",
  "convertrangetoimage.name": "将数据转为图片",
  "exportsheettoimage.name": "工作表导出为图片",
  "exportshapetoimage.name": "图形导出为图片",
  "exportrangetoimage.name": "工作表区域导出为图片",
  "addsubtotal.name": "插入分类汇总",
  "addsubtotaladvanced.name": "插入分类汇总（使用高级选项）",
  "hidegrandtotalsinpivottable.name": "总计的可见性",
  "removesubtotal.name": "删除分类汇总",
  "rowaxislayoutinpivottable.name": "报表布局",
  "setpivotfieldnameinpivottable.name": "重命名透视表字段",
  "shapegroup.name": "组合",
  "shapeungroup.name": "取消组合",
  "addsubtotal.descrip": "使用 IRange.Subtotal 添加分类汇总",
  "addsubtotaladvanced.descrip": "使用 IRange.Subtotal 添加分类汇总（带有高级选项）",
  "hidegrandtotalsinpivottable.descrip": "使用 RowGrand 和 ColumnGrand 设置行和列上总计的可见性",
  "removesubtotal.descrip": "使用 IRange.RemoveSubtotal 删除分类汇总",
  "rowaxislayoutinpivottable.descrip": "使用 IPivotTable.SetRowAxisLayout 改变报表布局",
  "setpivotfieldnameinpivottable.descrip": "使用 IPivotField.Name 属性重命名报表字段",
  "shapegroup.descrip": "使用 IShapeRange.Group 组合",
  "shapeungroup.descrip": "使用 IShape.Ungroup 取消组合",
  "saveslicer.descrip": "将切片器导出到 PDF",
  "saveslicer.name": "导出切片器",
  "configurebestfitrowcolumn.name": "自适应行高列宽",
  "configadjustmentpoints.name": "调整点",
  "tag.name": "标签(表/行/列/单元格)",
  "newcharts.name": "Excel 2016 新的图表",
  "protectworkbook.name": "保护工作薄",
  "protectworkbook.descrip": "使用IWorkbook.protect方法来保护工作薄。",
  "unprotectworkbook.name": "取消保护工作薄",
  "unprotectworkbook.descrip": "使用IWorkbook.unprotect方法来取消保护工作薄。",
  "newcharts.descrip": "## Excel 2016 新的图表\nGcExcel通过调用 **IShapes.addChart**方法和设置不同的**ChartType**来添加Excel 2016新的图表，GcExcel新支持下面几种类型的图表:\n - 旭日图表\n - 树状图表\n - 漏斗图表\n - 瀑布图表\n - 箱线图表\n - 直方图表\n - 柏拉图表",
  "addboxwhiskerchart.name": "添加一个箱线图表",
  "addboxwhiskerchart.descrip": "该示例用来展示如果创建一个箱线图表。",
  "addfunnelchart.name": "添加一个漏斗图表",
  "addfunnelchart.descrip": "该示例用来展示如果创建一个漏斗图表。",
  "addhistogramchart.name": "添加一个直方图表",
  "addhistogramchart.descrip": "该示例用来展示如果创建一个直方图表。",
  "addparetochart.name": "添加一个柏拉图表",
  "addparetochart.descrip": "该示例用来展示如果创建一个柏拉图表。",
  "addsunburstchart.name": "添加一个旭日图表",
  "addsunburstchart.descrip": "该示例用来展示如果创建一个旭日图表。",
  "addtreemapchart.name": "添加一个树状图表",
  "addtreemapchart.descrip": "该示例用来展示如果创建一个树状图表。",
  "addwaterfallchart.name": "添加一个瀑布图表",
  "addwaterfallchart.descrip": "该示例用来展示如果创建一个瀑布图表。",
  "addusershapes.name": "在图表中添加用户形状",
  "addusershapes.descrip": "在图表中添加图片，形状等。这些插入的图片或者形状称为此图表的用户形状。",
  "createshapewithhyperlink.name": "创建带有超链接的形状",
  "createshapewithhyperlink.descrip": "此示例演示如何向形状添加超链接。",
  "addchartsheet.name": "添加一个图表工作表",
  "addchartsheet.descrip": "该示例用来展示如果创建一个图表工作表。",
  "savesheetbackgroundtopdf.name": "将表格背景图片保存到PDF",
  "savesheetbackgroundtopdf.descrip": "GcExcel支持将工作表背景图像导出到PDF。",
  "setdocumentpropertiestopdf.name": "设置PDF文档的文档设置",
  "setdocumentpropertiestopdf.descrip": "GcExcel支持在保存PDF时设置文档属性。",
  "setsecurityoptionstopdf.name": "设置PDF文档的安全选项",
  "setsecurityoptionstopdf.descrip": "GcExcel支持在保存PDF时设置文档的安全选项。",
  "configurebestfitrowcolumn.descrip": "设置IPageSetup.BestFitRow/BestFitColumn，使导出的PDF文件为自适应行高列宽",
  "tag.descrip": "Tag可以提供在行、列、单元格以及工作表上存储用户数据的能力",
  "configadjustmentpoints.descrip": "使用IShape.Adjustment来获取/设置形状的调整点",
  "areachartpdf.descrip": "导出面积图到PDF文档",
  "barchartpdf.descrip": "导出条形图到PDF文档",
  "chartgallerypdf.descrip": "导入包含多个图表的xlsx文件，导出PDF文档",
  "columnchartpdf.descrip": "导出柱形图到PDF文档",
  "combochartpdf.descrip": "导出组合图到PDF文档",
  "linechartpdf.descrip": "导出折线图到PDF文档",
  "piechartpdf.descrip": "导出饼图到PDF文档",
  "radarchartpdf.descrip": "导出雷达图到PDF文档",
  "stockchartpdf.descrip": "导出股票图到PDF文档",
  "xyscatterchartpdf.descrip": "导出XY散点图到PDF文档",
  "celltype.descrip": "## 单元格类型\n本示例中的程序讲解了如何设置单元格类型，GcExcel:\n - 按钮单元格\n - 复选框单元格\n - 普通组合框单元格\n - 超链接单元格\n- 复选框列表单元格\n- 单选列表单元格",
  "celltype.name": "单元格类型",
  "addbuttoncelltype.descrip": "本示例展示如何为单元格设置按钮类型。",
  "addbuttoncelltype.name": "按钮单元格",
  "addcheckboxcelltype.descrip": "本示例展示如何为单元格设置复选框类型。",
  "addcheckboxcelltype.name": "复选框单元格",
  "addcomboboxcelltype.descrip": "本示例展示如何为单元格设置普通组合框类型。",
  "addcomboboxcelltype.name": "普通组合框单元格",
  "addhyperlinkcelltype.descrip": "本示例展示如何为单元格设置超链接类型。",
  "addhyperlinkcelltype.name": "超链接单元格",
  "addrowcolumncelltype.descrip": "本示例展示如何为行列创建单元格类型。",
  "addrowcolumncelltype.name": "为行列设置单元格类型",
  "addsheetcelltype.descrip": "本示例展示如何为整个工作表创建单元格类型。",
  "addsheetcelltype.name": "为工作表设置单元格类型",
  "dependents.descrip": "本示例展示如何获取从属单元格。",
  "dependents.name": "从属单元格",
  "precedents.descrip": "本示例展示如何获取引用单元格。",
  "precedents.name": "引用单元格",
  "precedentsanddependents.descrip": "本示例中的程序讲解了如何获取引用单元格和从属单元格。",
  "precedentsanddependents.name": "引用单元格和从属单元格",
  "getallprecedents.descrip": "通过一个循环获取一个单元格的所有引用单元格（包括直接引用和间接引用）。",
  "getallprecedents.name": "获取所有的引用单元格",
  "cellstyle.name": "单元格样式",
  "customobject.name": "自定义对象",
  "dataset.name": "数据集",
  "datasource.descrip": "## 数据源\n模板API可以直接将Excel模板与来自以下对象的数据绑定：\n - **DataSet / DataTable：**可以处理任何类型的数据库中的数据源\n - **自定义对象：**这些是用户定义的对象。 可以处理来自Json String / File / XML等的数据源。也就是说，任何可以序列化为自定义对象的数据源。\n - **变量：**代码中用户定义的变量。\n - **数组/列表：**代码中用户定义的数组/列表。",
  "datasource.name": "数据源",
  "datatable.name": "数据表",
  "datatemplate.name": "数据模板",
  "expressiontemplate.name": "表达式模板",
  "financialdashboard.name": "财务报表",
  "functiontemplate.name": "函数模板",
  "inlinetemplate.name": "内联模板",
  "jsonfile.name": "Json文件",
  "mergecell.name": "合并单元格",
  "properties.descrip": "## 属性\nGcExcel使用括号**（**和**）**来组织所有模板属性。 属性以键值格式设置。 多个属性使用逗号分隔。\n\n属性名称和值不区分大小写。\n\n例如：（context = A1）等于（Context = a1）。\n\n属性名称和预定义值支持全名和简写。\n\n例如：（E = H）等于（expansion = horizontal）。\n\n该模板提供了许多属性：\n - **C(context)：**单元格上下文\n - **E(expansion)：**扩展类型\n - **G(group)：**群组类型\n - **R(range)：**在指定范围内为模板设置后备上下文\n - **S(sort)：**排序类型\n - **PB(pagebreak)：**在报告文件中添加分页符",
  "properties.name": "属性",
  "resultset.name": "ResultSet",
  "purchaseorder.name": "采购订单",
  "sales.name": "销售报告",
  "setcontext.name": "设置上下文",
  "setexpansiontype.name": "设置扩展类型",
  "setgrouptype.name": "设置分组类型",
  "setpagebreak.name": "设置分页",
  "setrange.name": "设置范围",
  "setsorttype.name": "设置排序类型",
  "sheettemplate.name": "工作表模板",
  "shippinganddeliveryorder.name": "运输和交货单",
  "style.descrip": "## 样式\n模板支持**单元格样式**和应用于单元格的**合并样式**。 数据将根据单元格上应用的样式增长。",
  "style.name": "样式",
  "tablixreport.name": "Tablix报告",
  "templatecell.descrip": "## 模板单元格\nGcExcel使用**“ {{” **和**“}}” **作为模板标记。\n\n在这些标记之间，用户可以使用数据字段，函数字段，表达式字段和许多属性。\n\n模板支持各种模板单元格：\n -**数据模板：**代表数据字段的模板\n -**函数模板：**代表函数的模板\n -**公式模板：**表示公式的模板，模板处理后仍保留为公式\n -**表达式模板：**表示表达式的模板\n -**内联模板：**用于文本的内联模板\n -**工作表模板：**工作表名称中的模板\n - **图片模板:** 表示图片的模板，将在生成的报告中显示为图片",
  "templatecell.name": "模板单元格",
  "templates.descrip": "## 模板\nGcExcel支持模板功能，它具有全面的语法和API，可将Excel文档绑定到数据并生成具有高级布局的Excel报告。\n\n借助灵活的语法以及用于数据扩展和公式的简便表示法，新的模板语法和API可以轻松定义Excel模板，并生成支持多种用例的Excel报告。\n\n在本节中，您将学习如何使用 **GcExcel模板** 的功能。而且，有一些用户示例可让您全面了解模板和报告。\n\n单击 **“运行”** 按钮在服务器上执行以下操作：\n -创建一个空的工作簿\n -执行代码窗口中的所有代码\n -保存到Excel文件\n\n然后，您可以通过下载Excel文件来查看结果。\n**注意**：在此演示中，SpreadJS处于只读模式。您可以下载对应的Excel文件并进行交互。",
  "templates.name": "模板",
  "templatesamples.descrip": "## 模板示例\n用户示例，让您全面了解**GcExcel模板**和生成的报告。",
  "templatesamples.name": "模板样例",
  "travel.name": "旅行报告",
  "variable.name": "变量",
  "cellstyle.descrip": "用户可以在模板中直接使用Excel的单元格样式。\n\n随着数据的增长，样式将应用于单元格。",
  "customobject.descrip": "用户可以将 **自定义对象** 用作GcExcel模板的数据源，并将其字段和属性作为模板中的数据字段。",
  "dataset.descrip": "用户可以将.Net **DataSet**用作GcExcel模板的数据源。",
  "datatable.descrip": "用户可以使用.Net **DataTable**作为GcExcel模板的数据源。",
  "datatemplate.descrip": "表示数据源中的数据字段的模板。",
  "expressiontemplate.descrip": "表达式形式的模板",
  "functiontemplate.descrip": "函数形式的模板",
  "inlinetemplate.descrip": "用于文本中的内联模板。",
  "jsonfile.descrip": "用户可以使用json文件作为GcExcel模板的数据源。 在此之前，用户应从文件中读取数据并将其序列化为自定义对象。\n实际上，用户可以使用可以序列化到自定义对象的任何数据作为数据源。",
  "resultset.descrip": "用户可以使用从数据库中获取的**java.sql.ResultSet**的实例作为GcExcel模板的数据源。",
  "mergecell.descrip": "用户可以在模板中使用合并单元格。\n\nGcExcel将尝试理解模板中合并单元格的含义，并生成预期的报告。",
  "setcontext.descrip": "用户可以使用 **C(context)** 属性来显式设置模板的上下文。",
  "setexpansiontype.descrip": "用户可以使用 **E(expansion)** 属性设置模板的扩展类型。",
  "setgrouptype.descrip": "用户可以使用 **G(group)** 属性设置模板的组类型。",
  "setpagebreak.descrip": "用户可以在模板上使用 **PB(pagebreak)** 属性为报表动态插入分页符。",
  "setrange.descrip": "用户可以使用 **R(range)** 属性设置当前模板的范围。\n\n在指定范围内，如果模板单元格既没有默认上下文也没有显式上下文，它将以当前模板为上下文。",
  "setsorttype.descrip": "用户可以使用 **S(sort)** 属性来设置模板的排序类型。",
  "sheettemplate.descrip": "工作表名称中的模板。",
  "variable.descrip": "用户可以使用代码中定义的**变量**作为GcExcel模板的数据源。",
  "showcase.name": "实例集合",
  "showcase.descrip": "## 实例集合\n在实例集合中, 你会发现很多完整的示例代码来演示如何使用代码生成一个Excel文件, 或者演示如何打开一个已有的Excel文件并更新它的一些内容。\n 点击**Run** 按钮可以在服务端执行以下操作:\n - 创建一个空的工作薄或者打开一个已有的Excel文件.\n - 执行代码窗口中的程序\n - 另存为Excel文件",
  "departmentbudget.name": "部门预算",
  "protectworksheetwithpassword.name": "密码保护工作表",
  "protectworksheetwithpassword.descrip": "本示例中的程序讲解了如何使用密码保护工作表",
  "unprotectworksheetwithpassword.name": "取消有密码的工作表的保护",
  "unprotectworksheetwithpassword.descrip": "本示例中的程序讲解了如何取消有密码的工作表的保护。",
  "imageexporting.descrip": "在此类示例中，你可以发现很多完整的使用GcExcel的程序代码，这些示例模拟真实场景，让这些代码运行在服务端并将工作表/区域/图形导出为图片，所以在点击**运行**按钮后，在服务端会执行以下操作：\n - 创建一个空的工作簿实例\n - 执行代码窗口中的所有代码\n - 将工作簿保存为一个图片文件\n\n然后，你就可以在浏览器中查看保存的结果了",
  "imageexporting.name": "导出图片",
  "savebackgroundpicturestopdf.name": "将多个背景图片保存到PDF文档",
  "savebackgroundpicturestopdf.descrip": "本示例中的代码讲解了如何创建多个背景图片以及保存到PDF文档中。",
  "configcharttitleangle.name": "设置图表标题角度",
  "configcharttitleangle.descrip": "本示例中的代码讲解了如何设置图表标题的角度。",
  "configcustomerrorbar.name": "自定义类型",
  "configcustomerrorbar.descrip": "本示例中的代码讲解了如何设置自定义误差线。",
  "configdatalabelangle.name": "设置数据标签的角度",
  "configdatalabelangle.descrip": "本示例中的代码讲解了如何设置数据标签的角度。",
  "configdeleteerrorbar.name": "删除误差线",
  "configdeleteerrorbar.descrip": "本示例中的代码讲解了如何删除误差线。",
  "configerrorbarincludeandendtype.name": "设置正负偏差类型以及末端样式",
  "configerrorbarincludeandendtype.descrip": "本示例中的代码讲解了如何设置正负偏差类型以及末端样式。",
  "configerrorbarstyle.name": "误差线样式",
  "configerrorbarstyle.descrip": "本示例中的代码讲解了如何设置误差线样式。",
  "configfixedvalueerrorbar.name": "固定值类型",
  "configfixedvalueerrorbar.descrip": "本示例中的代码讲解了如何设置固定值类型。",
  "configpercentageerrorbar.name": "百分比类型",
  "configpercentageerrorbar.descrip": "本示例中的代码讲解了如何设置百分比类型。",
  "configstderrerrorbar.name": "标准误差类型",
  "configstderrerrorbar.descrip": "本示例中的代码讲解了如何设置标准误差类型。",
  "configstdeverrorbar.name": "标准偏差类型",
  "configstdeverrorbar.descrip": "本示例中的代码讲解了如何设置标准偏差类型。",
  "configtickmarklabelangle.name": "设置坐标轴标签角度",
  "configtickmarklabelangle.descrip": "本示例中的代码讲解了如何设置坐标轴标签角度。",
  "configxyerrorbars.name": "XY方向误差线",
  "configxyerrorbars.descrip": "本示例中的代码讲解了如何设置XY方向误差线（散列图或气泡图）。",
  "errorbars.name": "误差线",
  "errorbars.descrip": "## 误差线\n下列示例程序演示了如何配置图表的 **误差线**.",
  "configgradientfillwithpathshape.name": "设置渐变填充类型",
  "configgradientfillwithpathshape.descrip": "本示例中的代码讲解了如何设置不同的渐变填充类型。",
  "printtransparentcell.name": "打印单元格背景颜色的透明度",
  "printtransparentcell.descrip": "本示例中的程序讲解了如何打印单元格背景颜色的透明度。",
  "formulatemplate.name": "公式模板",
  "formulatemplate.descrip": "用包含公式的模板绑定数据。这些公式将保留下来，并引用扩展后的数据。",
  "globaloptions.name":"全局选项",
  "globaloptions.descrip":"## 全局选项\n此功能为用户提供全局选项，以控制GcExcel模板的默认行为。\n\nGcExcel为模板的全局选项定义了一些内置工作簿定义的名称。\n当前，这些选项仅在工作簿定义的名称中受支持。因此，用户在使用此功能时应注意它们的作用域。\n也就是说，多个工作表中的模板的行为相同。\n\n用户可以直接在Excel文件中或通过GcExcel api添加/编辑/删除这些内置定义的名称。\n\n内置命名公式中Name属性的值将作为模板全局选项的名称。\n内置命名公式中ReferesTo属性的值将作为模板全局选项的值。\n选项名称区分大小写，而选项值不区分大小写。\n\n模板支持多种全局选项：\n - **TemplateOptions.KeepLineSize:**布尔类型。该值可以是**True**或**False**（默认值）。\n模板处理时是否应保留行高和列宽。\n - **TemplateOptions.InsertMode:**字符串类型。值可以是**Cells**（默认值）或**EntireRowColumn**。\n当扩展模板时需要额外的空间时，GcExcel是插入单元格还是插入整个行和列。",
  "keeplinesize.name":"保留行列大小",
  "keeplinesize.descrip":"使用内置命名公式 \"TemplateOptions.KeepLineSize\" 指定在处理模板时是否应保留行高和列宽。\n该值为布尔类型，可以为 True 或 False（默认值）。",
  "insertmode.name":"插入模式",
  "insertmode.descrip":"使用内置命名公式 \"TemplateOptions.InsertMode\" 指定当扩展模板时需要额外的空间时，GcExcel是插入单元格还是插入整行和整列。\n该值为字符串类型，可以是\"Cells\"（默认值）或\"EntireRowColumn\"。",
  "imagetemplate.name":"图片模板",
  "imagetemplate.descrip":"使用模板属性  \"image=true\"，在模板处理后把图片字段的数据显示为图片",
  "templateotherfeatures.name":"结合其他功能",
  "templateotherfeatures.descrip":"## 结合其他功能\nGcExcel模板可以与其他功能一起创建许多动态报表，如：条件格式、图表。\n我们计划在将来支持更多使用模板的功能。",
  "templateworkwithconditionalformatting.name":"条件格式",
  "templateworkwithconditionalformatting.descrip":"模板单元格上的条件格式，在模板处理后，将应用于从其展开的所有单元格。",
  "templateworkwithchart.name":"图表",
  "templateworkwithchart.descrip":"用户可以手动将图表的系列名称、系列值和轴标签设置为相关模板单元格。模板处理后，可以按照这些设置正确显示图表。",
  "employeeabsenceschedule.name":"员工缺勤计划",
  "salestracker.name":"销售跟踪",
  "addshapewithcustomname.name": "自定义名字",
  "addshapewithcustomname.descrip": "本示例中的代码演示了如何添加带有自定义名字的形状。",
  "createchartwithcustomname.name": "自定义表名",
  "createchartwithcustomname.descrip": "本示例中的代码演示了如何创建带有自定义表名的图表。",
  "getpaginationinfo.name": "获取水平或者垂直分页信息",
  "getpaginationinfo.descrip": "本示例的程序讲解了如果获取一个工作表的水平或者垂直分页的页面边界数组。",
  "departmentbudget.descrip":"此示例显示垂直组模板。部门数据横向展开，员工数据纵向展开。",
  "employeeabsenceschedule.descrip":"此示例显示使用条件格式的模板。它使用一个工作表名称模板在单独的工作表中显示每个月的数据。",
  "financialdashboard.descrip":"此示例显示交叉表模板。它在表格上面有一个标题。",
  "purchaseorder.descrip":"此示例显示包含静态值和一个动态表的整个文档报表。",
  "sales.descrip":"此示例显示大纲组模板表。它在每个区域有对应的大纲和小计组。",
  "salestracker.descrip":"此示例显示使用图表的模板。这些图表使用模板单元作为它们的系列数据：值、轴标签等。",
  "shippinganddeliveryorder.descrip":"此示例显示具有预先设计样式的文档报告。它使用模板来填充静态和动态数据。",
  "tablixreport.descrip":"此示例显示Tablix模板表。行和列标题中有多行。里面有小计行。",
  "travel.descrip":"此示例在一个工作表中显示多个模板表。",
  "outlinecolumn.name": "Outline column",
  "outlinecolumn.descrip": "本示例中的程序讲解了如何为工作表添加outline column,以展示数据的树形结构。",
  "outlinecolumntopdf.name": "将outline column保存到PDF",
  "outlinecolumntopdf.descrip": "本示例中的程序讲解了如何将outline column导出到PDF文件中。",
  "setshapetextalignment.name": "设置形状文本的对齐方式",
  "setshapetextalignment.descrip": "本示例中的程序讲解了如何设置形状文本的水平和垂直对齐方式。",
  "shapewithtextalignment.name": "带有文本对齐方式的图形",
  "shapewithtextalignment.descrip": "GcExcel支持图形文本的对齐方式导出到PDF文件中。",
  "databinding.descrip": "## 数据绑定\nGrapeCity Documents for Excel 支持一次性的数据绑定. \n**工作表绑定**\n**单元格绑定**\n**表格绑定**",
  "databinding.name": "数据绑定",
  "bindautomatically.descrip": "此示例显示如何将数据源自动绑定到工作表中。",
  "bindautomatically.name": "自动绑定",
  "bindcustomobject.descrip": "此示例显示如何将自定义对象作为数据源绑定到表格上。",
  "bindcustomobject.name": "绑定自定义对象",
  "bindresultset.descrip": "此示例显示如何将ResultSet作为数据源绑定到工作表中。",
  "bindresultset.name": "绑定ResultSet到工作表",
  "bindmanually.descrip": "此示例显示如何将数据源手动绑定到工作表中。",
  "bindmanually.name": "手动绑定",
  "cellbinding.descrip": "此示例显示如何将数据源绑定到单元格中。",
  "cellbinding.name": "绑定单元格",
  "sheetbinding.descrip": "## 绑定工作表\n此目录下的示例展示如何配置工作表的绑定:\n - 使用 **IRange.getBindingPath/setBindingPath** 来设置/获取列的绑定路径(例如： worksheet.getRange(\"A:A\").getEntireColumn().setBindingPath(\"xxx\") )。\n - 使用 **IWorsheet.getAutoGenerateColumns/setAutoGenerateColumns** 来设置/获取是否数据源应该自动绑定到列上。 默认值为true。\n - 如果 **IWorsheet.getAutoGenerateColumns** 为真, 数据源的每个字段都会绑定到列上。\n - 使用 **IWorksheet.getDataSource/setDataSource** 来设置/获取数据源。 每个工作表只能有一个数据源。 对于工作表绑定，数据源只能为ResultSet或者实现了Iteratable接口的自定义对象。",
  "sheetbinding.name": "绑定工作表",
  "tablebinding.descrip": "## 绑定表格\n此目录下的示例展示如何配置表格的绑定:\n - 使用 **ITabel.getBindingPath/setBindingPath** 来设置/获取表格的绑定路径。\n - 使用 **ITableColumn.getDataField/setDataField** 来设置/获取表格列的绑定路径。\n - 使用 **ITable.getAutoGenerateColumns/setAutoGenerateColumns** 来设置/获取是否数据源应该被自动绑定到表格上。默认为真。\n - 当 **ITable.getAutoGenerateColumns** 为真， 数据源的每个公有字段会被绑定到对应的表格列上。\n - 使用 **IWorksheet.getDataSource/setDataSource** 来设置/获取数据源。 数据源只能为含有实现了IEnumerable接口的字段的自定义对象。\n - 表格区域会随着数据源的大小动态变化。",
  "tablebinding.name": "绑定表格",
  "getrangeboundary.name": "添加图片到指定的区域",
  "getrangeboundary.descrip": "本示例中的程序讲解了如何添加一个图片到指定区域。",
  "addsignaturelines.descrip": "添加新的 Microsoft Office 签名行",
  "addsignaturelines.name": "添加签名行",
  "copysignaturelines.descrip": "将签名行复制到其他范围或工作表",
  "copysignaturelines.name": "复制签名行",
  "countersignsignature.descrip": "使用同一证书重新签署",
  "countersignsignature.name": "重新签署",
  "cutsignaturelines.descrip": "将签名行剪切到其他范围",
  "cutsignaturelines.name": "剪切签名行",
  "deletesignaturelines.descrip": "通过 IShape 或 ISignature 删除签名行",
  "deletesignaturelines.name": "删除签名行",
  "listsignaturelines.descrip": "使用索引或枚举器列出签名行",
  "listsignaturelines.name": "列出签名行",
  "movesignaturelines.descrip": "将签名行移到其他范围或工作表",
  "movesignaturelines.name": "移动签名行",
  "signsignatureline.descrip": "使用 ISignature.Sign 签署新建签名行",
  "signsignatureline.name": "签署新建签名行",
  "signworkbook.descrip": "使用 ISignatureSet.AddNonVisibleSignature 签署工作簿",
  "signworkbook.name": "签署工作簿",
  "verifysignatures.descrip": "使用 ISignature.IsValid 验证签名",
  "verifysignatures.name": "验证签名",
  "signatures.name": "数字签名",
  "exportsignaturelinetopdf.descrip": "将签名行导出到 PDF",
  "exportsignaturelinetopdf.name": "导出 PDF",
  "signatures.descrip": "## 签名\n包含使用签名行和数字签名的示例",
  "tojsonfromjsonforworksheet.name": "导入/导出 Json",
  "tojsonfromjsonforworksheet.descrip":"参考以下示例代码，学习如何将单个工作表导入或导出为Json",
  "templateworkwithtable.name":"表格",
  "templateworkwithtable.descrip":"包含模板单元格的表将在模板处理后相应地调整大小",
  "medicalreport.name":"医疗报告",
  "medicalreport.descrip":"此示例演示了一个表格中包含模板单元格的完整文档报告。",
  "htmlexporting.name": "导出Html",
  "htmlexporting.descrip": "## 导出Html\n此目录下的示例展示如何在服务端导出html. \n\n单击 **\"运行\"** 按钮在服务端执行以下操作:\n - 创建一个空的工作簿\n - 执行代码窗口中的所有代码\n - 保存html\n\n然后你可以在浏览器中下载并查看导出的html文件",
  "saveworkbooktohtml.name": "导出工作簿到html",
  "saveworkbooktohtml.descrip": "此示例中的代码讲解了如何导出工作簿到html。",
  "saveworksheettohtml.name": "导出工作表到html",
  "saveworksheettohtml.descrip": "此示例中的代码讲解了如何导出工作表到html。",
  "saverangetohtml.name": "导出区域到html",
  "saverangetohtml.descrip": "此示例中的代码讲解了如何导出一片区域到html。",
  "saveworksheettosinglehtml.name": "导出单个html文件",
  "saveworksheettosinglehtml.descrip": "此示例中的代码讲解了如何导出工作表/区域到单个html文件。\n\t\n当**HtmlSaveOptions**满足下列所有条件时, 工作表/区域会导出为单个html文件流\n - HtmlSaveOptions.ExportSheetName被指定且有效或者工作簿只有一个工作表。\n - HtmlSaveOptions.ExportImageAsBase64设置为true。\n - HtmlSaveOptions.ExportCssSeperately设置为false。\n - HtmlSaveOptions.ExportSingleTab设置为false。",
  "savehtmlwithheadingsandgridlines.name": "导出有行/列头以及网格线的html",
  "savehtmlwithheadingsandgridlines.descrip": "此示例中的代码讲解了如何将excel文件导出有行/列头以及网格线的html。",
  "savehtmlwithscalablewidth.name": "导出可伸缩页面宽度的html",
  "savehtmlwithscalablewidth.descrip": "此示例中的代码讲解了如何将excel文件导出可伸缩页面宽度的html。",
  "setshapezorder.name": "设置形状的层叠顺序",
  "setshapezorder.descrip": "此示例中的代码讲解了如何设置形状的层叠顺序。",
  "configfreezetrailingrowcol.name": "设置尾部冻结行/列",
  "configfreezetrailingrowcol.descrip": "此示例中的代码讲解了如何设置表单的尾部冻结行列。",
  "configfrozenlinecolor.name": "设置冻结线颜色",
  "configfrozenlinecolor.descrip": "此示例中的代码讲解了如何设置冻结线的颜色。",
  "configshowhvgridlinesseparately.name": "分别设置水平与竖直网格线的显示",
  "configshowhvgridlinesseparately.descrip": "此示例中的代码讲解了如何分别设置竖直与水平网格线的显示。",
  "picturetransparency.name": "设置透明度",
  "picturetransparency.descrip": "此示例中的代码讲解了如何设置图片的透明度。",
  "addnonvisiblesignaturetosignedworkbook.descrip": "使用仅数字签名模式在签名过的工作簿添加签名",
  "addnonvisiblesignaturetosignedworkbook.name": "在签名过的工作簿添加签名",
  "deletenonvisiblesignature.descrip": "使用仅数字签名模式在签名过的工作簿删除签名",
  "deletenonvisiblesignature.name": "在签名过的工作簿删除签名",
  "deletesignaturefromsignatureline.descrip": "使用仅数字签名模式从签名过的签名行删除签名",
  "deletesignaturefromsignatureline.name": "从签名过的签名行删除签名",
  "signexistingsignatureline.descrip": "使用仅数字签名模式在签名过的工作簿签署签名行",
  "signexistingsignatureline.name": "在签名过的工作簿签署签名行",
  "FolderExampleDemonstratingFeatures": "本示例中，我们将展示如下特性：",
  "templateworkwithsparkline.name":"迷你图",
  "templateworkwithsparkline.descrip":"引用模板单元格的迷你图，将在模板处理后进行相应的复制和调整.",
  "expensetrendbudgetreport.name":"费用趋势预算",
  "expensetrendbudgetreport.descrip":"此示例主要演示引用了模板单元格的迷你图。",
  "fillmode.name":"填充模式",
  "fillmode.descrip":"用户可以使用 **FM(FillMode)** 属性更改模板的数据填充模式。 它支持两个值：\n\n **Insert**（默认）\n\n 模板展开时插入空行，然后在行中设置数据和样式。\n\n **Overwrite** \n\n数据覆盖，用数据直接覆盖单元格，不包含样式。 如果用户具有固定布局的模板，这将非常有用。\n\n使用Overwrite模式时，用户可以使用属性 **FR(FillRange)** 指定覆盖数据的范围。 如果该范围的数据溢出，GcExcel将相应地复制填充范围以设置数据。",
  "setfillmode.name":"默认",
  "setfillmode.descrip":"默认为Insert模式，模板展开时插入空行，然后在行中设置数据和样式。",
  "setfillmodeoverflow.name":"固定布局(溢出)",
  "setfillmodeoverflow.descrip":"使用Overwrite模式时，用户可以使用属性 **FR(FillRange)** 指定覆盖数据的范围。 如果该范围的数据溢出，GcExcel将相应地复制填充范围以设置数据。",
  "setfillmodeoverwrite.name":"固定布局",
  "setfillmodeoverwrite.descrip":"使用Overwrite模式时， 不会插入新的行列， 而是用数据直接覆盖单元格，不包含样式。 如果用户具有固定布局的模板，这将非常有用。",
  "constructionproposal.name":"施工方案",
  "constructionproposal.descrip":"此示例主要演示在固定布局的模板中应用覆盖填充模式。",
  "pdfformbuilder.name": "PDF表单生成器",
  "pdfformbuilder.descrip":"## PDF表单生成器\nGcExcel模板提供了一个新的模板属性 **form** 供用户定义PDF表单字段。form属性的值是JSON格式。用户可以使用JSON字符串来描述一个PDF表单字段的所有设置。属性名和枚举值不区分大小写。\n\n此特性仅用于PDF导出，因此在导出到excel时将忽略PDF表单字段的定义。",
  "pdfformbuildersamples.name":"PDF表单生成器样例",
  "pdfformbuildersamples.descrip":"## PDF表单生成器样例\n本节展示了一些实际应用GcExcel模板来生成完整的专业PDF表单报告的场景。",
  "checkboxfields.name":"复选框",
  "checkboxfields.descrip":"将数据与包含复选框字段的模板绑定。",
  "comboboxfields.name":"组合框",
  "comboboxfields.descrip":"将数据与包含组合框字段的模板绑定。",
  "listboxfields.name":"列表框",
  "listboxfields.descrip":"将数据与包含列表框字段的模板绑定。",
  "pushbuttonfields.name":"按钮",
  "pushbuttonfields.descrip":"此示例演示使用模板单元格导出提交按钮和重置按钮表单。",
  "radiobuttonfields.name":"单选框",
  "radiobuttonfields.descrip":"将数据与包含单选框字段的模板绑定。",
  "sendaitaxform.name":"仙台的纳税申请表",
  "sendaitaxform.descrip":"此示例演示使用模板单元格导出PDF表单。",
  "shipregistration.name":"船舶登记表",
  "shipregistration.descrip":"此示例演示使用模板单元格导出PDF表单。",
  "signaturefields.name":"签名",
  "signaturefields.descrip": "此示例演示使用模板单元格导出签名表单。",
  "textfields.name":"文本框",
  "textfields.descrip":"将数据与包含文本框字段的模板绑定。",
  "ustaxform_fw4.name":"美国税收表",
  "ustaxform_fw4.descrip":"此示例演示使用模板单元格导出PDF表单。",
  "wageandtaxstatement.name":"工资及税务报表",
  "wageandtaxstatement.descrip":"此示例演示使用模板单元格导出PDF表单。",
  "deferlayoutupdate.descrip": "参考以下示例代码，学习如何让透视表延迟布局更新。",
  "deferlayoutupdate.name": "延迟布局更新",
  "fieldlayoutsettings.descrip": "参考以下示例代码，学习如何改变字段的布局。",
  "fieldlayoutsettings.name": "字段布局设置",
  "getdetailrange.descrip": "参考以下示例代码，学习如何获取一个透视表的详细区域信息。",
  "getdetailrange.name": "获取详细的区域信息",
  "layoutandformatoptions.descrip": "参考以下示例代码，学习如何设置透视表选项中的布局和格式。",
  "layoutandformatoptions.name": "设置透视表选项中的布局和格式",
  "multipledatafields.descrip": "参考以下示例代码，学习如何从一个透视表字段创建多个值字段。",
  "multipledatafields.name": "从一个透视表字段创建多个值字段",
  "setconditionalformat.descrip": "参考以下示例代码，学习如何给一个透视表设置条件格式。",
  "setconditionalformat.name": "设置条件格式",
  "setstyle.descrip": "参考以下示例代码，学习如何在透视表中找到特定区域并给其设置样式。",
  "setstyle.name": "设置样式",
  "sort.descrip": "参考以下示例代码，学习如何给一个透视表字段的项目排序。",
  "sort.name": "排序",
  "embedfontforformfields.name": "字体嵌入模式",
  "embedfontforformfields.descrip":"使用全局选项 TemplateOptions.EmbedFontForFormFields，你可以选择在导出PDF文件时，是否将表单控件所用的字体嵌入到文件中。\n - 设置为True，表示嵌入字体。然而，产生的PDF文件可能比较大。\n - 设置为False，表示不嵌入字体， 产生的PDF文件会比较小。但在输入操作系统中未安装的文字时，你可能未看到不正确的输出。",
  "rangeaddress.descrip": "使用 IRange.Address 获取单元格的地址",
  "rangeaddress.name": "获取地址",
  "highlightstyle.descrip":	"使用自定义的高亮方式展示非法数据",
  "highlightstyle.name": "高亮风格",
  "pivotchart.descrip": "## 数据透视图\n用户可以在工作表中创建数据透视图。\n\n数据透视图在其关联的数据透视表中提供数据的图形表示。 数据透视图也是交互式的。 创建数据透视图时，将显示数据透视图筛选器窗格。 您可以使用此筛选器窗格来排序和筛选数据透视图的基础数据。 您对关联的数据透视表中的布局和数据所做的更改将立即反映在数据透视图中的布局和数据中，反之亦然。\n\n数据透视图显示数据系列，类别，数据标记和轴，就像标准图表一样。 您还可以更改图表类型和其他选项，例如标题，图例位置，数据标签，图表位置等。\n- 首先创建一个普通图表。\n- 然后调用 **IChart.SetSourceData(IRange source)** 将普通图表转化为数据透视表（当且仅当**source**位于数据透视表的区域中）。",
  "pivotchart.name": "数据透视图",
  "createpivotchart.descrip": "参考以下示例代码，学习如何用GcExcel创建一个数据透视图。",
  "createpivotchart.name": "创建数据透视图",
  "convertpivotcharttonormal.descrip": "参考以下示例代码，学习如何将一个数据透视图转化为普通图表。",
  "convertpivotcharttonormal.name": "将数据透视图转化为普通图表",
  "configpivotchartbuttons.descrip": "参考以下示例代码，学习如何设置是否显示数据透视图的按钮。",
  "configpivotchartbuttons.name": "设置数据透视图的按钮",
  "updatechartifptchanged.descrip": "参考以下示例代码来查看当数据透视表布局更新时，是如何影响数据透视图的布局的。",
  "updatechartifptchanged.name": "更新数据透视表来影响数据透视图的布局",
  "specialcellsfindvaluesandformulas.descrip": "此示例演示如何按数据类型查找范围",
  "specialcellsfindvaluesandformulas.name": "按数据类型查找范围",
  "specialcellsfindmiscellaneous.descrip": "此示例演示如何按类型查找特殊单元格",
  "specialcellsfindmiscellaneous.name": "按类型查找特殊单元格",
  "pageprinteventsexitprinting.descrip": "在 PagePrinted 事件使用 HasMorePages 退出打印",
  "pageprinteventsexitprinting.name": "退出 PDF 导出",
  "pageprinteventsskippage.descrip": "在 PagePrinting 事件使用 SkipThisPage 跳过页面",
  "pageprinteventsskippage.name": "导出 PDF 时跳过页面",
  "pageprinteventstrackprogress.descrip": "在 PagePrinting 事件输出打印进度到控制台",
  "pageprinteventstrackprogress.name": "显示 PDF 导出进度",
  "specialcellsquickstart.descrip": "此实例演示如何按值类型查找特殊单元格",
  "specialcellsquickstart.name": "按值类型查找特殊单元格",
  "selectworksheets.descrip": "使用 IWorksheets.Select 和 IWorksheet.Select 选择工作簿",
  "selectworksheets.name": "选择工作簿",
  "allbarcodes.descrip": "GcExcel支持11种条形码, 可以通过简单的条形码公式进行添加。",
  "allbarcodes.name": "基础应用",
  "barcode.descrip": "## 条形码\nGcExcel支持11种条形码, 可以通过简单的条形码公式进行添加。",
  "barcode.name": "条形码",
  "codabar.descrip": "Codabar是由Monarch Marking Systems于1972年开发的条形码。它是在“Code 2 of 5”之后的早期阶段引入的条形码。它广泛用于需要序列号的应用，例如血库管理，快递服务和会员卡。",
  "codabar.name": "Codabar 条形码",
  "code128.descrip": "Code 128是ISO / IEC 15417：2007中定义的高密度线性条形码符号。它用于字母数字或仅数字条形码。",
  "code128.name": "Code128 条形码",
  "code39.descrip":	"CODE 39是Intermec Corporation于1975年开发的条形码。条形码中最多可包含43个字符，包括数字，字母和一些符号。",
  "code39.name": "Code39 条形码"	,
  "code49.descrip":	"Code 49是Intermec公司的David Allais于1987年开发的连续可变长度堆叠符号系统。它将通用产品代码（UPC）和Code 39的一些特性组合成一种条形码语言。这是第一个堆叠条形码符号系统，它支持使用完整的128个字符的ASCII集。代码属于公共领域。",
  "code49.name": "Code49 条形码",
  "code93.descrip":	"Code93是Intermec于1982年设计的条形码符号系统，为Code39提供更高密度和数据安全性增强。它是一种字母数字，可变长度的符号系统。Code 93主要由加拿大邮政使用，用于编码补充递送信息。每个符号包含两个校验字符。",
  "code93.name": "Code93 条形码",
  "datamatrix.descrip":	"DataMatrix 二维码是由ID Matrix于1987年开发的2D矩阵代码。它在1996年注册了AIMI的ISS标准，在2000年注册了ISO / IEC标准。",
  "datamatrix.name": "DataMatrix 二维码",
  "ean13.descrip": "EAN-13是常见的最终产品条形码协议和标准的比较，主要用于超市和其他零售。",
  "ean13.name":	"EAN13 条形码",
  "ean8.descrip": "EAN-8是EAN / UPC符号条形码，源自较长的国际商品编号（EAN-13）代码。EAN-8代码在全世界都很常见，公司也可以使用它们来识别仅在其商店中销售的自有品牌产品。",
  "ean8.name": "EAN8 条形码",
  "gs1128.descrip":	"GS1-128是使用Code 128条形码规范的GS1实现的应用标准。以前的正确名称是UCC / EAN-128。其他不再使用的名称包括UCC-128和EAN-128。GS1-128使用一系列应用程序标识符来包含其他数据，例如最佳日期，批号，数量，权重以及用户所需的许多其他属性。",
  "gs1128.name": "GS1-128 条形码",
  "pdf417.descrip":	"PDF417在商业和政府组织的许多应用中使用。PDF417二维码（也称为符号）由3到90行组成，每行都像一个小的线性条形码。",
  "pdf417.name": "PDF417 二维码",
  "qrcode.descrip":	"QR码（快速响应代码）是由DENSO WAVE于1994年开发的用于高速读取的2D矩阵代码。它在1997年注册到AIMI的ITS标准，在2000年注册到ISO / IEC标准。",
  "qrcode.name": "QRCode 二维码",
  "cellbuttons.descrip": "在单元格中创建不同的按钮",
  "cellbuttons.name": "单元格按钮",
  "specialcells.descrip": "此章节演示如何使用 IRange.SpecialCells 方法查找特殊单元格",
  "specialcells.name": "查找特殊单元格",
  "specialcellsinexistingfiles.descrip": "此实例演示如何在文件中查找特殊单元格",
  "specialcellsinexistingfiles.name": "在文件中查找特殊单元格",
  "pageprintevents.descrip": "此章节包含 PDF 导出进度相关示例",
  "pageprintevents.name": "PDF 导出进度",
  "setdefaultvalue.descrip": "用户可以使用 **DV(defaultValue)** 属性为模板单元格设置一个默认值。该默认值可以是数字、字符或字符串。",
  "setdefaultvalue.name": "设置默认值",
  "iterativecalculation.name": "迭代计算",
  "iterativecalculation.descrip": "参考以下代码来设置迭代计算的选项。注意Excel打开这个文件的时候，会把迭代计算再执行一遍，这会导致你看到的内容和你期望不一样。",
  "centeracrossselection.descrip": "此示例打印跨列居中表头的报表到 PDF",
  "centeracrossselection.name": "跨列居中",
  "textellipsis.name":"文本省略号",
  "textellipsis.descrip":"在导出的PDF中显示文本省略号。",
  "spreadjsfeatures.descrip": "## SpreadJS特性\n此目录下的示例展示了一些对SpreadJS（西安葡萄城开发的一款基于 HTML5 的纯前端表格控件）特有的功能的支持。\n\nGcExcel为了实现与SpreadJS在使用json时进行无损数据交互，支持了这些特有功能。一些功能可能没有对应的API，一些功能支持了导出到pdf文档。\n\n请注意Excel不支持这些功能，导出Excel文件时，这些设置会被丢弃。",
  "spreadjsfeatures.name": "SpreadJS特性",
  "rangetemplate.descrip": "将区域模板单元格导出到pdf文档",
  "rangetemplate.name": "区域模板单元格",
  "options.descrip": "## Excel设置\n此目录下的示例展示了一些使用workbook时的一些设置。",
  "options.name": "设置",
  "configautomaticgroupdatetimeinpivottable.descrip": "参考以下代码来设置关闭数据透视表中对日期/时间的自动分组。",
  "configautomaticgroupdatetimeinpivottable.name": "关闭对日期/时间自动分组（数据透视表）",
  "addcheckboxlistcelltype.name": "复选框列表单元格(API)",
  "addcheckboxlistcelltype.descrip": "此示例演示如何用API创建复选框列表单元格。",
  "addradiolistcelltype.name": "单选列表单元格(API)",
  "addradiolistcelltype.descrip": "此示例演示如何用API创建单选列表单元格。",
  "fromjsonwithoptions.name": "配置导入json的选项",
  "fromjsonwithoptions.descrip": "此示例演示如何在将json反序列化为工作簿时设置反序列化选项。",
  "tojsonwithoptions.name": "配置导出json的选项",
  "tojsonwithoptions.descrip": "此示例演示如何在将工作簿序列化为json时设置序列化选项。",
  "addcheckboxlistfromjson.descrip": "此示例演示如何用FromJson为单元格创建复选框列表单元格类型。",
  "addcheckboxlistfromjson.name": "复选框列表(Json)",
  "addradiolistfromjson.descrip": "此示例演示如何用API为单元格创建单选列表单元格类型。",
  "addradiolistfromjson.name": "单选列表(Json)",
  "formatstring.descrip":"格式字符串是SpreadJS中样式格式化功能的增强。 工作簿中的单元格可以同时包含公式和文本。",
  "formatstring.name":"格式字符串",
  "cellpaddingandlabel.descrip": "你可以使用单元格内边距和单元格标签使你的数据更便于阅读。",
  "cellpaddingandlabel.name": "单元格内边距和标签",
  "backgroundcolor.name":"背景色",
  "backgroundcolor.descrip":"为ssjson的所有工作表设置背景色以及非交互区域的颜色",
  "backgroundimage.name":"背景图",
  "backgroundimage.descrip":"为ssjson的所有工作表设置背景图及其布局",
  "insertdeletemultipletablerowcolumns.name":"插入或删除表的多行和多列",
  "insertdeletemultipletablerowcolumns.descrip":"此示例演示如何在表中添加和删除多个列和行。",
  "enhancedtextfields.name":"增强的文本框",
  "enhancedtextfields.descrip":"文本框支持HTML输入框的某些属性。",
  "customerbillpay.name":"客户账单支付",
  "customerbillpay.descrip":"此示例演示了在Excel模板中定义PDF表单字段并导出为PDF的过程。",
  "hotelbooking.name":"订酒店",
  "hotelbooking.descrip":"此示例演示了在Excel模板中定义PDF表单字段并导出为PDF的过程。",
  "leaserentalapplicationform.name":"租赁申请表",
  "leaserentalapplicationform.descrip":"此示例演示了在Excel模板中定义PDF表单字段并导出为PDF的过程。",
  "timeoffrequest.name":"请假时间",
  "timeoffrequest.descrip":"此示例演示了在Excel模板中定义PDF表单字段并导出为PDF的过程。",
  "crossworkbookformula.name":"跨工作簿引用公式",
  "crossworkbookformula.descrip":"参考以下代码使用跨工作簿引用公式，以及如何更新外部文件的缓存。",
  "crossworkbookformula2.name":"跨工作簿引用公式2",
  "crossworkbookformula2.descrip":"参考以下代码使用跨工作簿引用公式，以及如何更新外部文件的缓存。",
  "accesscellsrowscolumns.descrip":"此示例演示如何访问工作表范围中的cell /Rows/Columns/EntireRow/EntireColumn对象。",
  "accesseachareaofrange.descrip":"此示例演示如何在范围包含多个区域时访问范围中的每个区域。",
  "accessrange.descrip":"Range是指在电子表格中定义的单元格数组。GcExcel允许用户定义一个范围，然后访问范围内的行和列，以执行特定的任务，如格式化单元格，合并单元格，插入或删除单元格以及其他有用的操作。",
  "accesstableranges.descrip":"您可以使用GcExcell提供的接口ITabl.HeaderRange、ITable.DataRange和ITable.TotalsRange方便地获取表头、数据和汇总的区域。",
  "accessworksheet.descrip":"请参考下面的示例代码，了解如何获取工作表对象。",
  "activateworksheet.descrip":"请参考下面的示例代码，以了解如何创建工作表。",
  "addborderstocell.descrip":"您可以为单元格设置不同类型的边框样式和颜色。",
  "addcomment.descrip":"请参考下面的示例代码，了解如何为单元格添加注释。",
  "addcustomname.descrip":"请参考以下示例代码，以向工作表中的区域添加自定义名称和设置公式。",
  "addcustomslicerstyle.descrip":"请参考下面的示例代码，了解如何创建自定义切片器样式。",
  "addcustomtablestyle.descrip":"在GcExcel中，你可以创建自定义的表格样式并将它们应用到表格中。",
  "addcustomthemes.descrip":"请参考以下示例代码，了解如何创建自定义主题并将其应用于工作簿。",
  "addingborderstorange.descrip":"您可以为区域设置不同类型的边框样式和颜色。",
  "addseries.descrip":"请参考下面的示例代码，了解如何在图表中添加数据系列。",
  "addslicersforpivottable.descrip":"请参考下面的示例代码，了解如何为数据透视表创建切片器。",
  "addslicersfortable.descrip":"请参考下面的示例代码，了解如何为表创建切片器。",
  "addtextrun.descrip":"请参阅下面的示例代码，了解如何通过添加单元格富文本。",
  "addworksheet.descrip":"请参阅以下示例代码，了解如何添加新工作表。",
  "applyslicerstyle.descrip":"请参阅下面的示例代码，了解如何应用切片器样式。",
  "applystyle.descrip":"您可以通过IWorksheet获得内置的命名样式。然后将样式应用于单元格或区域。",
  "applytablestyle.descrip":"你可以使用任何由GcExcel .net提供的预定义的表格样式来格式化一个表格。",
  "areachart.descrip":"参考下面的示例代码，了解如何在GcExcel中添加面积图。",
  "areastacked100.descrip":"参考下面的示例代码，了解如何在GcExcel中添加一个百分比堆积面积图。",
  "areastackedchart.descrip":"参考下面的示例代码，了解如何在GcExcel中添加堆积面积图。",
  "autofit.descrip":"请参考以下示例代码，设置工作表中的行高和列宽为自动适应。",
  "barclusteredchart.descrip":"参考下面的示例代码，了解如何在GcExcel中添加簇状条形图。",
  "barstacked100chart.descrip":"参考下面的示例代码，了解如何在GcExcel中添加百分比堆积条形图。",
  "barstackedchart.descrip":"参考下面的示例代码，了解如何在GcExcel中添加堆积条形图。",
  "basicshapes.descrip":"GcExcel可以将包含预设形状、基本形状、连接器箭头、带有文本的形状等的电子表格导出为PDF文件。",
  "bubblechart.descrip":"参考下面的示例代码，了解如何在GcExcel中添加气泡图。",
  "cellinfo.descrip":"CellInfo类可以帮助用户将单元格地址转换为行/列坐标，将列名、行名转换为索引。",
  "changedatafieldsummarizefunction.descrip":"请参阅下面的示例代码，了解如何更改Pivot表数据字段的整合功能。",
  "changeseriestype.descrip":"请参阅下面的示例代码，了解如何更改数据系列的图表类型。",
  "changeworkbooktheme.descrip":"请参阅以下示例代码，以了解如何更改工作簿的主题。",
  "changeworksheetfilterrange.descrip":"请参阅以下示例代码，以了解如何更改工作表中的筛选范围。",
  "charactercelltext.descrip":"请参阅下面的示例代码，了解如何通过Characters()方法创建单元格富文本。",
  "chartcopy.descrip":"请参阅下面的示例代码，了解如何复制图表。",
  "chartcut.descrip":"请参阅下面的示例代码，了解如何剪切图表。",
  "chartduplicate.descrip":"请参阅下面的示例代码，了解如何克隆图表。",
  "chartjustplotvisiblecell.descrip":"请参阅以下示例代码，以了解如何在图表中只显示可见单元格。",
  "clearcomment.descrip":"请参阅下面的示例代码，了解如何删除和清除注释。",
  "clearfilter.descrip":"请参阅下面的示例代码，以了解如何清除工作表中的过滤。",
  "clearoutline.descrip":"您可以使用IRange接口的ClearOutline方法在行和列的级别上清除分组。",
  "clearsparklinegroup.descrip":"请参阅下面的示例代码，了解如何清除迷你图组。",
  "clearsparklines.descrip":"请参阅下面的示例代码，了解如何清除迷你图。",
  "collapsegroup.descrip":"通过将IRange接口的ShowDetail属性设置为布尔值false，可以隐藏明细数据。请参阅以下示例代码以在工作表中隐藏明细数据。",
  "columnclusteredchart.descrip":"参考下面的示例代码，了解如何在GcExcel中添加簇状柱形图。",
  "columnstacked100chart.descrip":"参考下面的示例代码，了解如何在GcExcel中添加百分比堆积柱形图。",
  "columnstackedchart.descrip":"参考下面的示例代码，了解如何在GcExcel中添加堆积柱形图。",
  "combinationchart1.descrip":"参考下面的示例代码，了解如何在GcExcel中添加组合图表(列和行标记)。",
  "combinationchart2.descrip":"参考下面的示例代码，了解如何在GcExcel中添加组合图表(列堆积和区域)。",
  "configaxistitle.descrip":"参考下面的示例代码，了解如何显示和定制轴标题，您可以更改标题文本、字体大小、字体颜色等。",
  "configbubblechartlayout.descrip":"参考下面的示例代码，了解如何定制气泡图(BubbleScale, SizeRepresents, ShowNegativeBubbles)。",
  "configcategoryaxesformat.descrip":"参考下面的示例代码，了解如何配置类别轴的格式，例如自定义线条样式、线条颜色、填充颜色等。",
  "configcategoryaxisunits.descrip":"参考下面的示例代码，了解如何配置日期轴，例如轴的最大/最小规模、主/次单元等。",
  "configchart3dformat.descrip":"请参阅下面的示例代码，了解如何配置图表的三维属性。",
  "configchartareafont.descrip":"请参阅下面的示例代码，了解如何配置图表区域的字体。",
  "configchartareaformat.descrip":"请参阅下面的示例代码，了解如何配置图表区域的格式。",
  "configchartbackwall.descrip":"请参阅下面的示例代码，以了解如何配置三维图的背景墙。",
  "configchartfloorstyle.descrip":"请参阅下面的示例代码，以了解如何配置基底样式。",
  "configchartsidewall.descrip":"请参阅下面的示例代码，以了解如何配置三维图的侧面墙。",
  "configcharttitlerichtext.descrip":"请参阅下面的示例代码，以了解如何使用富文本格式配置图表标题。",
  "configcharttitlestyle.descrip":"参考下面的示例代码，了解如何配置图表标题的不同样式(填充、边框、字体等)。",
  "configchartwallstyle.descrip":"请参阅下面的示例代码，以了解如何配置三维图的所有墙壁。",
  "configcommentlayout.descrip":"请参阅下面的示例代码，了解如何格式化和自定义注释。",
  "configdatalabelformat.descrip":"请参阅下面的示例代码，了解如何显示和自定义图表的数据标签。",
  "configdatalabeltext.descrip":"请参阅下面的示例代码，了解如何配置图表中数据标签的显示文本。",
  "configdatapointformat.descrip":"请参阅下面的示例代码，了解如何在图表中格式化一系列数据点。",
  "configdisplayunitlabel.descrip":"请参阅下面的示例代码，了解如何显示和配置轴的显示单元标签，例如标签的填充和边框，以及常见的字体设置。",
  "configevenpageheaderfooter.descrip":"如果您想为所有偶数页使用不同的页眉和页脚，首先需要将OddAndEvenPagesHeaderFooter属性设置为true。完成此操作后，您可以使用IPageSetup接口的属性来配置偶数页眉和页脚。",
  "configfirstpageheaderfooter.descrip":"如果您想在您的第一个页面中使用不同的页眉和页脚，您首先需要将IPageSetup接口的DifferentFirstPageHeaderFooter属性设置为true。完成此操作后，您可以使用IPageSetup接口的属性来配置第一个页面的页眉和页脚。",
  "configfirstpagenumber.descrip":"您可以使用IPageSetup接口的FirstPageNumber属性来根据您的选择配置第一个页面的编号。",
  "configgridlines.descrip":"参考下面的示例代码，了解如何配置网格线，您可以显示或隐藏每个轴的主网格线和小网格线，您还可以配置网格线的不同属性，如线样式、颜色和权重等。",
  "configheaderfooter.descrip":"在GcExcel中，你可以使用LeftHeader属性，LeftFooter属性，CenterFooter属性，右theader属性，CenterHeader属性，和IPageSetup界面的RightFooter属性来配置页眉和页脚。",
  "configlegendentryfontstyle.descrip":"请参阅下面的示例代码，以了解如何配置图例条目的字体属性。",
  "configlegendformat.descrip":"请参阅下面的示例代码，以了解如何格式化图表的图例。",
  "configlegendpositionandlayout.descrip":"参考下面的示例代码，查看如何更改图例在图表中的位置。",
  "configmarkersformat.descrip":"请参阅下面的示例代码，了解如何格式化数据系列的标记(填充和边框)。",
  "configmarkerstyle.descrip":"参考下面的示例代码，了解如何定制标记的样式和大小。",
  "confignegativepoint.descrip":"参考下面的示例代码，了解如何设置负值样式。",
  "configpagecenter.descrip":"您可以使用IPageSetup接口的centerhorizontal属性和centervertical属性来配置页面的居中方式。",
  "configpagemargins.descrip":"您可以使用IPageSetup接口的TopMargin属性、RightMargin属性和BottomMargin属性来配置页面的页边距。",
  "configpageorder.descrip":"您可以使用IPageSetup接口的Order属性来根据您的选择配置页面的打印顺序。",
  "configpageorientation.descrip":"您可以使用IPageSetup界面的方向属性，根据您的首选项将页面的方向设置为纵向或横向。",
  "configpaperscaling.descrip":"您可以使用IsPercentScale属性来控制如何缩放电子表格;FitToPagesTall属性和FitToPagesWide属性来设置它的大小;用Zoom属性调整打印的纸张的大小。",
  "configpapersize.descrip":"您可以使用IsPercentScale属性来控制电子表格缩放;FitToPagesTall属性和FitToPagesWide属性来设置它的大小;用Zoom属性调整打印的纸张的大小。",
  "configplotareaformat.descrip":"参考下面的示例代码，了解如何设置绘图区域样式(填充和边框)。",
  "configprintarea.descrip":"GcExcel .net支持自定义打印，允许用户选择工作表中的一片区域打印。",
  "configprinttailcolumns.descrip":"您可以配置工作表中的列，通过IPageSetup接口的PrintTailColumns属性在右侧重复它们。",
  "configprinttailrows.descrip":"您可以在工作表中配置行，使用IPageSetup接口的PrintTailRows属性在底部重复它们。",
  "configprinttitlecolumns.descrip":"您可以配置工作表中的列，以便通过使用PrintTitleColumns属性在左侧重复它们。",
  "configprinttitlerows.descrip":"您可以配置工作表中的行，以便通过使用PrintTitleRows属性在顶部重复它们。",
  "configrunfont.descrip":"参考下面的示例代码，了解如何在单元格中显示上标效果。",
  "configsecondarysection.descrip":"参考下面的示例代码，了解如何配置复合饼图的饼图的次要图。",
  "configseriesformat.descrip":"请参阅下面的示例代码，了解如何格式化数据系列。",
  "configshape3dformat.descrip":"请参阅下面的示例代码，了解如何配置图形的三维属性。",
  "configshapeline.descrip":"请参阅下面的示例代码，以了解如何格式化图形的边框。",
  "configshapewithgradientfill.descrip":"参考下面的示例代码，了解如何设置图形的渐变填充。",
  "configshapewithpatternfill.descrip":"请参阅下面的示例代码，了解如何为图案设置填充样式。",
  "configshapewithpicturefill.descrip":"参考下面的示例代码，了解如何为形状设置图片填充。",
  "configshapewithsolidfill.descrip":"参考下面的示例代码，了解如何设置形状的纯色填充。",
  "configshapewithtexturefill.descrip":"参考下面的示例代码，了解如何设置形状的纹理填充。",
  "configsheetprintsettings.descrip":"参考以下示例代码自定义工作表的打印设置，例如是否打印网格线和标题。",
  "configslicerlayout.descrip":"请参阅下面的示例代码，以了解如何配置切片器对象的布局。",
  "configsparklinesettings.descrip":"请参阅下面的示例代码，了解如何配置迷你图，例如线重、标记颜色和系列颜色。",
  "configtickmarklabel.descrip":"参考下面的示例代码，了解如何配置刻度线标签，您可以自定义刻度标签的填充和边框，还可以设置不同的字体属性，如字体大小、字体名称、字体样式等。",
  "configureblackandwhite.descrip":"GcExcel可以将黑白效果的电子表格导出为PDF文件。",
  "configuredraft.descrip":"GcExcel可以将草稿效果的电子表格导出为PDF文件。",
  "configureheaderfooter.descrip":"页眉/页脚设置将应用于导出的PDF文件。",
  "configureoritation.descrip":"PageSetup的方向设置将应用于导出的PDF文件。",
  "configurepagebreaks.descrip":"分页设置将应用于导出的PDF文件。",
  "configurepageorder.descrip":"GcExcel将根据PageSetup的页面顺序设置进行分页，并将页面导出为PDF文件。",
  "configurepagesetup.descrip":"所有页面属性设置将应用于导出的PDF文件中。",
  "configurepagination.descrip":"GcExcel将首先进行自动分页，然后将每页导出到PDF文件。",
  "configureprintarea.descrip":"如果设置了PageSetup.PrintArea，则GcExcel仅将指定区域导出为PDF。",
  "configureprintpagerange.descrip":"如果设置了PageSetup.PrintPageRange，GcExcel只会将指定的页面导出为PDF。",
  "configureprinttails.descrip":"页脚将应用于导出的PDF文件中。",
  "configureprinttitles.descrip":"标题行和标题将应用于导出的PDF文件中。",
  "configurescaling.descrip":"缩放设置将应用于导出的PDF文件中。",
  "configureworkbookview.descrip":"请参考以下示例代码，以了解如何配置工作簿视图，例如是否显示滚动条，是否显示选项卡等。",
  "configureworksheetview.descrip":"请参考以下示例代码，以配置工作表视图对象，例如是否显示网格线或缩放系数等。",
  "configvalueaxesformat.descrip":"请参考以下示例代码，以了解如何配置值轴的格式，例如自定义线条样式，线条颜色，填充颜色等。",
  "configvalueaxisunits.descrip":"请参考以下示例代码，以了解如何配置值轴，例如轴的最大/最小比例，主要/次要单位等。",
  "configworkbookreferencestyle.descrip":"请参考下面的示例代码，以了解如何在工作簿中设置参考样式。",
  "configworksheet.descrip":"请参考以下示例代码来配置工作表。",
  "connectshapesbyconnector.descrip":"请参考以下示例代码，以了解如何使用连接器连接两个形状。",
  "controladjustingpagebreaks.descrip":"请参考以下示例代码，以在工作表中添加，删除和调整分页符。",
  "convertcharttoimage.descrip":"请参考以下示例代码，以了解如何将电子表格中的图表转换为图像。",
  "convertexceltopdf.descrip":"请参考以下代码，以了解如何使用GcExcel将Excel文件转换为PDF文档。",
  "convertrangetoimage.descrip":"请参考以下示例代码，以了解如何将电子表格范围转换为图片。",
  "convertshapetoimage.descrip":"请参考以下示例代码，以了解如何将电子表格中的形状转换为图片。",
  "copypasteoptions.descrip":"从单元格区域复制数据时，用户可以从多个粘贴选项中进行选择。用户还可以结合使用两种不同的粘贴选项。",
  "copyworksheet.descrip":"请参考以下示例代码，以在工作簿中复制工作表。",
  "copyworksheetbetweenworkbooks.descrip":"请参考以下示例代码，以在不同的工作簿之间复制工作表。",
  "createaveragerule.descrip":"此示例演示如何在范围上创建平均值条件格式。",
  "createcellvaluerule.descrip":"单元格值条件格式会将在单元格中输入的值与条件格式规则中指定的条件进行比较。此示例演示如何添加单元格值条件格式。",
  "createchart.descrip":"请参考以下示例代码，以了解如何在GcExcel中添加图表。",
  "createconnectorline.descrip":"请参考以下示例代码，以了解如何显示和自定义复合饼图的连接线。",
  "createcustomstyle.descrip":"您可以创建一个命名样式，根据您的喜好进行配置，然后将其应用于单元格或区域。",
  "createcustomvalidation.descrip":"您可以通过应用自定义验证来添加自定义验证规则来验证工作表中的数据。",
  "createdatabbarrule.descrip":"此示例演示如何在范围上创建数据条条件格式。",
  "createdatevalidation.descrip":"您可以通过在工作表中应用日期验证来验证在单元格或单元格区域中以日期格式输入的数据。",
  "createdecimalvalidation.descrip":"您可以验证数据，并通过在工作表中应用十进制验证来确保用户仅在单元格或单元格区域中添加十进制数字。",
  "createdropline.descrip":"请参考以下示例代码，以了解如何显示和自定义折线图的垂线。",
  "createexpressionrule.descrip":"条件格式中的表达式规则用于设置公式条件格式。可以使用IFormatCondition接口的属性和方法添加此规则。",
  "createhiloline.descrip":"请参考以下示例代码，以了解如何显示和自定义折线图的高低点连线。",
  "createhyperlinks.descrip":"请参考以下示例代码，插入一个指向到外部文件，网页，工作表中的范围以及电子邮件地址的超链接。",
  "createiconsetrule.descrip":"图标集条件格式根据在单元格中输入的值显示图标。每个值代表一个与单元格上应用的图标集条件格式匹配的独特图标，该图标将出现在单元格中。可以使用IIconSetCondition接口的属性和方法添加此规则。",
  "createlistvalidation.descrip":"您还可以通过在工作表中应用序列数据验证来验证插入到单元格或单元格区域中的列表。",
  "createmultiruleforrange.descrip":"您可以将多个条件格式应用于一个范围，每种条件格式将按照其优先级顺序生效，可以使用StopIfTrue停止应用后续的条件格式。",
  "createnewworkbook.descrip":"请参考以下示例代码，以了解如何创建工作簿。",
  "createpicture.descrip":"请参考下面的示例代码，以了解如何在工作表中创建图片对象。",
  "createpivottable.descrip":"请参考下面的示例代码，以了解如何在GcExcel中创建数据透视表。",
  "createrangegroup.descrip":"您可以通过使用IRange接口的Group方法并指定要对其应用分组的行/列来应用行/列分组。请参考以下示例代码，以在工作表中应用行/列分组。",
  "createsecondaryaxis.descrip":"请参考以下示例代码，以了解如何使数据系列使用数据辅轴。",
  "createseriesline.descrip":"请参考以下示例代码，以了解如何为柱状图创建数据系列线。",
  "createsparklines.descrip":"请参考以下示例代码，以了解如何在工作表中创建迷你图。",
  "createstylebasedon.descrip":"使用GcExcel.NET，您不必总是从头开始创建自定义命名样式。而是可以根据您的特定首选项修改现有样式（通过从Styles集合中获取现有样式），并将新样式另存为另一种可以在需要时使用的工作簿样式。",
  "createtable.descrip":"在GcExcel .NET中，您可以使用ITables接口的Add方法在电子表格中创建表，或者通过指定工作表中的现有数据将单元格区域简单地转换为表。",
  "createtextlength.descrip":"您可以通过在工作表中应用文本长度验证来验证在单元格或单元格区域中输入的文本的长度。",
  "createthreecolorscalerule.descrip":"三色刻度条件格式使用滑动色标来格式化单元格或单元格范围。例如，如果数字单元格值1用黄色表示，而50用绿色表示，则25将是浅绿色。可以使用IColorScale接口的属性和方法添加此规则。",
  "createtimevalidation.descrip":"您可以通过在工作表中应用时间型数据验证来验证在单元格或单元格区域中输入的时间。",
  "createtopbottomrule.descrip":"排名前后条件格式检查单元格范围顶部或底部的值是否与单元格中所需的值匹配。如果值不匹配，则数据被视为无效。可以使用ITop10接口的属性和方法添加此规则。",
  "createtrendline.descrip":"请参考以下示例代码，以了解如何显示和自定义趋势线。",
  "createtwocolorscalerule.descrip":"双色刻度条件格式使用滑动色标来格式化单元格或单元格范围。例如，如果数字单元格值1用黄色表示，而50用绿色表示，则25将是浅绿色。可以使用IColorScale接口的属性和方法添加此规则。",
  "createuniquerule.descrip":"条件格式中的唯一值规则适用于检查在单元格中输入的值是否在该特定范围内是唯一值。仅当复制选项设置为false时才有可能。要检查重复值，请分别应用重复规则。",
  "createupdownbars.descrip":"请参考以下示例代码，以查看如何显示和自定义折线图的涨跌线。",
  "createwholenumbervalidation.descrip":"您可以验证数据，并通过在工作表中应用整数验证来确保用户仅在单元格或一系列单元格中添加整数。",
  "customnumberformat.descrip":"此示例演示如何为单元格设置自定义数字格式。",
  "custompageinfos.descrip":"请参考以下示例代码，以了解如何自定义任何页面的页面设置，然后导出到PDF文件。",
  "customshape.descrip":"GcExcel可以将包含自定义形状的电子表格导出为PDF文件。",
  "customsort.descrip":"请参考以下示例代码，以了解如何为范围创建自定义排序。",
  "cutcopyrange.descrip":"GcExcel .NET为用户提供了从特定区域剪切或复制一个单元格或一系列单元格并将其粘贴到同一工作表或其他工作表中另一个区域的能力。此外，用户可以从多个粘贴选项中进行选择，还可以在从单元格区域复制数据时组合不同的粘贴选项。",
  "cutcopyrangebetweenworkbooks.descrip":"除了在工作簿中剪切或复制范围外，GcExcel还具有在不同工作簿之间剪切或复制范围的功能。",
  "dateandtimeformat.descrip":"此示例演示如何为单元格设置一种日期/时间格式。",
  "datedynamicfilter.descrip":"请参考下面的示例代码，以了解如何应用动态日期过滤器来显示与指定日期条件匹配的结果，同时考虑到每天自动更新的当前系统日期。",
  "datefilter.descrip":"请参考以下示例代码，以了解如何将日期过滤器应用于某个范围，以仅显示那些落在指定日期内的结果。",
  "deletechart.descrip":"请参考以下示例代码，以了解如何在GcExcel中删除图表。",
  "deleteconditionalformatrules.descrip":"如果要删除应用于工作表中单元格区域的格式设置规则，则可以使用IFormatCondition接口的Delete方法来完成。",
  "deletehyperlinks.descrip":"请参考以下示例代码来删除超链接",
  "deletepicture.descrip":"请参考下面的示例代码，以了解如何删除工作表中的图片对象。",
  "deleteseries.descrip":"请参考以下示例代码，以了解如何从图表中删除数据系列。",
  "deletevalidation.descrip":"您可以使用IValidation界面的Delete方法删除应用的验证规则。",
  "deleteworksheet.descrip":"请参考以下示例代码，从工作簿中删除工作表。",
  "dirtyandcalculation.descrip":"GcExcel允许用户禁用计算引擎，修改并重新计算特定范围的公式。",
  "dotablefilter.descrip":"切片器的状态将与表过滤器同步。",
  "drawrangeinsideapdf.descrip":"请参考以下示例代码，以允许用户在PDF文件中呈现Excel范围。",
  "exportcellrichtext.descrip":"GcExcel可以将富文本格式的单元格导出为PDF文件。",
  "exportcharttoimage.descrip":"请参考以下示例代码，以了解如何将图表从现有文件转换为图像。",
  "exportflowchart.descrip":"在此示例中，GcExcel首先打开一个包含某些形状的Excel文件，然后将其导出为PDF文件。",
  "exportrangetoimage.descrip":"请参考以下示例代码，以了解如何将范围转换为图像并保存到现有文件中。",
  "exportshapetoimage.descrip":"请参考以下示例代码，以了解如何将形状转换为图像并保存到现有文件中。",
  "exportsheettoimage.descrip":"请参考以下示例代码，以了解如何将工作表转换为图片并保存到现有文件中。",
  "extendseries.descrip":"请参考以下示例代码，以了解如何扩展图表中每个系列的参考。",
  "filterbyautomaticfontcolor.descrip":"请参考以下示例代码，以了解如何在列上按单元格自动字体颜色应用过滤器以显示包含具有自动字体颜色的单元格的结果。",
  "filterbycellcolor.descrip":"请参考以下示例代码，以了解如何在列上按单元格颜色应用过滤器以显示包含具有不同填充阴影的单元格的结果。",
  "filterbyfontcolor.descrip":"请参考以下示例代码，以了解如何在列上按字体颜色应用过滤器以显示包含具有特定字体颜色的单元格的结果。",
  "filterbyicon.descrip":"请参考以下示例代码，以了解如何应用按图标的过滤器以显示单元格中包含特定图标的结果。",
  "filterbynofill.descrip":"请参考下面的示例代码，以了解如何通过不填充列来应用过滤器以显示包含不填充颜色的单元格的结果。",
  "filterbynoicon.descrip":"请参考以下示例代码，以了解如何在没有图标的单元格中应用不带图标的过滤器以显示结果。",
  "filteritemsinpivottable.descrip":"请参考下面的示例代码，以了解如何在数据透视表中隐藏一些行字段。",
  "findbasicusage.descrip":"请参考下面的示例代码，以了解如何查找范围内某些文本的首次出现。",
  "finddisplayformat.descrip":"请参考以下示例代码，以了解如何按特定格式查找单元格。",
  "findlookatsearchorderdirectionmatchcase.descrip":"请参考以下示例代码，以了解如何查找带有选项的单元格。",
  "findmatchbyte.descrip":"请参考以下示例代码，以了解如何在范围内查找双字节字符。",
  "findwithafter.descrip":"请参考以下示例代码，以了解如何查找某个范围内所有匹配的单元格。",
  "findwithlookin.descrip":"请参考以下示例代码，以了解如何在不同位置查找单元格。",
  "fontcolor.descrip":"此示例演示如何设置单元格的字体颜色。",
  "fonteffect.descrip":"此示例演示如何设置单元格的各种字体效果。",
  "fontname.descrip":"本示例说明如何设置单元格的字体名称和主题字体名称。",
  "fontsize.descrip":"此示例演示如何设置单元格的字体大小。",
  "fontstyle.descrip":"此示例演示如何设置单元格的字体粗体和斜体。",
  "fontunderline.descrip":"此示例演示如何设置单元格的不同种类的下划线。",
  "getdisplayformat.descrip":"您可以使用IRange.DisplayFormat属性获取单元格的显示样式，单元格的显示样式可能来自其样式，如果单元格位于表中则为表格样式，如果单元格匹配条件为条件格式等等。",
  "getfeaturerelatedusedrange.descrip":"您可以使用IRange.DisplayFormat属性获取单元格的显示样式，单元格的显示样式可能来自其样式，如果单元格位于表中则为表格样式，如果单元格匹配条件为条件格式等等。",
  "getrangerowcountcolumncount.descrip":"请参考以下示例代码，以了解如何获取特定范围内的行/列/单元格计数。",
  "getworksheetusedrange.descrip":"使用范围包括任何曾经使用过的单元格。例如，单元格A1包含一个值，单元格A2具有迷你图或超链接，则该单元格将被视为已用范围。",
  "groupexistsparklines.descrip":"请参考以下示例代码，以了解如何对当前迷你图进行分组。",
  "halignvalign.descrip":"您可以在范围单元格中为内容设置不同的水平和垂直对齐方式值。",
  "hiddenrowcolumn.descrip":"您可以使用IRange接口的Hidden属性选择在工作表中隐藏还是显示行和列。",
  "importcsvfiletoworkbook.descrip":"请参考以下示例代码，以了解如何加载csv文件。",
  "importcsvfiletoworkbookwithoptions.descrip":"请参考以下示例代码，以了解如何使用选项加载csv文件。",
  "importexcelfiledataonly.descrip":"请参考以下示例代码，以了解如何仅从Excel文件中加载数据。",
  "importexcelfiletoworkbook.descrip":"请参考以下示例代码，以了解如何打开Excel文件。",
  "importexcelfilewithoutcalculation.descrip":"请参考以下示例代码，以了解如何避免在打开Excel文件后重新计算公式。",
  "importexcelfilewithpassword.descrip":"请参考以下示例代码，以了解如何打开受密码保护的Excel文件。",
  "importoleobjectstoworkbookandexport.descrip":"GcExcel可以打开带有ole对象的Excel文件。",
  "importxlsmtoworkbook.descrip":"GcExcel可以打开xlsm文件，并且在再次导出到xlsm之后将保留所有宏和表单控件。",
  "insertcellsdeletecells.descrip":"GcExcel使您可以插入和删除单元格或一系列单元格，以帮助根据需要自定义工作表。",
  "insertdeleterowscolumns.descrip":"GcExcel使您能够插入或删除工作表中的行和列。",
  "insertdeletetablerowcolumns.descrip":"此示例演示如何添加和删除表中的列和行。",
  "keeptogether.descrip":"此示例代码演示了导出到PDF文件时如何将相邻行保持在一页中。",
  "lineargradientfill.descrip":"此示例演示如何为单元格设置线性渐变填充。",
  "linechart.descrip":"请参考以下示例代码，以了解如何在GcExcel中添加折线图。",
  "linemarkerschart.descrip":"请参考以下示例代码，以了解如何在GcExcel中添加带有数据标记的折线图。",
  "linemarkerstacked100chart.descrip":"请参考以下示例代码，以了解如何在GcExcel中添加带有标记图的百分比堆积折线图。",
  "linemarkerstackedchart.descrip":"请参考以下示例代码，以了解如何在GcExcel中添加带有数据标记的堆积折线图。",
  "linestacked100chart.descrip":"请参考以下示例代码，以了解如何在GcExcel中添加百分比堆积折线图。",
  "linestackedchart.descrip":"请参考以下示例代码，以了解如何在GcExcel中添加堆积折线图。",
  "loadandsavejsonwithshapes.descrip":"GcExcel可以加载和保存带有形状的ssjson文件。",
  "manageheadersondifferentpages.descrip":"请参考以下示例代码，以了解在导出到PDF文件时在不同页面上导出不同的标题。",
  "mergecells.descrip":"用户可以在模板中使用合并单元格。\n\nGcExcel将检测模板中合并单元格的类型，并生成预期的报告。",
  "modifysubtotalsforpivotfield.descrip":"请参考以下示例代码，以了解如何为数据透视表字段设置不同的小计功能。",
  "modifyvalidation.descrip":"您可以通过设置IValidation接口的属性（Type属性，Formula1属性，Formula2属性等等）来更改范围的验证规则。",
  "moveworksheet.descrip":"请参考以下示例代码，将工作表移至所有工作表的末尾。",
  "moveworksheetbetweenworkbooks.descrip":"请参考以下示例代码，将工作表移至其他工作簿中。",
  "multiselectfilter.descrip":"请参考以下示例代码，以了解如何应用多重选择过滤器以基于具有多个选择的单元格值快速过滤数据。",
  "myaddfunction.descrip":"此示例演示如何实现自定义add方法。",
  "myconcatenatefunction.descrip":"此示例演示如何实现自定义concatenate函数以串联每个单元格的文本。",
  "myconditionalsumfunction.descrip":"此示例演示如何实现自定义条件sum函数来计算以红色背景色填充的那些单元格的总和。",
  "myiserrorfunction.descrip":"此示例演示如何实现自定义函数以确定单元格是否为计算错误。",
  "myismergedrangefunction.descrip":"此示例演示如何实现自定义函数以确定单元格是否合并。",
  "mysumfunction.descrip":"此示例演示如何实现您自己的sum函数。",
  "numberfilter.descrip":"请参考下面的示例代码，以了解如何应用数字过滤器来显示符合应用于包含数字单元格值的列的指定条件的数据。",
  "numberformating.descrip":"GcExcel可以将具有不同数字格式的单元格文本导出到PDF文件。",
  "numberformats.descrip":"GcExcel支持各种类Excel的数字格式。",
  "overflow.descrip":"GcExcel可以将溢出单元格导出为PDF文件。",
  "patternfill.descrip":"此示例演示如何为单元格设置图案填充。",
  "performcalculationsintable.descrip":"您可以显示表的总行，并为特定的表列设置TotalsCalculation的类型。",
  "picturecopy.descrip":"请参考下面的示例代码，以了解如何在工作表中复制图片。",
  "picturecut.descrip":"请参考以下示例代码，以了解如何在工作表中剪切图片。",
  "pictureduplicate.descrip":"请参考以下示例代码，以了解如何复制图片。",
  "piechart.descrip":"请参考以下示例代码，以了解如何在GcExcel中添加饼图。",
  "pie_doughnutchart.descrip":"请参考以下示例代码，以了解如何在GcExcel中添加圆环图。",
  "printmultipleworksheetstoonepage.descrip":"请参考以下示例代码，以允许用户将多个工作表导出到PDF文件中的单个页面。",
  "printspecificpages.descrip":"请参考以下示例代码，将某些特定页面导出到PDF文件。",
  "protectworksheet.descrip":"使用IWorkbook.Protect方法保护工作簿。",
  "reapplyfilter.descrip":"请参考以下示例代码，以查看在单元格更改后如何重新应用过滤器。",
  "rectangulargradientfill.descrip":"此示例演示如何为单元格设置矩形渐变填充。",
  "refreshpivottable.descrip":"请参考以下示例代码，以查看在某些单元格值更改时如何刷新数据透视表。",
  "removetable.descrip":"在GcExcel .NET中，您可以使用ITable界面的Delete方法删除电子表格中的表格。",
  "renderexcelrangesinsideapdf.descrip":"请参考以下示例代码，以允许用户在运行时将PDF范围内的Excel范围以及一些自定义文本信息呈现到页面上的指定位置。",
  "replacebasicusage.descrip":"请参考以下示例代码，以了解如何替换范围内单元格的内容。",
  "replacecustomwrapsearch.descrip":"请参考以下示例代码，以了解如何在循环中搜索和替换单元格内容。",
  "replacewithoptions.descrip":"请参考以下示例代码，以了解如何使用选项替换单元格的内容。",
  "rotatecellcontents.descrip":"您可以通过设置IRange.Orientation属性来旋转单元格的内容。",
  "saveborder.descrip":"GcExcel可以将各种Excel边框导出为PDF。",
  "saveconditionalformatting.descrip":"GcExcel可以将具有条件格式的电子表格导出为PDF。",
  "savemultipleworkbookstopdf.descrip":"GcExcel允许用户将多个工作簿保存到一个PDF文件中。",
  "savepicturetopdf.descrip":"GcExcel可以将带有图片的电子表格导出为PDF。",
  "savepivottable.descrip":"GcExcel可以将带有数据透视表的电子表格导出为PDF。",
  "saverangefilltopdf.descrip":"GcExcel可以将具有不同填充类型（实心，渐变，图案）的电子表格范围导出到PDF。",
  "savesparklinestopdf.descrip":"GcExcel可以将包含迷你图的电子表格导出为PDF。",
  "savetable.descrip":"GcExcel可以将包含表格的电子表格导出为PDF。",
  "saveworkbooktocsvfile.descrip":"请参考以下示例代码，以了解如何将工作簿保存到csv文件中。",
  "saveworkbooktocsvfilewithoptions.descrip":"请参考以下示例代码，以了解如何使用选项将工作簿保存到csv文件中。",
  "saveworkbooktoexcelfile.descrip":"请参考下面的示例代码，以了解如何将工作簿保存到Excel文件。",
  "saveworkbooktopdf.descrip":"请参考以下示例代码，以将工作簿导出为PDF文档。",
  "saveworkbookwithpassword.descrip":"请参考下面的示例代码，以了解如何将工作簿保存到受密码保护的Excel文件中。",
  "saveworksheettocsvfile.descrip":"请参考以下示例代码，以将单个工作表保存到csv文件。",
  "saveworksheettocsvfilewithoptions.descrip":"请参考以下示例代码，以使用选项将单个工作表保存到csv文件中。",
  "saveworksheettopdf.descrip":"请参考以下示例代码，以将单个工作表导出到PDF文档。",
  "setaxisscaletype.descrip":"请参考以下示例代码，以了解如何设置纵轴比例尺类型。",
  "setaxistickmark.descrip":"请参考以下示例代码，以了解如何设置轴刻度位置。",
  "setbackgroundimage.descrip":"请参考以下示例代码来设置工作表的背景图片。",
  "setbuiltinstyle.descrip":"请参考以下示例代码，以了解如何设置内建透视表样式。",
  "setcustompivotstyle.descrip":"请参考以下示例代码，以了解如何自定义数据透视表样式。",
  "setfontsfolderpath.descrip":"请参考以下示例代码，以了解在保存到PDF文档之前如何设置字体文件夹路径。",
  "setgrouptype":"设定群组类型。",
  "setnumberformatforfield.descrip":"请参考以下示例代码，以了解如何设置数据透视表区域的数字格式。",
  "setrangeformulahidden.descrip":"当IRange.FormulaHidden为true时，公式将不会显示在导出的Excel文件中。",
  "setrangelocked.descrip":"IRange.Locked确定在保护工作表时是否可以在导出的Excel中修改单元格。",
  "setrangevalue.descrip":"GcExcel允许用户使用IRange接口的属性和方法为单元格范围指定自定义值。",
  "setrichtextforcomment.descrip":"请参考以下示例代码，以了解如何为单元格创建富文本格式注释。",
  "setrowheightcolumnwidth.descrip":"请参考以下示例代码，以了解如何设置行的高度（以磅为单位）和设置列的宽度（单个数字字符宽度的数量）。",
  "setshapenottoprint.descrip":"IShape接口的IsPrintable属性可用于获取或设置是否将对象打印在PDF文档中。",
  "setshapetext.descrip":"请参考以下示例代码，以了解如何为形状添加文本内容。",
  "setshowtablestyles.descrip":"请参考以下示例代码，以了解如何显示或隐藏某些表格样式元素。",
  "setvarycolorforcolumnchart.descrip":"请参考以下示例代码，以了解如何使依据数据点着色。",
  "shapecopy.descrip":"请参考以下示例代码，以了解如何复制形状对象。",
  "shapecut.descrip":"请参考以下示例代码，以了解如何剪切形状对象。",
  "shapeduplicate.descrip":"请参考以下示例代码，以了解如何复制形状对象。",
  "shapewithgradientandpatternfill.descrip":"GcExcel可以将具有渐变或图案填充的形状导出到PDF文件。",
  "shapewithline.descrip":"GcExcel可以将具有各种边框设置的图形导出到PDF文件。",
  "shapewithpictureortexturefill.descrip":"GcExcel可以将带有图片或纹理填充的图形导出到PDF文件。",
  "shapewithrotation.descrip":"GcExcel可以将旋转的图形导出到PDF文件。",
  "shapewithtext.descrip":"GcExcel可以将带有文本的图形导出到PDF文件。",
  "showspecificlevel.descrip":"您还可以选择使用IOutline接口的ShowLevels方法显示指定层级数据。",
  "shrinktofit.descrip":"您可以通过将IRange.ShrinkToFit设置单元格缩小字体填充。",
  "shrinktofitforwrappedtext.descrip":"请参考以下示例代码，以了解换行文本缩小字体填充。",
  "slicercopy.descrip":"请参考以下示例代码以查看如何复制切片器对象。",
  "slicercut.descrip":"请参考以下示例代码，以了解如何切割切片器对象。",
  "slicerduplicate.descrip":"请参考以下示例代码，以了解如何复制切片器对象。",
  "solidfill.descrip":"此示例演示如何为单元格设置纯色填充。",
  "sortrangebyfontcolor.descrip":"请参考以下示例代码，以了解如何按字体颜色对范围进行排序。",
  "sortrangebyicon.descrip":"请参考以下示例代码，以了解如何通过条件格式图标对范围进行排序。",
  "sortrangebyinterior.descrip":"请参考以下示例代码，以了解如何按背景色对范围进行排序。",
  "sortrangebyvalue.descrip":"请参考以下示例代码，以了解如何按值对范围进行排序。",
  "stock_highlowclosestockchart.descrip":"请参考以下示例代码，以了解如何在GcExcel中添加盘高-盘低-收盘图。",
  "stock_openhighlowclosestock.descrip":"请参考下面的示例代码，以了解如何在GcExcel中添加开盘-盘高-盘低-收盘图。",
  "stock_volumehighlowclosestock.descrip":"请参考下面的示例代码，以了解如何在GcExcel中添加成交量-盘高-盘低-收盘图。",
  "stock_volumeopenhighlowclose.descrip":"请参考以下示例代码，以了解如何在GcExcel中添加成交量-开盘-盘高-盘低-收盘图。",
  "tablefilter.descrip":"当您要处理大量数据时，可以在电子表格上创建任意数量的表，并在每个表的列上应用单独的过滤器，以有效地管理信息。",
  "tablesort.descrip":"GcExcel .NET提供了对工作表中的特定表进行排序的选项。为此，可以使用ITable接口的Sort属性。 Apply方法用于应用选定的排序状态并显示结果。",
  "text.descrip":"##导出文字\n各种文本效果可以导出到pdf文件，例如：\n-具有Excel数字格式器的文本\n-溢出文本\n-字体效果：文本对齐，自动换行，文本缩进，缩小以适合，加下划线，删除线等",
  "textfilter.descrip":"将数据与定义了“模板”单元格中的“文本框字段”的Excel模板绑定并导出为PDF。",
  "textorientation.descrip":"请参考以下示例代码，以查看如何应用文本过滤器以显示单元格值与应用过滤器的列中的指定文本或正则表达式值匹配的行。",
  "textstyle.descrip":"GcExcel可以将各种字体效果导出到PDF，例如文本下划线，删除线，粗体等。",
  "tojsonfromjson.descrip":"请参考以下示例代码，以了解如何从json加载文件和把工作簿保存到json文件。",
  "ungrouprange.descrip":"请参考下面的示例代码以取消工作表中的行和列的分组。",
  "unprotectworksheet.descrip":"请参考以下示例代码以取消保护工作表。",
  "usearrayformula.descrip":"数组公式是一种公式，可以对单个单元格或单元格范围执行多次计算以显示一列或一列小计。请参考以下示例代码来设置数组公式并获取整个数组。",
  "usedateaxis.descrip":"请参考以下示例代码，以了解如何配置迷你图的日期轴。",
  "useslicerdofilter.descrip":"请参考以下示例代码，以了解如何使用切片器进行过滤。",
  "useslicertoclearfilter.descrip":"请参考以下示例代码，以了解如何使用切片器清除数据上的所有过滤器。",
  "usetableformula.descrip":"表公式是指在工作表中用作结构化引用的公式，而不是用作显式单元格引用的公式。请参考以下示例代码，以在电子表格中设置表格公式。",
  "verticaltext.descrip":"请参考以下示例代码来设置日语垂直文本，并将其导出到PDF文档以查看效果。",
  "wraptext.descrip":"您可以使用IRange.WrapText属性控制单元格文本的换行。",
  "xyscatterchart.descrip":"请参考以下示例代码，以了解如何在GcExcel中添加散点图。",
  "xyscatterlineschart.descrip":"将带直线和数据标记的散点图导出为PDF文件。",
  "xyscattersmooth.descrip":"请参考以下示例代码，以了解如何在GcExcel中添加具有平滑线的散点图。",
  "xyscattersmoothwithmarkers.descrip":"请参考以下示例代码，以了解如何在GcExcel中添加具有数据标记和平滑线的散点图。",
  "createstylebasedon.name": "根据已有样式创建和修改样式",
  "pdftoexcel.name": "从PDF提取文本",
  "basicshapes.name": "基本形状",
  "printmultipleworksheetstoonepage.name": "将多个工作表打印到一页",
  "shapewithgradientandpatternfill.name": "形状不同的填充",
  "exportchart.descrip": "##导出图表\nGrapeCity Documents for Excel支持将图表导出为PDF文件。\n\n-专栏\n-线\n-派\n-酒吧\n-面积\n-X Y（散点图）\n- 股票\n-雷达\n-组合",
  "exportchart.name":"导出图表",
  "areachartpdf.name":"面积图",
  "barchartpdf.name":"条形图",
  "chartgallerypdf.name":"图表集",
  "columnchartpdf.name":"柱形图",
  "combochartpdf.name":"组合图",
  "linechartpdf.name":"折线图",
  "piechartpdf.name":"饼图",
  "radarchartpdf.name":"雷达图",
  "stockchartpdf.name":"股价图",
  "xyscatterchartpdf.name":"X Y(散点图)",
  "deferalyoutupdate.descrip":"请参考下面的示例代码，以了解如何推迟数据透视表的布局更新。",
  "fieldLayoutSettings.descrip":"请参考以下示例代码，以了解如何更改数据透视表的布局。",
  "fieldLayoutSettings.name":"设置布局",
  "getdetailtange.descrip":"请参考以下示例代码，以了解如何获取数据透视表的详细信息范围。",
  "getdetailtange.name":"获取详细范围"
}